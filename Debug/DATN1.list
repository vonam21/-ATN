
DATN1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800a5e4  0800a5e4  0001a5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a994  0800a994  000202a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a994  0800a994  000202a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a994  0800a994  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a994  0800a994  0001a994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a998  0800a998  0001a998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800a99c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa8  200002a8  0800ac40  000202a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000e00  20000d50  0800ac40  00020d50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202cd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f4a  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002801  00000000  00000000  0003325a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00035a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e10  00000000  00000000  00036c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e2f  00000000  00000000  00037a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166bf  00000000  00000000  0005085f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092b0c  00000000  00000000  00066f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053b4  00000000  00000000  000f9a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002a8 	.word	0x200002a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a5cc 	.word	0x0800a5cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002ac 	.word	0x200002ac
 8000148:	0800a5cc 	.word	0x0800a5cc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <arr_to_int1>:
void send_data_to_server(void);
int limit_two_digit(int a);



int arr_to_int1(char arr[], int size) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	int result;
	switch(size)
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	3b01      	subs	r3, #1
 800017e:	2b03      	cmp	r3, #3
 8000180:	d84f      	bhi.n	8000222 <arr_to_int1+0xb2>
 8000182:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <arr_to_int1+0x18>)
 8000184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000188:	08000199 	.word	0x08000199
 800018c:	080001a1 	.word	0x080001a1
 8000190:	080001bd 	.word	0x080001bd
 8000194:	080001e7 	.word	0x080001e7
	{
		case 1:
			result = arr[0];
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	60fb      	str	r3, [r7, #12]
		break;
 800019e:	e040      	b.n	8000222 <arr_to_int1+0xb2>
		case 2:
			result = arr[0]*10 + arr[1];
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	461a      	mov	r2, r3
 80001a6:	4613      	mov	r3, r2
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	4413      	add	r3, r2
 80001ac:	005b      	lsls	r3, r3, #1
 80001ae:	461a      	mov	r2, r3
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	3301      	adds	r3, #1
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	4413      	add	r3, r2
 80001b8:	60fb      	str	r3, [r7, #12]
		break;
 80001ba:	e032      	b.n	8000222 <arr_to_int1+0xb2>
		case 3:
			result = arr[0]*100 + arr[1]*10 + arr[2];
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	461a      	mov	r2, r3
 80001c2:	2364      	movs	r3, #100	; 0x64
 80001c4:	fb03 f202 	mul.w	r2, r3, r2
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	3301      	adds	r3, #1
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	4619      	mov	r1, r3
 80001d0:	460b      	mov	r3, r1
 80001d2:	009b      	lsls	r3, r3, #2
 80001d4:	440b      	add	r3, r1
 80001d6:	005b      	lsls	r3, r3, #1
 80001d8:	4413      	add	r3, r2
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	3202      	adds	r2, #2
 80001de:	7812      	ldrb	r2, [r2, #0]
 80001e0:	4413      	add	r3, r2
 80001e2:	60fb      	str	r3, [r7, #12]
		break;
 80001e4:	e01d      	b.n	8000222 <arr_to_int1+0xb2>
		case 4:
			result = arr[0]*1000 + arr[1]*100 + arr[2]*10 + arr[3];
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	461a      	mov	r2, r3
 80001ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f0:	fb03 f202 	mul.w	r2, r3, r2
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	4619      	mov	r1, r3
 80001fc:	2364      	movs	r3, #100	; 0x64
 80001fe:	fb01 f303 	mul.w	r3, r1, r3
 8000202:	441a      	add	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3302      	adds	r3, #2
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	4619      	mov	r1, r3
 800020c:	460b      	mov	r3, r1
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	440b      	add	r3, r1
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	4413      	add	r3, r2
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	3203      	adds	r2, #3
 800021a:	7812      	ldrb	r2, [r2, #0]
 800021c:	4413      	add	r3, r2
 800021e:	60fb      	str	r3, [r7, #12]
		break;
 8000220:	bf00      	nop

	}
    return result;
 8000222:	68fb      	ldr	r3, [r7, #12]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <limit_two_digit>:

int limit_two_digit(int a){
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if(a >= 100)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b63      	cmp	r3, #99	; 0x63
 800023c:	dd0b      	ble.n	8000256 <limit_two_digit+0x26>
		return a%100;
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <limit_two_digit+0x34>)
 8000242:	fb83 1302 	smull	r1, r3, r3, r2
 8000246:	1159      	asrs	r1, r3, #5
 8000248:	17d3      	asrs	r3, r2, #31
 800024a:	1acb      	subs	r3, r1, r3
 800024c:	2164      	movs	r1, #100	; 0x64
 800024e:	fb01 f303 	mul.w	r3, r1, r3
 8000252:	1ad3      	subs	r3, r2, r3
 8000254:	e000      	b.n	8000258 <limit_two_digit+0x28>
	return a;
 8000256:	687b      	ldr	r3, [r7, #4]
}
 8000258:	4618      	mov	r0, r3
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	51eb851f 	.word	0x51eb851f

08000268 <check_buffer_RX>:
	flag_check_OK = 0;
	FLAG_CHECK_SEND_DATA = 0;
}

int check_buffer_RX(void)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(data_RX); i++) {
 800026e:	2300      	movs	r3, #0
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	e00a      	b.n	800028a <check_buffer_RX+0x22>
		if (data_RX[i] != 0) {
 8000274:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <check_buffer_RX+0x38>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4413      	add	r3, r2
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <check_buffer_RX+0x1c>
			return 1;
 8000280:	2301      	movs	r3, #1
 8000282:	e007      	b.n	8000294 <check_buffer_RX+0x2c>
	for (int i = 0; i < sizeof(data_RX); i++) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3301      	adds	r3, #1
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000290:	d3f0      	bcc.n	8000274 <check_buffer_RX+0xc>
		}
	}
	return 0;
 8000292:	2300      	movs	r3, #0
}
 8000294:	4618      	mov	r0, r3
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000524 	.word	0x20000524

080002a4 <compare_n_char>:

int compare_n_char(uint8_t *buffer_1, int leng_buf_1, uint8_t *buffer_2, int leng_buf_2, uint8_t *match_buf)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b089      	sub	sp, #36	; 0x24
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
 80002b0:	603b      	str	r3, [r7, #0]
	int cout = 0, i_global = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
 80002b6:	2300      	movs	r3, #0
 80002b8:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < leng_buf_2; i++) {
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
 80002be:	e012      	b.n	80002e6 <compare_n_char+0x42>
		if (buffer_1[i] != buffer_2[i]) {
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4413      	add	r3, r2
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	6879      	ldr	r1, [r7, #4]
 80002cc:	440b      	add	r3, r1
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d002      	beq.n	80002da <compare_n_char+0x36>
			return -1;
 80002d4:	f04f 33ff 	mov.w	r3, #4294967295
 80002d8:	e01d      	b.n	8000316 <compare_n_char+0x72>
		}
		i_global++;
 80002da:	69bb      	ldr	r3, [r7, #24]
 80002dc:	3301      	adds	r3, #1
 80002de:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < leng_buf_2; i++) {
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	3301      	adds	r3, #1
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	697a      	ldr	r2, [r7, #20]
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	dbe8      	blt.n	80002c0 <compare_n_char+0x1c>
	}
	while (i_global < leng_buf_2) {
 80002ee:	e00d      	b.n	800030c <compare_n_char+0x68>
		match_buf[cout] = buffer_1[i_global];
 80002f0:	69bb      	ldr	r3, [r7, #24]
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	441a      	add	r2, r3
 80002f6:	69fb      	ldr	r3, [r7, #28]
 80002f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80002fa:	440b      	add	r3, r1
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	701a      	strb	r2, [r3, #0]
		cout++;
 8000300:	69fb      	ldr	r3, [r7, #28]
 8000302:	3301      	adds	r3, #1
 8000304:	61fb      	str	r3, [r7, #28]
		i_global++;
 8000306:	69bb      	ldr	r3, [r7, #24]
 8000308:	3301      	adds	r3, #1
 800030a:	61bb      	str	r3, [r7, #24]
	while (i_global < leng_buf_2) {
 800030c:	69ba      	ldr	r2, [r7, #24]
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	429a      	cmp	r2, r3
 8000312:	dbed      	blt.n	80002f0 <compare_n_char+0x4c>
	}
	return 0;
 8000314:	2300      	movs	r3, #0
}
 8000316:	4618      	mov	r0, r3
 8000318:	3724      	adds	r7, #36	; 0x24
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <send_data_to_server>:
	//			goto UNSUB_AGAIN;
	//		}
	//	}
}
void send_data_to_server(void)
{
 8000320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000322:	b099      	sub	sp, #100	; 0x64
 8000324:	af0e      	add	r7, sp, #56	; 0x38
	FLAG_CHECK_SEND_DATA = 1;
 8000326:	4b7c      	ldr	r3, [pc, #496]	; (8000518 <send_data_to_server+0x1f8>)
 8000328:	2201      	movs	r2, #1
 800032a:	601a      	str	r2, [r3, #0]
	flag_check_RX_PAYLOAD = 0;
 800032c:	4b7b      	ldr	r3, [pc, #492]	; (800051c <send_data_to_server+0x1fc>)
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
	flag_check_OK = 1;
 8000332:	4b7b      	ldr	r3, [pc, #492]	; (8000520 <send_data_to_server+0x200>)
 8000334:	2201      	movs	r2, #1
 8000336:	601a      	str	r2, [r3, #0]
	int err;
	count_err = 0;
 8000338:	4b7a      	ldr	r3, [pc, #488]	; (8000524 <send_data_to_server+0x204>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
	flag_pass_input = 0;
 800033e:	4b7a      	ldr	r3, [pc, #488]	; (8000528 <send_data_to_server+0x208>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
	data_avail_mqtt = 0;
 8000344:	4b79      	ldr	r3, [pc, #484]	; (800052c <send_data_to_server+0x20c>)
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
UART6:

	flag_pass = 0;
 800034a:	4b79      	ldr	r3, [pc, #484]	; (8000530 <send_data_to_server+0x210>)
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 8000350:	4b78      	ldr	r3, [pc, #480]	; (8000534 <send_data_to_server+0x214>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
	flag_nhap_topic = 0;
 8000356:	4b78      	ldr	r3, [pc, #480]	; (8000538 <send_data_to_server+0x218>)
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
	update();
 800035c:	f000 fcc6 	bl	8000cec <update>
	update_lcd();
 8000360:	f000 fe1c 	bl	8000f9c <update_lcd>
	err = check_buffer_RX();
 8000364:	f7ff ff80 	bl	8000268 <check_buffer_RX>
 8000368:	6278      	str	r0, [r7, #36]	; 0x24
	if (err) {
 800036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800036c:	2b00      	cmp	r3, #0
 800036e:	d004      	beq.n	800037a <send_data_to_server+0x5a>
		HAL_Delay(300);
 8000370:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000374:	f004 fce6 	bl	8004d44 <HAL_Delay>
		goto UART6;
 8000378:	e7e7      	b.n	800034a <send_data_to_server+0x2a>
	}
	HAL_UART_Transmit(&huart1, data_SIM5, strlen((const char *)data_SIM5), 3000);
 800037a:	4870      	ldr	r0, [pc, #448]	; (800053c <send_data_to_server+0x21c>)
 800037c:	f7ff fef0 	bl	8000160 <strlen>
 8000380:	4603      	mov	r3, r0
 8000382:	b29a      	uxth	r2, r3
 8000384:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000388:	496c      	ldr	r1, [pc, #432]	; (800053c <send_data_to_server+0x21c>)
 800038a:	486d      	ldr	r0, [pc, #436]	; (8000540 <send_data_to_server+0x220>)
 800038c:	f007 fdba 	bl	8007f04 <HAL_UART_Transmit>
	HAL_Delay(1500);
 8000390:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000394:	f004 fcd6 	bl	8004d44 <HAL_Delay>
	update();
 8000398:	f000 fca8 	bl	8000cec <update>
	update_lcd();
 800039c:	f000 fdfe 	bl	8000f9c <update_lcd>
	////////////////////////////////debug///////////////////
	//	HAL_UART_Transmit(&huart1, cmd_check_mqtt, strlen((const char *)cmd_check_mqtt), 1000);

	////////////////////////////////debug///////////////////
	while (flag_pass_input == 0) {
 80003a0:	e020      	b.n	80003e4 <send_data_to_server+0xc4>
		HAL_Delay(500);
 80003a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a6:	f004 fccd 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 80003aa:	4b62      	ldr	r3, [pc, #392]	; (8000534 <send_data_to_server+0x214>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	3301      	adds	r3, #1
 80003b0:	4a60      	ldr	r2, [pc, #384]	; (8000534 <send_data_to_server+0x214>)
 80003b2:	6013      	str	r3, [r2, #0]
		if (count_err >= 10) {
 80003b4:	4b5b      	ldr	r3, [pc, #364]	; (8000524 <send_data_to_server+0x204>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b09      	cmp	r3, #9
 80003ba:	dd05      	ble.n	80003c8 <send_data_to_server+0xa8>
			count_err = 0;
 80003bc:	4b59      	ldr	r3, [pc, #356]	; (8000524 <send_data_to_server+0x204>)
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
			init_sim();
 80003c2:	f000 fa59 	bl	8000878 <init_sim>
			goto UART6;
 80003c6:	e7c0      	b.n	800034a <send_data_to_server+0x2a>
		}
		if (count_again_trans >= 10) {
 80003c8:	4b5a      	ldr	r3, [pc, #360]	; (8000534 <send_data_to_server+0x214>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b09      	cmp	r3, #9
 80003ce:	dd09      	ble.n	80003e4 <send_data_to_server+0xc4>
			count_err++;
 80003d0:	4b54      	ldr	r3, [pc, #336]	; (8000524 <send_data_to_server+0x204>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	3301      	adds	r3, #1
 80003d6:	4a53      	ldr	r2, [pc, #332]	; (8000524 <send_data_to_server+0x204>)
 80003d8:	6013      	str	r3, [r2, #0]
			//			unsub_topic();
			//			init_sim();
			update();
 80003da:	f000 fc87 	bl	8000cec <update>
			update_lcd();
 80003de:	f000 fddd 	bl	8000f9c <update_lcd>
			goto UART6;
 80003e2:	e7b2      	b.n	800034a <send_data_to_server+0x2a>
	while (flag_pass_input == 0) {
 80003e4:	4b50      	ldr	r3, [pc, #320]	; (8000528 <send_data_to_server+0x208>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d0da      	beq.n	80003a2 <send_data_to_server+0x82>
		}
	}
	flag_pass_input = 0;
 80003ec:	4b4e      	ldr	r3, [pc, #312]	; (8000528 <send_data_to_server+0x208>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 80003f2:	4b50      	ldr	r3, [pc, #320]	; (8000534 <send_data_to_server+0x214>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]

BUFFER6:
	err = check_buffer_RX();
 80003f8:	f7ff ff36 	bl	8000268 <check_buffer_RX>
 80003fc:	6278      	str	r0, [r7, #36]	; 0x24
	if (err) {
 80003fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000400:	2b00      	cmp	r3, #0
 8000402:	d004      	beq.n	800040e <send_data_to_server+0xee>
		HAL_Delay(300);
 8000404:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000408:	f004 fc9c 	bl	8004d44 <HAL_Delay>
		goto BUFFER6;
 800040c:	e7f4      	b.n	80003f8 <send_data_to_server+0xd8>
	}
	HAL_UART_Transmit(&huart1, data_SIM6, strlen((const char *)data_SIM6), 3000);
 800040e:	484d      	ldr	r0, [pc, #308]	; (8000544 <send_data_to_server+0x224>)
 8000410:	f7ff fea6 	bl	8000160 <strlen>
 8000414:	4603      	mov	r3, r0
 8000416:	b29a      	uxth	r2, r3
 8000418:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800041c:	4949      	ldr	r1, [pc, #292]	; (8000544 <send_data_to_server+0x224>)
 800041e:	4848      	ldr	r0, [pc, #288]	; (8000540 <send_data_to_server+0x220>)
 8000420:	f007 fd70 	bl	8007f04 <HAL_UART_Transmit>
	while (flag_pass == 0) {
 8000424:	e020      	b.n	8000468 <send_data_to_server+0x148>
		HAL_Delay(500);
 8000426:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800042a:	f004 fc8b 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 800042e:	4b41      	ldr	r3, [pc, #260]	; (8000534 <send_data_to_server+0x214>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	4a3f      	ldr	r2, [pc, #252]	; (8000534 <send_data_to_server+0x214>)
 8000436:	6013      	str	r3, [r2, #0]
		if (count_err >= 10) {
 8000438:	4b3a      	ldr	r3, [pc, #232]	; (8000524 <send_data_to_server+0x204>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b09      	cmp	r3, #9
 800043e:	dd05      	ble.n	800044c <send_data_to_server+0x12c>
			count_err = 0;
 8000440:	4b38      	ldr	r3, [pc, #224]	; (8000524 <send_data_to_server+0x204>)
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
			init_sim();
 8000446:	f000 fa17 	bl	8000878 <init_sim>
			goto UART6;
 800044a:	e77e      	b.n	800034a <send_data_to_server+0x2a>
		}
		if (count_again_trans >= 10) {
 800044c:	4b39      	ldr	r3, [pc, #228]	; (8000534 <send_data_to_server+0x214>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b09      	cmp	r3, #9
 8000452:	dd09      	ble.n	8000468 <send_data_to_server+0x148>
			count_err++;
 8000454:	4b33      	ldr	r3, [pc, #204]	; (8000524 <send_data_to_server+0x204>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	3301      	adds	r3, #1
 800045a:	4a32      	ldr	r2, [pc, #200]	; (8000524 <send_data_to_server+0x204>)
 800045c:	6013      	str	r3, [r2, #0]
			update();
 800045e:	f000 fc45 	bl	8000cec <update>
			update_lcd();
 8000462:	f000 fd9b 	bl	8000f9c <update_lcd>
			goto UART6;
 8000466:	e770      	b.n	800034a <send_data_to_server+0x2a>
	while (flag_pass == 0) {
 8000468:	4b31      	ldr	r3, [pc, #196]	; (8000530 <send_data_to_server+0x210>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0da      	beq.n	8000426 <send_data_to_server+0x106>
		}
	}


	////////////////////// 5 6//////////////////
	count_err = 0;
 8000470:	4b2c      	ldr	r3, [pc, #176]	; (8000524 <send_data_to_server+0x204>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
UART7:
	FLAG_CHECK_SEND_DATA1 = 1;
 8000476:	4b34      	ldr	r3, [pc, #208]	; (8000548 <send_data_to_server+0x228>)
 8000478:	2201      	movs	r2, #1
 800047a:	601a      	str	r2, [r3, #0]
	flag_pass = 0;
 800047c:	4b2c      	ldr	r3, [pc, #176]	; (8000530 <send_data_to_server+0x210>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 8000482:	4b2c      	ldr	r3, [pc, #176]	; (8000534 <send_data_to_server+0x214>)
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
	leng1 = strlen((const char *)data_SIM7);
 8000488:	4830      	ldr	r0, [pc, #192]	; (800054c <send_data_to_server+0x22c>)
 800048a:	f7ff fe69 	bl	8000160 <strlen>
 800048e:	4603      	mov	r3, r0
 8000490:	461a      	mov	r2, r3
 8000492:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <send_data_to_server+0x230>)
 8000494:	601a      	str	r2, [r3, #0]
	err = check_buffer_RX();
 8000496:	f7ff fee7 	bl	8000268 <check_buffer_RX>
 800049a:	6278      	str	r0, [r7, #36]	; 0x24
	if (err) {
 800049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d004      	beq.n	80004ac <send_data_to_server+0x18c>
		HAL_Delay(300);
 80004a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004a6:	f004 fc4d 	bl	8004d44 <HAL_Delay>
		goto UART7;
 80004aa:	e7e4      	b.n	8000476 <send_data_to_server+0x156>
	}
	HAL_UART_Transmit(&huart1, data_SIM7, strlen((const char *)data_SIM7), 3000);
 80004ac:	4827      	ldr	r0, [pc, #156]	; (800054c <send_data_to_server+0x22c>)
 80004ae:	f7ff fe57 	bl	8000160 <strlen>
 80004b2:	4603      	mov	r3, r0
 80004b4:	b29a      	uxth	r2, r3
 80004b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80004ba:	4924      	ldr	r1, [pc, #144]	; (800054c <send_data_to_server+0x22c>)
 80004bc:	4820      	ldr	r0, [pc, #128]	; (8000540 <send_data_to_server+0x220>)
 80004be:	f007 fd21 	bl	8007f04 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80004c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c6:	f004 fc3d 	bl	8004d44 <HAL_Delay>
	update();
 80004ca:	f000 fc0f 	bl	8000cec <update>
	update_lcd();
 80004ce:	f000 fd65 	bl	8000f9c <update_lcd>
	while (flag_pass_input == 0) {
 80004d2:	e03f      	b.n	8000554 <send_data_to_server+0x234>
		HAL_Delay(500);
 80004d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004d8:	f004 fc34 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <send_data_to_server+0x214>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	4a14      	ldr	r2, [pc, #80]	; (8000534 <send_data_to_server+0x214>)
 80004e4:	6013      	str	r3, [r2, #0]
		if (count_err >= 10) {
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <send_data_to_server+0x204>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b09      	cmp	r3, #9
 80004ec:	dd05      	ble.n	80004fa <send_data_to_server+0x1da>
			count_err = 0;
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <send_data_to_server+0x204>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
			init_sim();
 80004f4:	f000 f9c0 	bl	8000878 <init_sim>
			goto UART6;
 80004f8:	e727      	b.n	800034a <send_data_to_server+0x2a>
		}
		if (count_again_trans >= 10) {
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <send_data_to_server+0x214>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b09      	cmp	r3, #9
 8000500:	dd28      	ble.n	8000554 <send_data_to_server+0x234>
			count_err++;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <send_data_to_server+0x204>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3301      	adds	r3, #1
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <send_data_to_server+0x204>)
 800050a:	6013      	str	r3, [r2, #0]
			update();
 800050c:	f000 fbee 	bl	8000cec <update>
			update_lcd();
 8000510:	f000 fd44 	bl	8000f9c <update_lcd>
			goto UART7;
 8000514:	e7af      	b.n	8000476 <send_data_to_server+0x156>
 8000516:	bf00      	nop
 8000518:	20000bc8 	.word	0x20000bc8
 800051c:	200009e0 	.word	0x200009e0
 8000520:	200009dc 	.word	0x200009dc
 8000524:	20000bd0 	.word	0x20000bd0
 8000528:	20000bd8 	.word	0x20000bd8
 800052c:	20000be4 	.word	0x20000be4
 8000530:	200009c8 	.word	0x200009c8
 8000534:	200009d8 	.word	0x200009d8
 8000538:	200009cc 	.word	0x200009cc
 800053c:	20000110 	.word	0x20000110
 8000540:	20000498 	.word	0x20000498
 8000544:	20000138 	.word	0x20000138
 8000548:	20000bcc 	.word	0x20000bcc
 800054c:	20000160 	.word	0x20000160
 8000550:	20000be0 	.word	0x20000be0
	while (flag_pass_input == 0) {
 8000554:	4b9b      	ldr	r3, [pc, #620]	; (80007c4 <send_data_to_server+0x4a4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0bb      	beq.n	80004d4 <send_data_to_server+0x1b4>
		}
	}
	flag_pass_input = 0;
 800055c:	4b99      	ldr	r3, [pc, #612]	; (80007c4 <send_data_to_server+0x4a4>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 8000562:	4b99      	ldr	r3, [pc, #612]	; (80007c8 <send_data_to_server+0x4a8>)
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
	/////////////////////////////////////////////////////////////
DELAY_SEND_DATA:
	update();
 8000568:	f000 fbc0 	bl	8000cec <update>
	update_lcd();
 800056c:	f000 fd16 	bl	8000f9c <update_lcd>
	a = (led % 2) ;
 8000570:	4b96      	ldr	r3, [pc, #600]	; (80007cc <send_data_to_server+0x4ac>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	bfb8      	it	lt
 800057c:	425b      	neglt	r3, r3
 800057e:	4a94      	ldr	r2, [pc, #592]	; (80007d0 <send_data_to_server+0x4b0>)
 8000580:	6013      	str	r3, [r2, #0]
	b = quat % 2;
 8000582:	4b94      	ldr	r3, [pc, #592]	; (80007d4 <send_data_to_server+0x4b4>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	bfb8      	it	lt
 800058e:	425b      	neglt	r3, r3
 8000590:	4a91      	ldr	r2, [pc, #580]	; (80007d8 <send_data_to_server+0x4b8>)
 8000592:	6013      	str	r3, [r2, #0]
	c = bom % 2;
 8000594:	4b91      	ldr	r3, [pc, #580]	; (80007dc <send_data_to_server+0x4bc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	bfb8      	it	lt
 80005a0:	425b      	neglt	r3, r3
 80005a2:	4a8f      	ldr	r2, [pc, #572]	; (80007e0 <send_data_to_server+0x4c0>)
 80005a4:	6013      	str	r3, [r2, #0]
	d = mode % 2;
 80005a6:	4b8f      	ldr	r3, [pc, #572]	; (80007e4 <send_data_to_server+0x4c4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	bfb8      	it	lt
 80005b2:	425b      	neglt	r3, r3
 80005b4:	4a8c      	ldr	r2, [pc, #560]	; (80007e8 <send_data_to_server+0x4c8>)
 80005b6:	6013      	str	r3, [r2, #0]
	int check_led = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80005b8:	2110      	movs	r1, #16
 80005ba:	488c      	ldr	r0, [pc, #560]	; (80007ec <send_data_to_server+0x4cc>)
 80005bc:	f005 fe34 	bl	8006228 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	bf0c      	ite	eq
 80005c6:	2301      	moveq	r3, #1
 80005c8:	2300      	movne	r3, #0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	623b      	str	r3, [r7, #32]
	int check_quat = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	4886      	ldr	r0, [pc, #536]	; (80007ec <send_data_to_server+0x4cc>)
 80005d4:	f005 fe28 	bl	8006228 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	61fb      	str	r3, [r7, #28]
	int check_bom = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80005dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e0:	4882      	ldr	r0, [pc, #520]	; (80007ec <send_data_to_server+0x4cc>)
 80005e2:	f005 fe21 	bl	8006228 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	61bb      	str	r3, [r7, #24]
	int data_dht11_0 = limit_two_digit(data_dht11[0]);
 80005ea:	4b81      	ldr	r3, [pc, #516]	; (80007f0 <send_data_to_server+0x4d0>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fe1e 	bl	8000230 <limit_two_digit>
 80005f4:	6178      	str	r0, [r7, #20]
	int data_dht11_1 = limit_two_digit(data_dht11[1]);
 80005f6:	4b7e      	ldr	r3, [pc, #504]	; (80007f0 <send_data_to_server+0x4d0>)
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fe18 	bl	8000230 <limit_two_digit>
 8000600:	6138      	str	r0, [r7, #16]
	int data_dht11_2 = limit_two_digit(data_dht11[2]);
 8000602:	4b7b      	ldr	r3, [pc, #492]	; (80007f0 <send_data_to_server+0x4d0>)
 8000604:	789b      	ldrb	r3, [r3, #2]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fe12 	bl	8000230 <limit_two_digit>
 800060c:	60f8      	str	r0, [r7, #12]
	int data_dht11_3 = limit_two_digit(data_dht11[3]);
 800060e:	4b78      	ldr	r3, [pc, #480]	; (80007f0 <send_data_to_server+0x4d0>)
 8000610:	78db      	ldrb	r3, [r3, #3]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fe0c 	bl	8000230 <limit_two_digit>
 8000618:	60b8      	str	r0, [r7, #8]
	sprintf((char *)message_gui_server, "%02d.%02d %02d.%02d %04d %04d %04d %04d %02d %d %d %d %d %d %d %d ", data_dht11_2, data_dht11_3, data_dht11_0, data_dht11_1, adc_quang_tro,
 800061a:	4b76      	ldr	r3, [pc, #472]	; (80007f4 <send_data_to_server+0x4d4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a76      	ldr	r2, [pc, #472]	; (80007f8 <send_data_to_server+0x4d8>)
 8000620:	6812      	ldr	r2, [r2, #0]
 8000622:	4976      	ldr	r1, [pc, #472]	; (80007fc <send_data_to_server+0x4dc>)
 8000624:	6809      	ldr	r1, [r1, #0]
 8000626:	4876      	ldr	r0, [pc, #472]	; (8000800 <send_data_to_server+0x4e0>)
 8000628:	6800      	ldr	r0, [r0, #0]
 800062a:	4c76      	ldr	r4, [pc, #472]	; (8000804 <send_data_to_server+0x4e4>)
 800062c:	6824      	ldr	r4, [r4, #0]
 800062e:	4d68      	ldr	r5, [pc, #416]	; (80007d0 <send_data_to_server+0x4b0>)
 8000630:	682d      	ldr	r5, [r5, #0]
 8000632:	4e69      	ldr	r6, [pc, #420]	; (80007d8 <send_data_to_server+0x4b8>)
 8000634:	6836      	ldr	r6, [r6, #0]
 8000636:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80007e0 <send_data_to_server+0x4c0>
 800063a:	f8dc c000 	ldr.w	ip, [ip]
 800063e:	f8c7 c004 	str.w	ip, [r7, #4]
 8000642:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80007e8 <send_data_to_server+0x4c8>
 8000646:	f8de e000 	ldr.w	lr, [lr]
 800064a:	f8c7 e000 	str.w	lr, [r7]
 800064e:	f8d7 c018 	ldr.w	ip, [r7, #24]
 8000652:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8000656:	f8d7 c01c 	ldr.w	ip, [r7, #28]
 800065a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 800065e:	f8d7 c020 	ldr.w	ip, [r7, #32]
 8000662:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8000666:	f8d7 e000 	ldr.w	lr, [r7]
 800066a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800066e:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8000672:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8000676:	9608      	str	r6, [sp, #32]
 8000678:	9507      	str	r5, [sp, #28]
 800067a:	9406      	str	r4, [sp, #24]
 800067c:	9005      	str	r0, [sp, #20]
 800067e:	9104      	str	r1, [sp, #16]
 8000680:	9203      	str	r2, [sp, #12]
 8000682:	9302      	str	r3, [sp, #8]
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	495d      	ldr	r1, [pc, #372]	; (8000808 <send_data_to_server+0x4e8>)
 8000692:	485e      	ldr	r0, [pc, #376]	; (800080c <send_data_to_server+0x4ec>)
 8000694:	f008 fe38 	bl	8009308 <siprintf>
	    adc_do_am_dat, nguong_adc_quang_tro, nguong_adc_do_am_dat, nguong_nhiet_do, a, b, c, d, check_led, check_quat, check_bom);
	//////////////////////////////////////////////////////////////////////
	leng = strlen((const char *)message_gui_server);
 8000698:	485c      	ldr	r0, [pc, #368]	; (800080c <send_data_to_server+0x4ec>)
 800069a:	f7ff fd61 	bl	8000160 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b5b      	ldr	r3, [pc, #364]	; (8000810 <send_data_to_server+0x4f0>)
 80006a4:	601a      	str	r2, [r3, #0]
	err = check_buffer_RX();
 80006a6:	f7ff fddf 	bl	8000268 <check_buffer_RX>
 80006aa:	6278      	str	r0, [r7, #36]	; 0x24
	if (err) {
 80006ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d004      	beq.n	80006bc <send_data_to_server+0x39c>
		HAL_Delay(300);
 80006b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006b6:	f004 fb45 	bl	8004d44 <HAL_Delay>
		goto DELAY_SEND_DATA;
 80006ba:	e755      	b.n	8000568 <send_data_to_server+0x248>
	}
	HAL_UART_Transmit(&huart1, message_gui_server, leng, 3000);
 80006bc:	4b54      	ldr	r3, [pc, #336]	; (8000810 <send_data_to_server+0x4f0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006c6:	4951      	ldr	r1, [pc, #324]	; (800080c <send_data_to_server+0x4ec>)
 80006c8:	4852      	ldr	r0, [pc, #328]	; (8000814 <send_data_to_server+0x4f4>)
 80006ca:	f007 fc1b 	bl	8007f04 <HAL_UART_Transmit>
	while (flag_pass == 0) {
 80006ce:	e01d      	b.n	800070c <send_data_to_server+0x3ec>
		HAL_Delay(500);
 80006d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d4:	f004 fb36 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 80006d8:	4b3b      	ldr	r3, [pc, #236]	; (80007c8 <send_data_to_server+0x4a8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	4a3a      	ldr	r2, [pc, #232]	; (80007c8 <send_data_to_server+0x4a8>)
 80006e0:	6013      	str	r3, [r2, #0]
		if (count_err >= 10) {
 80006e2:	4b4d      	ldr	r3, [pc, #308]	; (8000818 <send_data_to_server+0x4f8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b09      	cmp	r3, #9
 80006e8:	dd02      	ble.n	80006f0 <send_data_to_server+0x3d0>
			init_sim();
 80006ea:	f000 f8c5 	bl	8000878 <init_sim>
			goto UART6;
 80006ee:	e62c      	b.n	800034a <send_data_to_server+0x2a>
		}
		if (count_again_trans >= 10) {
 80006f0:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <send_data_to_server+0x4a8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b09      	cmp	r3, #9
 80006f6:	dd09      	ble.n	800070c <send_data_to_server+0x3ec>
			//			unsub_topic();
			count_err++;
 80006f8:	4b47      	ldr	r3, [pc, #284]	; (8000818 <send_data_to_server+0x4f8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a46      	ldr	r2, [pc, #280]	; (8000818 <send_data_to_server+0x4f8>)
 8000700:	6013      	str	r3, [r2, #0]
			update();
 8000702:	f000 faf3 	bl	8000cec <update>
			update_lcd();
 8000706:	f000 fc49 	bl	8000f9c <update_lcd>
			goto UART6;
 800070a:	e61e      	b.n	800034a <send_data_to_server+0x2a>
	while (flag_pass == 0) {
 800070c:	4b43      	ldr	r3, [pc, #268]	; (800081c <send_data_to_server+0x4fc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0dd      	beq.n	80006d0 <send_data_to_server+0x3b0>
		}
	}
	FLAG_CHECK_SEND_DATA1 = 0;
 8000714:	4b42      	ldr	r3, [pc, #264]	; (8000820 <send_data_to_server+0x500>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]

	//	  //////////////////// 7 8//////////////////////////////
	//
	update();
 800071a:	f000 fae7 	bl	8000cec <update>
	update_lcd();
 800071e:	f000 fc3d 	bl	8000f9c <update_lcd>
	count_err = 0;
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <send_data_to_server+0x4f8>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
UART9:
	flag_pass = 0;
 8000728:	4b3c      	ldr	r3, [pc, #240]	; (800081c <send_data_to_server+0x4fc>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <send_data_to_server+0x4a8>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
	if (data_avail_mqtt) {
 8000734:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <send_data_to_server+0x504>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <send_data_to_server+0x424>
		data_avail_mqtt = 0;
 800073c:	4b39      	ldr	r3, [pc, #228]	; (8000824 <send_data_to_server+0x504>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
		goto UART6;
 8000742:	e602      	b.n	800034a <send_data_to_server+0x2a>
	}
	//	if (count_err >= 10)
	//		reconnect_mqtt();
	update();
 8000744:	f000 fad2 	bl	8000cec <update>
	update_lcd();
 8000748:	f000 fc28 	bl	8000f9c <update_lcd>
	err = check_buffer_RX();
 800074c:	f7ff fd8c 	bl	8000268 <check_buffer_RX>
 8000750:	6278      	str	r0, [r7, #36]	; 0x24
	if (err) {
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	2b00      	cmp	r3, #0
 8000756:	d004      	beq.n	8000762 <send_data_to_server+0x442>
		HAL_Delay(300);
 8000758:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800075c:	f004 faf2 	bl	8004d44 <HAL_Delay>
		goto UART9;
 8000760:	e7e2      	b.n	8000728 <send_data_to_server+0x408>
	}
	HAL_UART_Transmit(&huart1, data_SIM9, strlen((const char *)data_SIM9), 3000);
 8000762:	4831      	ldr	r0, [pc, #196]	; (8000828 <send_data_to_server+0x508>)
 8000764:	f7ff fcfc 	bl	8000160 <strlen>
 8000768:	4603      	mov	r3, r0
 800076a:	b29a      	uxth	r2, r3
 800076c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000770:	492d      	ldr	r1, [pc, #180]	; (8000828 <send_data_to_server+0x508>)
 8000772:	4828      	ldr	r0, [pc, #160]	; (8000814 <send_data_to_server+0x4f4>)
 8000774:	f007 fbc6 	bl	8007f04 <HAL_UART_Transmit>
	flag_k_cho_phep_nhan = 1;
 8000778:	4b2c      	ldr	r3, [pc, #176]	; (800082c <send_data_to_server+0x50c>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
	while (flag_pass == 0) {
 800077e:	e057      	b.n	8000830 <send_data_to_server+0x510>
		HAL_Delay(500);
 8000780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000784:	f004 fade 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <send_data_to_server+0x4a8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <send_data_to_server+0x4a8>)
 8000790:	6013      	str	r3, [r2, #0]
		//		if (data_avail_mqtt) {
		//			data_avail_mqtt=0;
		//			//			  unsub_topic();
		//			goto UART6;
		//		}
		if (count_err >= 10) {
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <send_data_to_server+0x4f8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b09      	cmp	r3, #9
 8000798:	dd05      	ble.n	80007a6 <send_data_to_server+0x486>
			count_err = 0;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <send_data_to_server+0x4f8>)
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
			init_sim();
 80007a0:	f000 f86a 	bl	8000878 <init_sim>
			goto UART6;
 80007a4:	e5d1      	b.n	800034a <send_data_to_server+0x2a>
		}
		if (count_again_trans >= 15) {
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <send_data_to_server+0x4a8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b0e      	cmp	r3, #14
 80007ac:	dd40      	ble.n	8000830 <send_data_to_server+0x510>
			count_err++;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <send_data_to_server+0x4f8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	4a18      	ldr	r2, [pc, #96]	; (8000818 <send_data_to_server+0x4f8>)
 80007b6:	6013      	str	r3, [r2, #0]
			update();
 80007b8:	f000 fa98 	bl	8000cec <update>
			update_lcd();
 80007bc:	f000 fbee 	bl	8000f9c <update_lcd>
			goto UART9;
 80007c0:	e7b2      	b.n	8000728 <send_data_to_server+0x408>
 80007c2:	bf00      	nop
 80007c4:	20000bd8 	.word	0x20000bd8
 80007c8:	200009d8 	.word	0x200009d8
 80007cc:	200009ec 	.word	0x200009ec
 80007d0:	20000a34 	.word	0x20000a34
 80007d4:	200009f0 	.word	0x200009f0
 80007d8:	20000a38 	.word	0x20000a38
 80007dc:	200009f4 	.word	0x200009f4
 80007e0:	20000a3c 	.word	0x20000a3c
 80007e4:	20000220 	.word	0x20000220
 80007e8:	20000a40 	.word	0x20000a40
 80007ec:	40010c00 	.word	0x40010c00
 80007f0:	20000ab4 	.word	0x20000ab4
 80007f4:	20000af0 	.word	0x20000af0
 80007f8:	20000af4 	.word	0x20000af4
 80007fc:	20000214 	.word	0x20000214
 8000800:	20000218 	.word	0x20000218
 8000804:	2000021c 	.word	0x2000021c
 8000808:	0800a678 	.word	0x0800a678
 800080c:	20000b04 	.word	0x20000b04
 8000810:	20000bdc 	.word	0x20000bdc
 8000814:	20000498 	.word	0x20000498
 8000818:	20000bd0 	.word	0x20000bd0
 800081c:	200009c8 	.word	0x200009c8
 8000820:	20000bcc 	.word	0x20000bcc
 8000824:	20000be4 	.word	0x20000be4
 8000828:	20000188 	.word	0x20000188
 800082c:	20000bd4 	.word	0x20000bd4
	while (flag_pass == 0) {
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <send_data_to_server+0x540>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0a3      	beq.n	8000780 <send_data_to_server+0x460>
		}
	}
	flag_k_cho_phep_nhan = 0;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <send_data_to_server+0x544>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
	count_err = 0;
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <send_data_to_server+0x548>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
	flag_check_RX_PAYLOAD = 1;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <send_data_to_server+0x54c>)
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
	flag_check_OK = 0;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <send_data_to_server+0x550>)
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
	FLAG_CHECK_SEND_DATA = 0;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <send_data_to_server+0x554>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	372c      	adds	r7, #44	; 0x2c
 800085a:	46bd      	mov	sp, r7
 800085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085e:	bf00      	nop
 8000860:	200009c8 	.word	0x200009c8
 8000864:	20000bd4 	.word	0x20000bd4
 8000868:	20000bd0 	.word	0x20000bd0
 800086c:	200009e0 	.word	0x200009e0
 8000870:	200009dc 	.word	0x200009dc
 8000874:	20000bc8 	.word	0x20000bc8

08000878 <init_sim>:
		}
	}
}

void init_sim(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
	flag_check_RX_PAYLOAD = 0;
 800087e:	4b9b      	ldr	r3, [pc, #620]	; (8000aec <init_sim+0x274>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
	flag_check_OK = 1;
 8000884:	4b9a      	ldr	r3, [pc, #616]	; (8000af0 <init_sim+0x278>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
	int err = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]

//	  flag_pass = 0;
UART_SIM_RESET:
	flag_pass = 0;
 800088e:	4b99      	ldr	r3, [pc, #612]	; (8000af4 <init_sim+0x27c>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 8000894:	4b98      	ldr	r3, [pc, #608]	; (8000af8 <init_sim+0x280>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
	err = check_buffer_RX();
 800089a:	f7ff fce5 	bl	8000268 <check_buffer_RX>
 800089e:	6078      	str	r0, [r7, #4]
	if (err) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d004      	beq.n	80008b0 <init_sim+0x38>
		HAL_Delay(1000);
 80008a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008aa:	f004 fa4b 	bl	8004d44 <HAL_Delay>
		goto UART_SIM_RESET;
 80008ae:	e7ee      	b.n	800088e <init_sim+0x16>
	}
	HAL_UART_Transmit(&huart1, data_SIM_RESET, strlen((const char *)data_SIM_RESET), 3000);
 80008b0:	4892      	ldr	r0, [pc, #584]	; (8000afc <init_sim+0x284>)
 80008b2:	f7ff fc55 	bl	8000160 <strlen>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008be:	498f      	ldr	r1, [pc, #572]	; (8000afc <init_sim+0x284>)
 80008c0:	488f      	ldr	r0, [pc, #572]	; (8000b00 <init_sim+0x288>)
 80008c2:	f007 fb1f 	bl	8007f04 <HAL_UART_Transmit>
	while (flag_pass == 0) {
 80008c6:	e011      	b.n	80008ec <init_sim+0x74>
		HAL_Delay(500);
 80008c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008cc:	f004 fa3a 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 80008d0:	4b89      	ldr	r3, [pc, #548]	; (8000af8 <init_sim+0x280>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a88      	ldr	r2, [pc, #544]	; (8000af8 <init_sim+0x280>)
 80008d8:	6013      	str	r3, [r2, #0]
		if (flag_pass == 1) {
 80008da:	4b86      	ldr	r3, [pc, #536]	; (8000af4 <init_sim+0x27c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d009      	beq.n	80008f6 <init_sim+0x7e>
			break;
		}
		if (count_again_trans >= 10) {
 80008e2:	4b85      	ldr	r3, [pc, #532]	; (8000af8 <init_sim+0x280>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b09      	cmp	r3, #9
 80008e8:	dd00      	ble.n	80008ec <init_sim+0x74>
			goto UART_SIM_RESET;
 80008ea:	e7d0      	b.n	800088e <init_sim+0x16>
	while (flag_pass == 0) {
 80008ec:	4b81      	ldr	r3, [pc, #516]	; (8000af4 <init_sim+0x27c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0e9      	beq.n	80008c8 <init_sim+0x50>
 80008f4:	e000      	b.n	80008f8 <init_sim+0x80>
			break;
 80008f6:	bf00      	nop
		}
	}
	HAL_Delay(13000);
 80008f8:	f243 20c8 	movw	r0, #13000	; 0x32c8
 80008fc:	f004 fa22 	bl	8004d44 <HAL_Delay>
UART_SIM_TEST:
	flag_pass = 0;
 8000900:	4b7c      	ldr	r3, [pc, #496]	; (8000af4 <init_sim+0x27c>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 8000906:	4b7c      	ldr	r3, [pc, #496]	; (8000af8 <init_sim+0x280>)
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
	err = check_buffer_RX();
 800090c:	f7ff fcac 	bl	8000268 <check_buffer_RX>
 8000910:	6078      	str	r0, [r7, #4]
	if (err) {
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d004      	beq.n	8000922 <init_sim+0xaa>
		HAL_Delay(1000);
 8000918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091c:	f004 fa12 	bl	8004d44 <HAL_Delay>
		goto UART_SIM_TEST;
 8000920:	e7ee      	b.n	8000900 <init_sim+0x88>
	}
	HAL_UART_Transmit(&huart1, data_SIM_TEST, strlen((const char *)data_SIM_TEST), 3000);
 8000922:	4878      	ldr	r0, [pc, #480]	; (8000b04 <init_sim+0x28c>)
 8000924:	f7ff fc1c 	bl	8000160 <strlen>
 8000928:	4603      	mov	r3, r0
 800092a:	b29a      	uxth	r2, r3
 800092c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000930:	4974      	ldr	r1, [pc, #464]	; (8000b04 <init_sim+0x28c>)
 8000932:	4873      	ldr	r0, [pc, #460]	; (8000b00 <init_sim+0x288>)
 8000934:	f007 fae6 	bl	8007f04 <HAL_UART_Transmit>
	while (flag_pass == 0) {
 8000938:	e011      	b.n	800095e <init_sim+0xe6>
		HAL_Delay(500);
 800093a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800093e:	f004 fa01 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 8000942:	4b6d      	ldr	r3, [pc, #436]	; (8000af8 <init_sim+0x280>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	4a6b      	ldr	r2, [pc, #428]	; (8000af8 <init_sim+0x280>)
 800094a:	6013      	str	r3, [r2, #0]
		if (flag_pass == 1) {
 800094c:	4b69      	ldr	r3, [pc, #420]	; (8000af4 <init_sim+0x27c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d009      	beq.n	8000968 <init_sim+0xf0>
			break;
		}
		if (count_again_trans >= 10) {
 8000954:	4b68      	ldr	r3, [pc, #416]	; (8000af8 <init_sim+0x280>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b09      	cmp	r3, #9
 800095a:	dd00      	ble.n	800095e <init_sim+0xe6>
			goto UART_SIM_TEST;
 800095c:	e7d0      	b.n	8000900 <init_sim+0x88>
	while (flag_pass == 0) {
 800095e:	4b65      	ldr	r3, [pc, #404]	; (8000af4 <init_sim+0x27c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0e9      	beq.n	800093a <init_sim+0xc2>
 8000966:	e000      	b.n	800096a <init_sim+0xf2>
			break;
 8000968:	bf00      	nop
		}
	}
	  HAL_Delay(10000);
 800096a:	f242 7010 	movw	r0, #10000	; 0x2710
 800096e:	f004 f9e9 	bl	8004d44 <HAL_Delay>
 UART0:
	flag_pass = 0;
 8000972:	4b60      	ldr	r3, [pc, #384]	; (8000af4 <init_sim+0x27c>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 8000978:	4b5f      	ldr	r3, [pc, #380]	; (8000af8 <init_sim+0x280>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
	err = check_buffer_RX();
 800097e:	f7ff fc73 	bl	8000268 <check_buffer_RX>
 8000982:	6078      	str	r0, [r7, #4]
	if (err) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d004      	beq.n	8000994 <init_sim+0x11c>
		HAL_Delay(1000);
 800098a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800098e:	f004 f9d9 	bl	8004d44 <HAL_Delay>
		goto UART0;
 8000992:	e7ee      	b.n	8000972 <init_sim+0xfa>
	}
	HAL_UART_Transmit(&huart1, data_SIM0, strlen((const char *)data_SIM0), 1000);
 8000994:	485c      	ldr	r0, [pc, #368]	; (8000b08 <init_sim+0x290>)
 8000996:	f7ff fbe3 	bl	8000160 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	b29a      	uxth	r2, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	4959      	ldr	r1, [pc, #356]	; (8000b08 <init_sim+0x290>)
 80009a4:	4856      	ldr	r0, [pc, #344]	; (8000b00 <init_sim+0x288>)
 80009a6:	f007 faad 	bl	8007f04 <HAL_UART_Transmit>
	while (flag_pass == 0) {
 80009aa:	e011      	b.n	80009d0 <init_sim+0x158>
		HAL_Delay(500);
 80009ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b0:	f004 f9c8 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 80009b4:	4b50      	ldr	r3, [pc, #320]	; (8000af8 <init_sim+0x280>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	4a4f      	ldr	r2, [pc, #316]	; (8000af8 <init_sim+0x280>)
 80009bc:	6013      	str	r3, [r2, #0]
		if (flag_pass == 1) {
 80009be:	4b4d      	ldr	r3, [pc, #308]	; (8000af4 <init_sim+0x27c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d009      	beq.n	80009da <init_sim+0x162>
			break;
		}
		if (count_again_trans >= 10) {
 80009c6:	4b4c      	ldr	r3, [pc, #304]	; (8000af8 <init_sim+0x280>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b09      	cmp	r3, #9
 80009cc:	dd00      	ble.n	80009d0 <init_sim+0x158>
			goto UART0;
 80009ce:	e7d0      	b.n	8000972 <init_sim+0xfa>
	while (flag_pass == 0) {
 80009d0:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <init_sim+0x27c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d0e9      	beq.n	80009ac <init_sim+0x134>
		}
	}
///////////////////////////////////////////////////////////////////
UART1:
 80009d8:	e000      	b.n	80009dc <init_sim+0x164>
			break;
 80009da:	bf00      	nop
	flag_pass = 0;
 80009dc:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <init_sim+0x27c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 80009e2:	4b45      	ldr	r3, [pc, #276]	; (8000af8 <init_sim+0x280>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
	err = check_buffer_RX();
 80009e8:	f7ff fc3e 	bl	8000268 <check_buffer_RX>
 80009ec:	6078      	str	r0, [r7, #4]
	if (err) {
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <init_sim+0x186>
		HAL_Delay(1000);
 80009f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f8:	f004 f9a4 	bl	8004d44 <HAL_Delay>
		goto UART1;
 80009fc:	e7ee      	b.n	80009dc <init_sim+0x164>
	}
	HAL_UART_Transmit(&huart1, data_SIM1, strlen((const char *)data_SIM1), 3000);
 80009fe:	4843      	ldr	r0, [pc, #268]	; (8000b0c <init_sim+0x294>)
 8000a00:	f7ff fbae 	bl	8000160 <strlen>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a0c:	493f      	ldr	r1, [pc, #252]	; (8000b0c <init_sim+0x294>)
 8000a0e:	483c      	ldr	r0, [pc, #240]	; (8000b00 <init_sim+0x288>)
 8000a10:	f007 fa78 	bl	8007f04 <HAL_UART_Transmit>
	while (flag_pass == 0) {
 8000a14:	e011      	b.n	8000a3a <init_sim+0x1c2>
		HAL_Delay(500);
 8000a16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a1a:	f004 f993 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 8000a1e:	4b36      	ldr	r3, [pc, #216]	; (8000af8 <init_sim+0x280>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a34      	ldr	r2, [pc, #208]	; (8000af8 <init_sim+0x280>)
 8000a26:	6013      	str	r3, [r2, #0]
		if (flag_pass == 1) {
 8000a28:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <init_sim+0x27c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d009      	beq.n	8000a44 <init_sim+0x1cc>
			break;
		}
		if (count_again_trans >= 10) {
 8000a30:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <init_sim+0x280>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b09      	cmp	r3, #9
 8000a36:	dd00      	ble.n	8000a3a <init_sim+0x1c2>
			goto UART1;
 8000a38:	e7d0      	b.n	80009dc <init_sim+0x164>
	while (flag_pass == 0) {
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <init_sim+0x27c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0e9      	beq.n	8000a16 <init_sim+0x19e>
		}
	}
////////////////////////////////////////////1//////////////////
UART2:
 8000a42:	e000      	b.n	8000a46 <init_sim+0x1ce>
			break;
 8000a44:	bf00      	nop
	flag_pass = 0;
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <init_sim+0x27c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <init_sim+0x280>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
	err = check_buffer_RX();
 8000a52:	f7ff fc09 	bl	8000268 <check_buffer_RX>
 8000a56:	6078      	str	r0, [r7, #4]
	if (err) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d004      	beq.n	8000a68 <init_sim+0x1f0>
		HAL_Delay(1000);
 8000a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a62:	f004 f96f 	bl	8004d44 <HAL_Delay>
		goto UART2;
 8000a66:	e7ee      	b.n	8000a46 <init_sim+0x1ce>
	}
	HAL_UART_Transmit(&huart1, data_SIM2, strlen((const char *)data_SIM2), 3000);
 8000a68:	4829      	ldr	r0, [pc, #164]	; (8000b10 <init_sim+0x298>)
 8000a6a:	f7ff fb79 	bl	8000160 <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a76:	4926      	ldr	r1, [pc, #152]	; (8000b10 <init_sim+0x298>)
 8000a78:	4821      	ldr	r0, [pc, #132]	; (8000b00 <init_sim+0x288>)
 8000a7a:	f007 fa43 	bl	8007f04 <HAL_UART_Transmit>
	while (flag_pass == 0) {
 8000a7e:	e011      	b.n	8000aa4 <init_sim+0x22c>
		HAL_Delay(500);
 8000a80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a84:	f004 f95e 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <init_sim+0x280>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <init_sim+0x280>)
 8000a90:	6013      	str	r3, [r2, #0]
		if (flag_pass == 1) {
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <init_sim+0x27c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d009      	beq.n	8000aae <init_sim+0x236>
			break;
		}
		if (count_again_trans >= 10) {
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <init_sim+0x280>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b09      	cmp	r3, #9
 8000aa0:	dd00      	ble.n	8000aa4 <init_sim+0x22c>
			goto UART2;
 8000aa2:	e7d0      	b.n	8000a46 <init_sim+0x1ce>
	while (flag_pass == 0) {
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <init_sim+0x27c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0e9      	beq.n	8000a80 <init_sim+0x208>
		}
	}
	////////////////2///////////////////
UART3:
 8000aac:	e000      	b.n	8000ab0 <init_sim+0x238>
			break;
 8000aae:	bf00      	nop
	flag_pass = 0;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <init_sim+0x27c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <init_sim+0x280>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
	err = check_buffer_RX();
 8000abc:	f7ff fbd4 	bl	8000268 <check_buffer_RX>
 8000ac0:	6078      	str	r0, [r7, #4]
	if (err) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d004      	beq.n	8000ad2 <init_sim+0x25a>
		HAL_Delay(1000);
 8000ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000acc:	f004 f93a 	bl	8004d44 <HAL_Delay>
		goto UART3;
 8000ad0:	e7ee      	b.n	8000ab0 <init_sim+0x238>
	}
	HAL_UART_Transmit(&huart1, data_SIM3, strlen((const char *)data_SIM3), 3000);
 8000ad2:	4810      	ldr	r0, [pc, #64]	; (8000b14 <init_sim+0x29c>)
 8000ad4:	f7ff fb44 	bl	8000160 <strlen>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <init_sim+0x29c>)
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <init_sim+0x288>)
 8000ae4:	f007 fa0e 	bl	8007f04 <HAL_UART_Transmit>
	while (flag_pass == 0) {
 8000ae8:	e028      	b.n	8000b3c <init_sim+0x2c4>
 8000aea:	bf00      	nop
 8000aec:	200009e0 	.word	0x200009e0
 8000af0:	200009dc 	.word	0x200009dc
 8000af4:	200009c8 	.word	0x200009c8
 8000af8:	200009d8 	.word	0x200009d8
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000498 	.word	0x20000498
 8000b04:	20000014 	.word	0x20000014
 8000b08:	20000028 	.word	0x20000028
 8000b0c:	20000050 	.word	0x20000050
 8000b10:	20000078 	.word	0x20000078
 8000b14:	200000a0 	.word	0x200000a0
		HAL_Delay(500);
 8000b18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b1c:	f004 f912 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 8000b20:	4b67      	ldr	r3, [pc, #412]	; (8000cc0 <init_sim+0x448>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	4a66      	ldr	r2, [pc, #408]	; (8000cc0 <init_sim+0x448>)
 8000b28:	6013      	str	r3, [r2, #0]
		if (flag_pass == 1) {
 8000b2a:	4b66      	ldr	r3, [pc, #408]	; (8000cc4 <init_sim+0x44c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d009      	beq.n	8000b46 <init_sim+0x2ce>
			break;
		}
		if (count_again_trans >= 10) {
 8000b32:	4b63      	ldr	r3, [pc, #396]	; (8000cc0 <init_sim+0x448>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b09      	cmp	r3, #9
 8000b38:	dd00      	ble.n	8000b3c <init_sim+0x2c4>
			goto UART3;
 8000b3a:	e7b9      	b.n	8000ab0 <init_sim+0x238>
	while (flag_pass == 0) {
 8000b3c:	4b61      	ldr	r3, [pc, #388]	; (8000cc4 <init_sim+0x44c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0e9      	beq.n	8000b18 <init_sim+0x2a0>
		}
	}
	////////////////////////3/////////////////////
UART4:
 8000b44:	e000      	b.n	8000b48 <init_sim+0x2d0>
			break;
 8000b46:	bf00      	nop
	flag_pass = 0;
 8000b48:	4b5e      	ldr	r3, [pc, #376]	; (8000cc4 <init_sim+0x44c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 8000b4e:	4b5c      	ldr	r3, [pc, #368]	; (8000cc0 <init_sim+0x448>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
	err = check_buffer_RX();
 8000b54:	f7ff fb88 	bl	8000268 <check_buffer_RX>
 8000b58:	6078      	str	r0, [r7, #4]
	if (err) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d004      	beq.n	8000b6a <init_sim+0x2f2>
		HAL_Delay(1000);
 8000b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b64:	f004 f8ee 	bl	8004d44 <HAL_Delay>
		goto UART4;
 8000b68:	e7ee      	b.n	8000b48 <init_sim+0x2d0>
	}
	HAL_UART_Transmit(&huart1, data_SIM4, strlen((const char *)data_SIM4), 3000);  // 60bytes
 8000b6a:	4857      	ldr	r0, [pc, #348]	; (8000cc8 <init_sim+0x450>)
 8000b6c:	f7ff faf8 	bl	8000160 <strlen>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b78:	4953      	ldr	r1, [pc, #332]	; (8000cc8 <init_sim+0x450>)
 8000b7a:	4854      	ldr	r0, [pc, #336]	; (8000ccc <init_sim+0x454>)
 8000b7c:	f007 f9c2 	bl	8007f04 <HAL_UART_Transmit>
	while (flag_pass == 0) {
 8000b80:	e011      	b.n	8000ba6 <init_sim+0x32e>
		HAL_Delay(500);
 8000b82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b86:	f004 f8dd 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 8000b8a:	4b4d      	ldr	r3, [pc, #308]	; (8000cc0 <init_sim+0x448>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4a4b      	ldr	r2, [pc, #300]	; (8000cc0 <init_sim+0x448>)
 8000b92:	6013      	str	r3, [r2, #0]
		if (flag_pass == 1) {
 8000b94:	4b4b      	ldr	r3, [pc, #300]	; (8000cc4 <init_sim+0x44c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d009      	beq.n	8000bb0 <init_sim+0x338>
			break;
		}
		if (count_again_trans >= 10) {
 8000b9c:	4b48      	ldr	r3, [pc, #288]	; (8000cc0 <init_sim+0x448>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b09      	cmp	r3, #9
 8000ba2:	dd00      	ble.n	8000ba6 <init_sim+0x32e>
			goto UART4;
 8000ba4:	e7d0      	b.n	8000b48 <init_sim+0x2d0>
	while (flag_pass == 0) {
 8000ba6:	4b47      	ldr	r3, [pc, #284]	; (8000cc4 <init_sim+0x44c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0e9      	beq.n	8000b82 <init_sim+0x30a>
 8000bae:	e000      	b.n	8000bb2 <init_sim+0x33a>
			break;
 8000bb0:	bf00      	nop
		}
	}
	flag_pass_input = 0;
 8000bb2:	4b47      	ldr	r3, [pc, #284]	; (8000cd0 <init_sim+0x458>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
/////////////////////	  /////////////////////////////////////////////////////////
UART5:
	flag_pass = 0;
 8000bb8:	4b42      	ldr	r3, [pc, #264]	; (8000cc4 <init_sim+0x44c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
	count_again_trans = 0;
 8000bbe:	4b40      	ldr	r3, [pc, #256]	; (8000cc0 <init_sim+0x448>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
	err = check_buffer_RX();
 8000bc4:	f7ff fb50 	bl	8000268 <check_buffer_RX>
 8000bc8:	6078      	str	r0, [r7, #4]
	if (err) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d004      	beq.n	8000bda <init_sim+0x362>
		HAL_Delay(1000);
 8000bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd4:	f004 f8b6 	bl	8004d44 <HAL_Delay>
		goto UART5;
 8000bd8:	e7ee      	b.n	8000bb8 <init_sim+0x340>
	}
	HAL_UART_Transmit(&huart1, data_SIM10, (uint16_t)strlen((const char *)data_SIM10), 3000);
 8000bda:	483e      	ldr	r0, [pc, #248]	; (8000cd4 <init_sim+0x45c>)
 8000bdc:	f7ff fac0 	bl	8000160 <strlen>
 8000be0:	4603      	mov	r3, r0
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000be8:	493a      	ldr	r1, [pc, #232]	; (8000cd4 <init_sim+0x45c>)
 8000bea:	4838      	ldr	r0, [pc, #224]	; (8000ccc <init_sim+0x454>)
 8000bec:	f007 f98a 	bl	8007f04 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000bf0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bf4:	f004 f8a6 	bl	8004d44 <HAL_Delay>
	while (flag_pass_input == 0) {
 8000bf8:	e01c      	b.n	8000c34 <init_sim+0x3bc>
		HAL_Delay(500);
 8000bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfe:	f004 f8a1 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 8000c02:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <init_sim+0x448>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a2d      	ldr	r2, [pc, #180]	; (8000cc0 <init_sim+0x448>)
 8000c0a:	6013      	str	r3, [r2, #0]
		if (count_err >= 10) {
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <init_sim+0x460>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b09      	cmp	r3, #9
 8000c12:	dd05      	ble.n	8000c20 <init_sim+0x3a8>
			count_err = 0;
 8000c14:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <init_sim+0x460>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
			init_sim();
 8000c1a:	f7ff fe2d 	bl	8000878 <init_sim>
			goto UART5;
 8000c1e:	e7cb      	b.n	8000bb8 <init_sim+0x340>
		}
		if (count_again_trans >= 10) {
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <init_sim+0x448>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b09      	cmp	r3, #9
 8000c26:	dd05      	ble.n	8000c34 <init_sim+0x3bc>
			count_err++;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <init_sim+0x460>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	4a2a      	ldr	r2, [pc, #168]	; (8000cd8 <init_sim+0x460>)
 8000c30:	6013      	str	r3, [r2, #0]
			//			unsub_topic();
			goto UART5;
 8000c32:	e7c1      	b.n	8000bb8 <init_sim+0x340>
	while (flag_pass_input == 0) {
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <init_sim+0x458>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0de      	beq.n	8000bfa <init_sim+0x382>
		}
	}
	flag_pass_input = 0;
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <init_sim+0x458>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
BUFFER5:
	err = check_buffer_RX();
 8000c42:	f7ff fb11 	bl	8000268 <check_buffer_RX>
 8000c46:	6078      	str	r0, [r7, #4]
	if (err) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d004      	beq.n	8000c58 <init_sim+0x3e0>
		HAL_Delay(1000);
 8000c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c52:	f004 f877 	bl	8004d44 <HAL_Delay>
		goto BUFFER5;
 8000c56:	e7f4      	b.n	8000c42 <init_sim+0x3ca>
	}
	HAL_UART_Transmit(&huart1, data_SIM11, (uint16_t)strlen((const char *)data_SIM11), 3000);
 8000c58:	4820      	ldr	r0, [pc, #128]	; (8000cdc <init_sim+0x464>)
 8000c5a:	f7ff fa81 	bl	8000160 <strlen>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c66:	491d      	ldr	r1, [pc, #116]	; (8000cdc <init_sim+0x464>)
 8000c68:	4818      	ldr	r0, [pc, #96]	; (8000ccc <init_sim+0x454>)
 8000c6a:	f007 f94b 	bl	8007f04 <HAL_UART_Transmit>
	while (flag_pass == 0) {
 8000c6e:	e011      	b.n	8000c94 <init_sim+0x41c>
		HAL_Delay(500);
 8000c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c74:	f004 f866 	bl	8004d44 <HAL_Delay>
		count_again_trans++;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <init_sim+0x448>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <init_sim+0x448>)
 8000c80:	6013      	str	r3, [r2, #0]
		if (flag_pass == 1) {
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <init_sim+0x44c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d009      	beq.n	8000c9e <init_sim+0x426>
			break;
		}
		if (count_again_trans >= 10) {
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <init_sim+0x448>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b09      	cmp	r3, #9
 8000c90:	dd00      	ble.n	8000c94 <init_sim+0x41c>
			goto UART5;
 8000c92:	e791      	b.n	8000bb8 <init_sim+0x340>
	while (flag_pass == 0) {
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <init_sim+0x44c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0e9      	beq.n	8000c70 <init_sim+0x3f8>
 8000c9c:	e000      	b.n	8000ca0 <init_sim+0x428>
			break;
 8000c9e:	bf00      	nop
	                        count_err++;
	                }
	        }*/
	////////////

	flag_pass_input = 0;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <init_sim+0x458>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
	flag_check_RX_PAYLOAD = 1;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <init_sim+0x468>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
	flag_check_OK = 0;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <init_sim+0x46c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
	flag_pass_all_RX_PAYLOAD = 0;
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <init_sim+0x470>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200009d8 	.word	0x200009d8
 8000cc4:	200009c8 	.word	0x200009c8
 8000cc8:	200000c8 	.word	0x200000c8
 8000ccc:	20000498 	.word	0x20000498
 8000cd0:	20000bd8 	.word	0x20000bd8
 8000cd4:	200001b0 	.word	0x200001b0
 8000cd8:	20000bd0 	.word	0x20000bd0
 8000cdc:	200001d8 	.word	0x200001d8
 8000ce0:	200009e0 	.word	0x200009e0
 8000ce4:	200009dc 	.word	0x200009dc
 8000ce8:	200009e4 	.word	0x200009e4

08000cec <update>:
void update(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
	switch (mode % 2) {
 8000cf2:	4b95      	ldr	r3, [pc, #596]	; (8000f48 <update+0x25c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <update+0x1e>
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d05f      	beq.n	8000dc8 <update+0xdc>
				bom = 0;
			}
			break;
		}
	}
}
 8000d08:	e11a      	b.n	8000f40 <update+0x254>
			flag_disable_nut_nhan = 0;
 8000d0a:	4b90      	ldr	r3, [pc, #576]	; (8000f4c <update+0x260>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
			flag_mode_bang_tay = 1;
 8000d10:	4b8f      	ldr	r3, [pc, #572]	; (8000f50 <update+0x264>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
			flag_mode_tu_dong = 0;
 8000d16:	4b8f      	ldr	r3, [pc, #572]	; (8000f54 <update+0x268>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d22:	488d      	ldr	r0, [pc, #564]	; (8000f58 <update+0x26c>)
 8000d24:	f005 fa97 	bl	8006256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2e:	488a      	ldr	r0, [pc, #552]	; (8000f58 <update+0x26c>)
 8000d30:	f005 fa91 	bl	8006256 <HAL_GPIO_WritePin>
			status_previous_led = led;
 8000d34:	4b89      	ldr	r3, [pc, #548]	; (8000f5c <update+0x270>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a89      	ldr	r2, [pc, #548]	; (8000f60 <update+0x274>)
 8000d3a:	6013      	str	r3, [r2, #0]
			status_previous_quat = quat;
 8000d3c:	4b89      	ldr	r3, [pc, #548]	; (8000f64 <update+0x278>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a89      	ldr	r2, [pc, #548]	; (8000f68 <update+0x27c>)
 8000d42:	6013      	str	r3, [r2, #0]
			status_previous_bom = bom;
 8000d44:	4b89      	ldr	r3, [pc, #548]	; (8000f6c <update+0x280>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a89      	ldr	r2, [pc, #548]	; (8000f70 <update+0x284>)
 8000d4a:	6013      	str	r3, [r2, #0]
			if ((led % 2) == 0) {
 8000d4c:	4b83      	ldr	r3, [pc, #524]	; (8000f5c <update+0x270>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d106      	bne.n	8000d66 <update+0x7a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, HIGH_LOAD);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d5e:	4885      	ldr	r0, [pc, #532]	; (8000f74 <update+0x288>)
 8000d60:	f005 fa79 	bl	8006256 <HAL_GPIO_WritePin>
 8000d64:	e005      	b.n	8000d72 <update+0x86>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LOW_LOAD);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d6c:	4881      	ldr	r0, [pc, #516]	; (8000f74 <update+0x288>)
 8000d6e:	f005 fa72 	bl	8006256 <HAL_GPIO_WritePin>
			if ((quat % 2) == 1) {
 8000d72:	4b7c      	ldr	r3, [pc, #496]	; (8000f64 <update+0x278>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	bfb8      	it	lt
 8000d7e:	425b      	neglt	r3, r3
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d106      	bne.n	8000d92 <update+0xa6>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, HIGH_LOAD);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d8a:	487a      	ldr	r0, [pc, #488]	; (8000f74 <update+0x288>)
 8000d8c:	f005 fa63 	bl	8006256 <HAL_GPIO_WritePin>
 8000d90:	e005      	b.n	8000d9e <update+0xb2>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LOW_LOAD);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	4876      	ldr	r0, [pc, #472]	; (8000f74 <update+0x288>)
 8000d9a:	f005 fa5c 	bl	8006256 <HAL_GPIO_WritePin>
			if ((bom % 2) == 1) {
 8000d9e:	4b73      	ldr	r3, [pc, #460]	; (8000f6c <update+0x280>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	bfb8      	it	lt
 8000daa:	425b      	neglt	r3, r3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d105      	bne.n	8000dbc <update+0xd0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, HIGH_LOAD);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2101      	movs	r1, #1
 8000db4:	486f      	ldr	r0, [pc, #444]	; (8000f74 <update+0x288>)
 8000db6:	f005 fa4e 	bl	8006256 <HAL_GPIO_WritePin>
			break;
 8000dba:	e0c1      	b.n	8000f40 <update+0x254>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, LOW_LOAD);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	486c      	ldr	r0, [pc, #432]	; (8000f74 <update+0x288>)
 8000dc2:	f005 fa48 	bl	8006256 <HAL_GPIO_WritePin>
			break;
 8000dc6:	e0bb      	b.n	8000f40 <update+0x254>
			if (flag_di_qua_nhap_mat_khau == 1) {
 8000dc8:	4b6b      	ldr	r3, [pc, #428]	; (8000f78 <update+0x28c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d103      	bne.n	8000dd8 <update+0xec>
				flag_disable_nut_nhan = 1;
 8000dd0:	4b5e      	ldr	r3, [pc, #376]	; (8000f4c <update+0x260>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e002      	b.n	8000dde <update+0xf2>
				flag_disable_nut_nhan = 0;
 8000dd8:	4b5c      	ldr	r3, [pc, #368]	; (8000f4c <update+0x260>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
			flag_mode_tu_dong = 1;
 8000dde:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <update+0x268>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	601a      	str	r2, [r3, #0]
			flag_mode_bang_tay = 0;
 8000de4:	4b5a      	ldr	r3, [pc, #360]	; (8000f50 <update+0x264>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df0:	4859      	ldr	r0, [pc, #356]	; (8000f58 <update+0x26c>)
 8000df2:	f005 fa30 	bl	8006256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfc:	4856      	ldr	r0, [pc, #344]	; (8000f58 <update+0x26c>)
 8000dfe:	f005 fa2a 	bl	8006256 <HAL_GPIO_WritePin>
			int check_status_pre = ((status_previous_led % 2) != (led % 2)) || ((status_previous_quat % 2) != (quat % 2)) || ((status_previous_bom % 2) != (bom % 2));
 8000e02:	4b57      	ldr	r3, [pc, #348]	; (8000f60 <update+0x274>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	bfb8      	it	lt
 8000e0e:	425b      	neglt	r3, r3
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <update+0x270>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	bfb8      	it	lt
 8000e1e:	425b      	neglt	r3, r3
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d121      	bne.n	8000e68 <update+0x17c>
 8000e24:	4b50      	ldr	r3, [pc, #320]	; (8000f68 <update+0x27c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	bfb8      	it	lt
 8000e30:	425b      	neglt	r3, r3
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <update+0x278>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	bfb8      	it	lt
 8000e40:	425b      	neglt	r3, r3
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d110      	bne.n	8000e68 <update+0x17c>
 8000e46:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <update+0x284>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	bfb8      	it	lt
 8000e52:	425b      	neglt	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b45      	ldr	r3, [pc, #276]	; (8000f6c <update+0x280>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	bfb8      	it	lt
 8000e62:	425b      	neglt	r3, r3
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d001      	beq.n	8000e6c <update+0x180>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <update+0x182>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
			status_previous_led = led;
 8000e70:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <update+0x270>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a3a      	ldr	r2, [pc, #232]	; (8000f60 <update+0x274>)
 8000e76:	6013      	str	r3, [r2, #0]
			status_previous_quat = quat;
 8000e78:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <update+0x278>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a3a      	ldr	r2, [pc, #232]	; (8000f68 <update+0x27c>)
 8000e7e:	6013      	str	r3, [r2, #0]
			status_previous_bom = bom;
 8000e80:	4b3a      	ldr	r3, [pc, #232]	; (8000f6c <update+0x280>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a3a      	ldr	r2, [pc, #232]	; (8000f70 <update+0x284>)
 8000e86:	6013      	str	r3, [r2, #0]
			if (check_status_pre) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00d      	beq.n	8000eaa <update+0x1be>
				if ((count_state_lcd % 4) != 1) {
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <update+0x290>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	425a      	negs	r2, r3
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	f002 0203 	and.w	r2, r2, #3
 8000e9c:	bf58      	it	pl
 8000e9e:	4253      	negpl	r3, r2
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d002      	beq.n	8000eaa <update+0x1be>
					flag_ngat_keypad = 1;
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <update+0x294>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]
			if (adc_quang_tro > nguong_adc_quang_tro) {
 8000eaa:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <update+0x298>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <update+0x29c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	dd09      	ble.n	8000eca <update+0x1de>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LOW_LOAD);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ebc:	482d      	ldr	r0, [pc, #180]	; (8000f74 <update+0x288>)
 8000ebe:	f005 f9ca 	bl	8006256 <HAL_GPIO_WritePin>
				led = 1;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <update+0x270>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	e008      	b.n	8000edc <update+0x1f0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, HIGH_LOAD);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed0:	4828      	ldr	r0, [pc, #160]	; (8000f74 <update+0x288>)
 8000ed2:	f005 f9c0 	bl	8006256 <HAL_GPIO_WritePin>
				led = 0;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <update+0x270>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
			if (data_dht11[2] > nguong_nhiet_do) {
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <update+0x2a0>)
 8000ede:	789b      	ldrb	r3, [r3, #2]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <update+0x2a4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dd09      	ble.n	8000efe <update+0x212>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, HIGH_LOAD);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef0:	4820      	ldr	r0, [pc, #128]	; (8000f74 <update+0x288>)
 8000ef2:	f005 f9b0 	bl	8006256 <HAL_GPIO_WritePin>
				quat = 1;
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <update+0x278>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e008      	b.n	8000f10 <update+0x224>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LOW_LOAD);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f04:	481b      	ldr	r0, [pc, #108]	; (8000f74 <update+0x288>)
 8000f06:	f005 f9a6 	bl	8006256 <HAL_GPIO_WritePin>
				quat = 0;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <update+0x278>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
			if (adc_do_am_dat > nguong_adc_do_am_dat) {
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <update+0x2a8>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <update+0x2ac>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dd08      	ble.n	8000f2e <update+0x242>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, HIGH_LOAD);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4814      	ldr	r0, [pc, #80]	; (8000f74 <update+0x288>)
 8000f22:	f005 f998 	bl	8006256 <HAL_GPIO_WritePin>
				bom = 1;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <update+0x280>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
			break;
 8000f2c:	e007      	b.n	8000f3e <update+0x252>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, LOW_LOAD);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2101      	movs	r1, #1
 8000f32:	4810      	ldr	r0, [pc, #64]	; (8000f74 <update+0x288>)
 8000f34:	f005 f98f 	bl	8006256 <HAL_GPIO_WritePin>
				bom = 0;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <update+0x280>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
			break;
 8000f3e:	bf00      	nop
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000220 	.word	0x20000220
 8000f4c:	20000b64 	.word	0x20000b64
 8000f50:	200009f8 	.word	0x200009f8
 8000f54:	20000224 	.word	0x20000224
 8000f58:	40010c00 	.word	0x40010c00
 8000f5c:	200009ec 	.word	0x200009ec
 8000f60:	20000b68 	.word	0x20000b68
 8000f64:	200009f0 	.word	0x200009f0
 8000f68:	20000b6c 	.word	0x20000b6c
 8000f6c:	200009f4 	.word	0x200009f4
 8000f70:	20000b70 	.word	0x20000b70
 8000f74:	40010800 	.word	0x40010800
 8000f78:	20000b60 	.word	0x20000b60
 8000f7c:	2000022c 	.word	0x2000022c
 8000f80:	20000230 	.word	0x20000230
 8000f84:	20000af0 	.word	0x20000af0
 8000f88:	20000214 	.word	0x20000214
 8000f8c:	20000ab4 	.word	0x20000ab4
 8000f90:	2000021c 	.word	0x2000021c
 8000f94:	20000af4 	.word	0x20000af4
 8000f98:	20000218 	.word	0x20000218

08000f9c <update_lcd>:

void update_lcd(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
	if (flag_ngat_keypad) {
 8000fa2:	4bb0      	ldr	r3, [pc, #704]	; (8001264 <update_lcd+0x2c8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8509 	beq.w	80019be <update_lcd+0xa22>
		flag_ngat_keypad = 0;
 8000fac:	4bad      	ldr	r3, [pc, #692]	; (8001264 <update_lcd+0x2c8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
		switch (count_state_lcd % 7) {
 8000fb2:	4bad      	ldr	r3, [pc, #692]	; (8001268 <update_lcd+0x2cc>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4bad      	ldr	r3, [pc, #692]	; (800126c <update_lcd+0x2d0>)
 8000fb8:	fb83 1302 	smull	r1, r3, r3, r2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	1099      	asrs	r1, r3, #2
 8000fc0:	17d3      	asrs	r3, r2, #31
 8000fc2:	1ac9      	subs	r1, r1, r3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	1a5b      	subs	r3, r3, r1
 8000fca:	1ad1      	subs	r1, r2, r3
 8000fcc:	2906      	cmp	r1, #6
 8000fce:	f200 84f6 	bhi.w	80019be <update_lcd+0xa22>
 8000fd2:	a301      	add	r3, pc, #4	; (adr r3, 8000fd8 <update_lcd+0x3c>)
 8000fd4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8000fd8:	08000ff5 	.word	0x08000ff5
 8000fdc:	08001019 	.word	0x08001019
 8000fe0:	080011f7 	.word	0x080011f7
 8000fe4:	080012d5 	.word	0x080012d5
 8000fe8:	0800130b 	.word	0x0800130b
 8000fec:	08001507 	.word	0x08001507
 8000ff0:	0800176f 	.word	0x0800176f
			case 0: {
				lcd_clear();
 8000ff4:	f008 f900 	bl	80091f8 <lcd_clear>
				lcd_put_cur(0, 0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f008 f913 	bl	8009226 <lcd_put_cur>
				lcd_send_string(nhiet_do);
 8001000:	489b      	ldr	r0, [pc, #620]	; (8001270 <update_lcd+0x2d4>)
 8001002:	f008 f96c 	bl	80092de <lcd_send_string>
				lcd_put_cur(1, 0);
 8001006:	2100      	movs	r1, #0
 8001008:	2001      	movs	r0, #1
 800100a:	f008 f90c 	bl	8009226 <lcd_put_cur>
				lcd_send_string(do_am);
 800100e:	4899      	ldr	r0, [pc, #612]	; (8001274 <update_lcd+0x2d8>)
 8001010:	f008 f965 	bl	80092de <lcd_send_string>
				break;
 8001014:	f000 bcd3 	b.w	80019be <update_lcd+0xa22>
			}
			case 1: {
				if (flag_chuyen_lcd) {
 8001018:	4b97      	ldr	r3, [pc, #604]	; (8001278 <update_lcd+0x2dc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d019      	beq.n	8001054 <update_lcd+0xb8>
					count_mat_khau = -1;
 8001020:	4b96      	ldr	r3, [pc, #600]	; (800127c <update_lcd+0x2e0>)
 8001022:	f04f 32ff 	mov.w	r2, #4294967295
 8001026:	601a      	str	r2, [r3, #0]
					count_may_chu_nhap_vao = 0;
 8001028:	4b95      	ldr	r3, [pc, #596]	; (8001280 <update_lcd+0x2e4>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
					flag_lan_dau_nhap_mat_khau = 1;
 800102e:	4b95      	ldr	r3, [pc, #596]	; (8001284 <update_lcd+0x2e8>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
					flag_chuyen_lcd = 0;
 8001034:	4b90      	ldr	r3, [pc, #576]	; (8001278 <update_lcd+0x2dc>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
					lcd_clear();
 800103a:	f008 f8dd 	bl	80091f8 <lcd_clear>
					lcd_put_cur(0, 1);
 800103e:	2101      	movs	r1, #1
 8001040:	2000      	movs	r0, #0
 8001042:	f008 f8f0 	bl	8009226 <lcd_put_cur>
					lcd_send_string("Nhap mat khau:");
 8001046:	4890      	ldr	r0, [pc, #576]	; (8001288 <update_lcd+0x2ec>)
 8001048:	f008 f949 	bl	80092de <lcd_send_string>
					lcd_put_cur(1, 0);
 800104c:	2100      	movs	r1, #0
 800104e:	2001      	movs	r0, #1
 8001050:	f008 f8e9 	bl	8009226 <lcd_put_cur>
				}
				count_mat_khau++;
 8001054:	4b89      	ldr	r3, [pc, #548]	; (800127c <update_lcd+0x2e0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a88      	ldr	r2, [pc, #544]	; (800127c <update_lcd+0x2e0>)
 800105c:	6013      	str	r3, [r2, #0]
				count_may_chu_nhap_vao++;
 800105e:	4b88      	ldr	r3, [pc, #544]	; (8001280 <update_lcd+0x2e4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	4a86      	ldr	r2, [pc, #536]	; (8001280 <update_lcd+0x2e4>)
 8001066:	6013      	str	r3, [r2, #0]
				if (count_may_chu_nhap_vao >= 2) {
 8001068:	4b85      	ldr	r3, [pc, #532]	; (8001280 <update_lcd+0x2e4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	f340 84a5 	ble.w	80019bc <update_lcd+0xa20>
					if (count_may_chu_nhap_vao == 2) {
 8001072:	4b83      	ldr	r3, [pc, #524]	; (8001280 <update_lcd+0x2e4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d102      	bne.n	8001080 <update_lcd+0xe4>
						count_mat_khau = 0;
 800107a:	4b80      	ldr	r3, [pc, #512]	; (800127c <update_lcd+0x2e0>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
					}
					if ((flag_number <= 9) && (flag_number >= 0)) {
 8001080:	4b82      	ldr	r3, [pc, #520]	; (800128c <update_lcd+0x2f0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b09      	cmp	r3, #9
 8001086:	dc0a      	bgt.n	800109e <update_lcd+0x102>
 8001088:	4b80      	ldr	r3, [pc, #512]	; (800128c <update_lcd+0x2f0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db06      	blt.n	800109e <update_lcd+0x102>
						mat_khau_user[count_mat_khau] = flag_number;
 8001090:	4b7e      	ldr	r3, [pc, #504]	; (800128c <update_lcd+0x2f0>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b79      	ldr	r3, [pc, #484]	; (800127c <update_lcd+0x2e0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	b2d1      	uxtb	r1, r2
 800109a:	4a7d      	ldr	r2, [pc, #500]	; (8001290 <update_lcd+0x2f4>)
 800109c:	54d1      	strb	r1, [r2, r3]
					}
					switch (flag_number) {
 800109e:	4b7b      	ldr	r3, [pc, #492]	; (800128c <update_lcd+0x2f0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b0b      	cmp	r3, #11
 80010a4:	f200 80a2 	bhi.w	80011ec <update_lcd+0x250>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <update_lcd+0x114>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	08001129 	.word	0x08001129
 80010b4:	080010e1 	.word	0x080010e1
 80010b8:	080010e9 	.word	0x080010e9
 80010bc:	080010f1 	.word	0x080010f1
 80010c0:	080010f9 	.word	0x080010f9
 80010c4:	08001101 	.word	0x08001101
 80010c8:	08001109 	.word	0x08001109
 80010cc:	08001111 	.word	0x08001111
 80010d0:	08001119 	.word	0x08001119
 80010d4:	08001121 	.word	0x08001121
 80010d8:	080011ed 	.word	0x080011ed
 80010dc:	08001131 	.word	0x08001131
						case 1: {
							lcd_send_string("*");
 80010e0:	486c      	ldr	r0, [pc, #432]	; (8001294 <update_lcd+0x2f8>)
 80010e2:	f008 f8fc 	bl	80092de <lcd_send_string>
							break;
 80010e6:	e085      	b.n	80011f4 <update_lcd+0x258>
						}
						case 2: {
							lcd_send_string("*");
 80010e8:	486a      	ldr	r0, [pc, #424]	; (8001294 <update_lcd+0x2f8>)
 80010ea:	f008 f8f8 	bl	80092de <lcd_send_string>
							break;
 80010ee:	e081      	b.n	80011f4 <update_lcd+0x258>
						}
						case 3: {
							lcd_send_string("*");
 80010f0:	4868      	ldr	r0, [pc, #416]	; (8001294 <update_lcd+0x2f8>)
 80010f2:	f008 f8f4 	bl	80092de <lcd_send_string>
							break;
 80010f6:	e07d      	b.n	80011f4 <update_lcd+0x258>
						}
						case 4: {
							lcd_send_string("*");
 80010f8:	4866      	ldr	r0, [pc, #408]	; (8001294 <update_lcd+0x2f8>)
 80010fa:	f008 f8f0 	bl	80092de <lcd_send_string>
							break;
 80010fe:	e079      	b.n	80011f4 <update_lcd+0x258>
						}
						case 5: {
							lcd_send_string("*");
 8001100:	4864      	ldr	r0, [pc, #400]	; (8001294 <update_lcd+0x2f8>)
 8001102:	f008 f8ec 	bl	80092de <lcd_send_string>
							break;
 8001106:	e075      	b.n	80011f4 <update_lcd+0x258>
						}
						case 6: {
							lcd_send_string("*");
 8001108:	4862      	ldr	r0, [pc, #392]	; (8001294 <update_lcd+0x2f8>)
 800110a:	f008 f8e8 	bl	80092de <lcd_send_string>
							break;
 800110e:	e071      	b.n	80011f4 <update_lcd+0x258>
						}
						case 7: {
							lcd_send_string("*");
 8001110:	4860      	ldr	r0, [pc, #384]	; (8001294 <update_lcd+0x2f8>)
 8001112:	f008 f8e4 	bl	80092de <lcd_send_string>
							break;
 8001116:	e06d      	b.n	80011f4 <update_lcd+0x258>
						}
						case 8: {
							lcd_send_string("*");
 8001118:	485e      	ldr	r0, [pc, #376]	; (8001294 <update_lcd+0x2f8>)
 800111a:	f008 f8e0 	bl	80092de <lcd_send_string>
							break;
 800111e:	e069      	b.n	80011f4 <update_lcd+0x258>
						}
						case 9: {
							lcd_send_string("*");
 8001120:	485c      	ldr	r0, [pc, #368]	; (8001294 <update_lcd+0x2f8>)
 8001122:	f008 f8dc 	bl	80092de <lcd_send_string>
							break;
 8001126:	e065      	b.n	80011f4 <update_lcd+0x258>
						}
						case 0: {
							lcd_send_string("*");
 8001128:	485a      	ldr	r0, [pc, #360]	; (8001294 <update_lcd+0x2f8>)
 800112a:	f008 f8d8 	bl	80092de <lcd_send_string>
							break;
 800112e:	e061      	b.n	80011f4 <update_lcd+0x258>
						}
						case 11: {
							volatile int value_bang = 1;
 8001130:	2301      	movs	r3, #1
 8001132:	603b      	str	r3, [r7, #0]
							for (int i = 0; i < 6; i++) {
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e00f      	b.n	800115a <update_lcd+0x1be>
								if (mat_khau_user[i] != mat_khau_dung[i]) {
 800113a:	4a55      	ldr	r2, [pc, #340]	; (8001290 <update_lcd+0x2f4>)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	4413      	add	r3, r2
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	4955      	ldr	r1, [pc, #340]	; (8001298 <update_lcd+0x2fc>)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	440b      	add	r3, r1
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d002      	beq.n	8001154 <update_lcd+0x1b8>
									value_bang = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
									break;
 8001152:	e005      	b.n	8001160 <update_lcd+0x1c4>
							for (int i = 0; i < 6; i++) {
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b05      	cmp	r3, #5
 800115e:	ddec      	ble.n	800113a <update_lcd+0x19e>
								}
							}
							for (int i = 0; i < 6; i++) {
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	e007      	b.n	8001176 <update_lcd+0x1da>
								mat_khau_user[i] = 0;
 8001166:	4a4a      	ldr	r2, [pc, #296]	; (8001290 <update_lcd+0x2f4>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4413      	add	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < 6; i++) {
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	3301      	adds	r3, #1
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	2b05      	cmp	r3, #5
 800117a:	ddf4      	ble.n	8001166 <update_lcd+0x1ca>
							}
							if (value_bang) {
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d016      	beq.n	80011b0 <update_lcd+0x214>
								count_state_lcd = 2;
 8001182:	4b39      	ldr	r3, [pc, #228]	; (8001268 <update_lcd+0x2cc>)
 8001184:	2202      	movs	r2, #2
 8001186:	601a      	str	r2, [r3, #0]
								flag_ngat_keypad = 1;
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <update_lcd+0x2c8>)
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]
								lcd_clear();
 800118e:	f008 f833 	bl	80091f8 <lcd_clear>
								lcd_put_cur(0, 1);
 8001192:	2101      	movs	r1, #1
 8001194:	2000      	movs	r0, #0
 8001196:	f008 f846 	bl	8009226 <lcd_put_cur>
								lcd_send_string("Mat khau dung ->>");
 800119a:	4840      	ldr	r0, [pc, #256]	; (800129c <update_lcd+0x300>)
 800119c:	f008 f89f 	bl	80092de <lcd_send_string>
								flag_di_qua_nhap_mat_khau = 1;
 80011a0:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <update_lcd+0x304>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
								HAL_Delay(1000);
 80011a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011aa:	f003 fdcb 	bl	8004d44 <HAL_Delay>
								lcd_send_string("Mat khau sai ");
								lcd_put_cur(1, 1);
								lcd_send_string("Moi nhap lai  ");
								HAL_Delay(1000);
							}
							break;
 80011ae:	e021      	b.n	80011f4 <update_lcd+0x258>
								count_state_lcd = 1;
 80011b0:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <update_lcd+0x2cc>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
								flag_chuyen_lcd = 1;
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <update_lcd+0x2dc>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
								flag_ngat_keypad = 1;
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <update_lcd+0x2c8>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
								lcd_clear();
 80011c2:	f008 f819 	bl	80091f8 <lcd_clear>
								lcd_put_cur(0, 1);
 80011c6:	2101      	movs	r1, #1
 80011c8:	2000      	movs	r0, #0
 80011ca:	f008 f82c 	bl	8009226 <lcd_put_cur>
								lcd_send_string("Mat khau sai ");
 80011ce:	4835      	ldr	r0, [pc, #212]	; (80012a4 <update_lcd+0x308>)
 80011d0:	f008 f885 	bl	80092de <lcd_send_string>
								lcd_put_cur(1, 1);
 80011d4:	2101      	movs	r1, #1
 80011d6:	2001      	movs	r0, #1
 80011d8:	f008 f825 	bl	8009226 <lcd_put_cur>
								lcd_send_string("Moi nhap lai  ");
 80011dc:	4832      	ldr	r0, [pc, #200]	; (80012a8 <update_lcd+0x30c>)
 80011de:	f008 f87e 	bl	80092de <lcd_send_string>
								HAL_Delay(1000);
 80011e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e6:	f003 fdad 	bl	8004d44 <HAL_Delay>
							break;
 80011ea:	e003      	b.n	80011f4 <update_lcd+0x258>
						}
						default: {
							lcd_send_string("0");
 80011ec:	482f      	ldr	r0, [pc, #188]	; (80012ac <update_lcd+0x310>)
 80011ee:	f008 f876 	bl	80092de <lcd_send_string>
							break;
 80011f2:	bf00      	nop
						}
					}
				}
				break;
 80011f4:	e3e2      	b.n	80019bc <update_lcd+0xa20>
			}
			case 2: {
				lcd_clear();
 80011f6:	f007 ffff 	bl	80091f8 <lcd_clear>
				lcd_put_cur(0, 0);
 80011fa:	2100      	movs	r1, #0
 80011fc:	2000      	movs	r0, #0
 80011fe:	f008 f812 	bl	8009226 <lcd_put_cur>
				lcd_send_string("Den  Quat  Bom");
 8001202:	482b      	ldr	r0, [pc, #172]	; (80012b0 <update_lcd+0x314>)
 8001204:	f008 f86b 	bl	80092de <lcd_send_string>
				lcd_put_cur(1, 0);
 8001208:	2100      	movs	r1, #0
 800120a:	2001      	movs	r0, #1
 800120c:	f008 f80b 	bl	8009226 <lcd_put_cur>
				if (led % 2 == 0) {
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <update_lcd+0x318>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d103      	bne.n	8001224 <update_lcd+0x288>
					lcd_send_string("Bat  ");
 800121c:	4826      	ldr	r0, [pc, #152]	; (80012b8 <update_lcd+0x31c>)
 800121e:	f008 f85e 	bl	80092de <lcd_send_string>
 8001222:	e002      	b.n	800122a <update_lcd+0x28e>
				} else {
					lcd_send_string("Tat  ");
 8001224:	4825      	ldr	r0, [pc, #148]	; (80012bc <update_lcd+0x320>)
 8001226:	f008 f85a 	bl	80092de <lcd_send_string>
				}
				if (quat % 2 == 1) {
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <update_lcd+0x324>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	bfb8      	it	lt
 8001236:	425b      	neglt	r3, r3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d103      	bne.n	8001244 <update_lcd+0x2a8>
					lcd_send_string("Bat  ");
 800123c:	481e      	ldr	r0, [pc, #120]	; (80012b8 <update_lcd+0x31c>)
 800123e:	f008 f84e 	bl	80092de <lcd_send_string>
 8001242:	e002      	b.n	800124a <update_lcd+0x2ae>
				} else {
					lcd_send_string("Tat  ");
 8001244:	481d      	ldr	r0, [pc, #116]	; (80012bc <update_lcd+0x320>)
 8001246:	f008 f84a 	bl	80092de <lcd_send_string>
				}
				if (bom % 2 == 1) {
 800124a:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <update_lcd+0x328>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	bfb8      	it	lt
 8001256:	425b      	neglt	r3, r3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d137      	bne.n	80012cc <update_lcd+0x330>
					lcd_send_string(" Bat  ");
 800125c:	481a      	ldr	r0, [pc, #104]	; (80012c8 <update_lcd+0x32c>)
 800125e:	f008 f83e 	bl	80092de <lcd_send_string>
				} else {
					lcd_send_string(" Tat  ");
				}
				break;
 8001262:	e3ac      	b.n	80019be <update_lcd+0xa22>
 8001264:	20000230 	.word	0x20000230
 8001268:	2000022c 	.word	0x2000022c
 800126c:	92492493 	.word	0x92492493
 8001270:	20000ac8 	.word	0x20000ac8
 8001274:	20000adc 	.word	0x20000adc
 8001278:	20000234 	.word	0x20000234
 800127c:	20000b58 	.word	0x20000b58
 8001280:	20000b5c 	.word	0x20000b5c
 8001284:	20000b00 	.word	0x20000b00
 8001288:	0800a6bc 	.word	0x0800a6bc
 800128c:	20000afc 	.word	0x20000afc
 8001290:	20000b50 	.word	0x20000b50
 8001294:	0800a6cc 	.word	0x0800a6cc
 8001298:	20000238 	.word	0x20000238
 800129c:	0800a6d0 	.word	0x0800a6d0
 80012a0:	20000b60 	.word	0x20000b60
 80012a4:	0800a6e4 	.word	0x0800a6e4
 80012a8:	0800a6f4 	.word	0x0800a6f4
 80012ac:	0800a704 	.word	0x0800a704
 80012b0:	0800a708 	.word	0x0800a708
 80012b4:	200009ec 	.word	0x200009ec
 80012b8:	0800a718 	.word	0x0800a718
 80012bc:	0800a720 	.word	0x0800a720
 80012c0:	200009f0 	.word	0x200009f0
 80012c4:	200009f4 	.word	0x200009f4
 80012c8:	0800a728 	.word	0x0800a728
					lcd_send_string(" Tat  ");
 80012cc:	48b3      	ldr	r0, [pc, #716]	; (800159c <update_lcd+0x600>)
 80012ce:	f008 f806 	bl	80092de <lcd_send_string>
				break;
 80012d2:	e374      	b.n	80019be <update_lcd+0xa22>
			}
			case 3: {
				lcd_clear();
 80012d4:	f007 ff90 	bl	80091f8 <lcd_clear>
				lcd_put_cur(0, 5);
 80012d8:	2105      	movs	r1, #5
 80012da:	2000      	movs	r0, #0
 80012dc:	f007 ffa3 	bl	8009226 <lcd_put_cur>
				lcd_send_string("Mode ");
 80012e0:	48af      	ldr	r0, [pc, #700]	; (80015a0 <update_lcd+0x604>)
 80012e2:	f007 fffc 	bl	80092de <lcd_send_string>
				lcd_put_cur(1, 5);
 80012e6:	2105      	movs	r1, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	f007 ff9c 	bl	8009226 <lcd_put_cur>
				if (mode % 2) {
 80012ee:	4bad      	ldr	r3, [pc, #692]	; (80015a4 <update_lcd+0x608>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <update_lcd+0x366>
					lcd_send_string("Tu Dong");
 80012fa:	48ab      	ldr	r0, [pc, #684]	; (80015a8 <update_lcd+0x60c>)
 80012fc:	f007 ffef 	bl	80092de <lcd_send_string>
				} else {
					lcd_send_string("Bang Tay");
				}
				break;
 8001300:	e35d      	b.n	80019be <update_lcd+0xa22>
					lcd_send_string("Bang Tay");
 8001302:	48aa      	ldr	r0, [pc, #680]	; (80015ac <update_lcd+0x610>)
 8001304:	f007 ffeb 	bl	80092de <lcd_send_string>
				break;
 8001308:	e359      	b.n	80019be <update_lcd+0xa22>
			}
			case 4: {
				if(flag_chuyen_lcd)
 800130a:	4ba9      	ldr	r3, [pc, #676]	; (80015b0 <update_lcd+0x614>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d013      	beq.n	800133a <update_lcd+0x39e>
				{
					flag_chuyen_lcd=0;
 8001312:	4ba7      	ldr	r3, [pc, #668]	; (80015b0 <update_lcd+0x614>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
					lcd_clear();
 8001318:	f007 ff6e 	bl	80091f8 <lcd_clear>
					lcd_put_cur(0, 0);
 800131c:	2100      	movs	r1, #0
 800131e:	2000      	movs	r0, #0
 8001320:	f007 ff81 	bl	8009226 <lcd_put_cur>
					lcd_send_string("Set Quang Tro:");
 8001324:	48a3      	ldr	r0, [pc, #652]	; (80015b4 <update_lcd+0x618>)
 8001326:	f007 ffda 	bl	80092de <lcd_send_string>
					lcd_put_cur(1, 0);
 800132a:	2100      	movs	r1, #0
 800132c:	2001      	movs	r0, #1
 800132e:	f007 ff7a 	bl	8009226 <lcd_put_cur>
					count_input_quang_tro=0;
 8001332:	4ba1      	ldr	r3, [pc, #644]	; (80015b8 <update_lcd+0x61c>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
					break;
 8001338:	e341      	b.n	80019be <update_lcd+0xa22>
				}
				switch(flag_number)
 800133a:	4ba0      	ldr	r3, [pc, #640]	; (80015bc <update_lcd+0x620>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b0b      	cmp	r3, #11
 8001340:	f200 80db 	bhi.w	80014fa <update_lcd+0x55e>
 8001344:	a201      	add	r2, pc, #4	; (adr r2, 800134c <update_lcd+0x3b0>)
 8001346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134a:	bf00      	nop
 800134c:	0800137d 	.word	0x0800137d
 8001350:	0800138f 	.word	0x0800138f
 8001354:	080013a1 	.word	0x080013a1
 8001358:	080013b3 	.word	0x080013b3
 800135c:	080013c5 	.word	0x080013c5
 8001360:	080013d7 	.word	0x080013d7
 8001364:	080013e9 	.word	0x080013e9
 8001368:	080013fb 	.word	0x080013fb
 800136c:	0800140d 	.word	0x0800140d
 8001370:	0800141f 	.word	0x0800141f
 8001374:	080014fb 	.word	0x080014fb
 8001378:	08001431 	.word	0x08001431
				{
					case 0:
						lcd_send_string("0");
 800137c:	4890      	ldr	r0, [pc, #576]	; (80015c0 <update_lcd+0x624>)
 800137e:	f007 ffae 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 0;
 8001382:	4b8d      	ldr	r3, [pc, #564]	; (80015b8 <update_lcd+0x61c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a8f      	ldr	r2, [pc, #572]	; (80015c4 <update_lcd+0x628>)
 8001388:	2100      	movs	r1, #0
 800138a:	54d1      	strb	r1, [r2, r3]
					break;
 800138c:	e0b5      	b.n	80014fa <update_lcd+0x55e>
					case 1:
						lcd_send_string("1");
 800138e:	488e      	ldr	r0, [pc, #568]	; (80015c8 <update_lcd+0x62c>)
 8001390:	f007 ffa5 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 1;
 8001394:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <update_lcd+0x61c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a8a      	ldr	r2, [pc, #552]	; (80015c4 <update_lcd+0x628>)
 800139a:	2101      	movs	r1, #1
 800139c:	54d1      	strb	r1, [r2, r3]
					break;
 800139e:	e0ac      	b.n	80014fa <update_lcd+0x55e>
					case 2:
						lcd_send_string("2");
 80013a0:	488a      	ldr	r0, [pc, #552]	; (80015cc <update_lcd+0x630>)
 80013a2:	f007 ff9c 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 2;
 80013a6:	4b84      	ldr	r3, [pc, #528]	; (80015b8 <update_lcd+0x61c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a86      	ldr	r2, [pc, #536]	; (80015c4 <update_lcd+0x628>)
 80013ac:	2102      	movs	r1, #2
 80013ae:	54d1      	strb	r1, [r2, r3]
					break;
 80013b0:	e0a3      	b.n	80014fa <update_lcd+0x55e>
					case 3:
						lcd_send_string("3");
 80013b2:	4887      	ldr	r0, [pc, #540]	; (80015d0 <update_lcd+0x634>)
 80013b4:	f007 ff93 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] =3;
 80013b8:	4b7f      	ldr	r3, [pc, #508]	; (80015b8 <update_lcd+0x61c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a81      	ldr	r2, [pc, #516]	; (80015c4 <update_lcd+0x628>)
 80013be:	2103      	movs	r1, #3
 80013c0:	54d1      	strb	r1, [r2, r3]
					break;
 80013c2:	e09a      	b.n	80014fa <update_lcd+0x55e>
					case 4:
						lcd_send_string("4");
 80013c4:	4883      	ldr	r0, [pc, #524]	; (80015d4 <update_lcd+0x638>)
 80013c6:	f007 ff8a 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 4;
 80013ca:	4b7b      	ldr	r3, [pc, #492]	; (80015b8 <update_lcd+0x61c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a7d      	ldr	r2, [pc, #500]	; (80015c4 <update_lcd+0x628>)
 80013d0:	2104      	movs	r1, #4
 80013d2:	54d1      	strb	r1, [r2, r3]
					break;
 80013d4:	e091      	b.n	80014fa <update_lcd+0x55e>
					case 5:
						lcd_send_string("5");
 80013d6:	4880      	ldr	r0, [pc, #512]	; (80015d8 <update_lcd+0x63c>)
 80013d8:	f007 ff81 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 5;
 80013dc:	4b76      	ldr	r3, [pc, #472]	; (80015b8 <update_lcd+0x61c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a78      	ldr	r2, [pc, #480]	; (80015c4 <update_lcd+0x628>)
 80013e2:	2105      	movs	r1, #5
 80013e4:	54d1      	strb	r1, [r2, r3]
					break;
 80013e6:	e088      	b.n	80014fa <update_lcd+0x55e>
					case 6:
						lcd_send_string("6");
 80013e8:	487c      	ldr	r0, [pc, #496]	; (80015dc <update_lcd+0x640>)
 80013ea:	f007 ff78 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 6;
 80013ee:	4b72      	ldr	r3, [pc, #456]	; (80015b8 <update_lcd+0x61c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a74      	ldr	r2, [pc, #464]	; (80015c4 <update_lcd+0x628>)
 80013f4:	2106      	movs	r1, #6
 80013f6:	54d1      	strb	r1, [r2, r3]
					break;
 80013f8:	e07f      	b.n	80014fa <update_lcd+0x55e>
					case 7:
						lcd_send_string("7");
 80013fa:	4879      	ldr	r0, [pc, #484]	; (80015e0 <update_lcd+0x644>)
 80013fc:	f007 ff6f 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 7;
 8001400:	4b6d      	ldr	r3, [pc, #436]	; (80015b8 <update_lcd+0x61c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a6f      	ldr	r2, [pc, #444]	; (80015c4 <update_lcd+0x628>)
 8001406:	2107      	movs	r1, #7
 8001408:	54d1      	strb	r1, [r2, r3]
					break;
 800140a:	e076      	b.n	80014fa <update_lcd+0x55e>
					case 8:
						lcd_send_string("8");
 800140c:	4875      	ldr	r0, [pc, #468]	; (80015e4 <update_lcd+0x648>)
 800140e:	f007 ff66 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 8;
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <update_lcd+0x61c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a6b      	ldr	r2, [pc, #428]	; (80015c4 <update_lcd+0x628>)
 8001418:	2108      	movs	r1, #8
 800141a:	54d1      	strb	r1, [r2, r3]
					break;
 800141c:	e06d      	b.n	80014fa <update_lcd+0x55e>
					case 9:
						lcd_send_string("9");
 800141e:	4872      	ldr	r0, [pc, #456]	; (80015e8 <update_lcd+0x64c>)
 8001420:	f007 ff5d 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 9;
 8001424:	4b64      	ldr	r3, [pc, #400]	; (80015b8 <update_lcd+0x61c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a66      	ldr	r2, [pc, #408]	; (80015c4 <update_lcd+0x628>)
 800142a:	2109      	movs	r1, #9
 800142c:	54d1      	strb	r1, [r2, r3]
					break;
 800142e:	e064      	b.n	80014fa <update_lcd+0x55e>
					case 11:
						if(arr_to_int1(data_qtr,strlen(data_qtr)) <= 4095 && arr_to_int1(data_qtr,strlen(data_qtr)) >=0)
 8001430:	4864      	ldr	r0, [pc, #400]	; (80015c4 <update_lcd+0x628>)
 8001432:	f7fe fe95 	bl	8000160 <strlen>
 8001436:	4603      	mov	r3, r0
 8001438:	4619      	mov	r1, r3
 800143a:	4862      	ldr	r0, [pc, #392]	; (80015c4 <update_lcd+0x628>)
 800143c:	f7fe fe98 	bl	8000170 <arr_to_int1>
 8001440:	4603      	mov	r3, r0
 8001442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001446:	da2c      	bge.n	80014a2 <update_lcd+0x506>
 8001448:	485e      	ldr	r0, [pc, #376]	; (80015c4 <update_lcd+0x628>)
 800144a:	f7fe fe89 	bl	8000160 <strlen>
 800144e:	4603      	mov	r3, r0
 8001450:	4619      	mov	r1, r3
 8001452:	485c      	ldr	r0, [pc, #368]	; (80015c4 <update_lcd+0x628>)
 8001454:	f7fe fe8c 	bl	8000170 <arr_to_int1>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	db21      	blt.n	80014a2 <update_lcd+0x506>
						{
							lcd_clear();
 800145e:	f007 fecb 	bl	80091f8 <lcd_clear>
							lcd_put_cur(0, 0);
 8001462:	2100      	movs	r1, #0
 8001464:	2000      	movs	r0, #0
 8001466:	f007 fede 	bl	8009226 <lcd_put_cur>
							lcd_send_string("OK");
 800146a:	4860      	ldr	r0, [pc, #384]	; (80015ec <update_lcd+0x650>)
 800146c:	f007 ff37 	bl	80092de <lcd_send_string>
							nguong_adc_quang_tro = arr_to_int1(data_qtr,strlen(data_qtr));
 8001470:	4854      	ldr	r0, [pc, #336]	; (80015c4 <update_lcd+0x628>)
 8001472:	f7fe fe75 	bl	8000160 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	4619      	mov	r1, r3
 800147a:	4852      	ldr	r0, [pc, #328]	; (80015c4 <update_lcd+0x628>)
 800147c:	f7fe fe78 	bl	8000170 <arr_to_int1>
 8001480:	4603      	mov	r3, r0
 8001482:	4a5b      	ldr	r2, [pc, #364]	; (80015f0 <update_lcd+0x654>)
 8001484:	6013      	str	r3, [r2, #0]
							flag_chuyen_lcd =1;
 8001486:	4b4a      	ldr	r3, [pc, #296]	; (80015b0 <update_lcd+0x614>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
							count_state_lcd =5;
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <update_lcd+0x658>)
 800148e:	2205      	movs	r2, #5
 8001490:	601a      	str	r2, [r3, #0]
							flag_ngat_keypad =1;
 8001492:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <update_lcd+0x65c>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]
							HAL_Delay(1000);
 8001498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800149c:	f003 fc52 	bl	8004d44 <HAL_Delay>
 80014a0:	e01c      	b.n	80014dc <update_lcd+0x540>
						} else {
							lcd_clear();
 80014a2:	f007 fea9 	bl	80091f8 <lcd_clear>
							lcd_put_cur(0, 0);
 80014a6:	2100      	movs	r1, #0
 80014a8:	2000      	movs	r0, #0
 80014aa:	f007 febc 	bl	8009226 <lcd_put_cur>
							lcd_send_string("kh hop le");
 80014ae:	4853      	ldr	r0, [pc, #332]	; (80015fc <update_lcd+0x660>)
 80014b0:	f007 ff15 	bl	80092de <lcd_send_string>
							lcd_put_cur(1, 0);
 80014b4:	2100      	movs	r1, #0
 80014b6:	2001      	movs	r0, #1
 80014b8:	f007 feb5 	bl	8009226 <lcd_put_cur>
							lcd_send_string("moi nhap lai:");
 80014bc:	4850      	ldr	r0, [pc, #320]	; (8001600 <update_lcd+0x664>)
 80014be:	f007 ff0e 	bl	80092de <lcd_send_string>
							flag_chuyen_lcd =1;
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <update_lcd+0x614>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
							count_state_lcd =4;
 80014c8:	4b4a      	ldr	r3, [pc, #296]	; (80015f4 <update_lcd+0x658>)
 80014ca:	2204      	movs	r2, #4
 80014cc:	601a      	str	r2, [r3, #0]
							flag_ngat_keypad =1;
 80014ce:	4b4a      	ldr	r3, [pc, #296]	; (80015f8 <update_lcd+0x65c>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
							HAL_Delay(1000);
 80014d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d8:	f003 fc34 	bl	8004d44 <HAL_Delay>
						}
						for(int i=0;i<sizeof(data_qtr);i++)
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	e007      	b.n	80014f2 <update_lcd+0x556>
							data_qtr[i] =0;
 80014e2:	4a38      	ldr	r2, [pc, #224]	; (80015c4 <update_lcd+0x628>)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
						for(int i=0;i<sizeof(data_qtr);i++)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3301      	adds	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d9f4      	bls.n	80014e2 <update_lcd+0x546>
					break;
 80014f8:	bf00      	nop
				}
				count_input_quang_tro++;
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <update_lcd+0x61c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	4a2d      	ldr	r2, [pc, #180]	; (80015b8 <update_lcd+0x61c>)
 8001502:	6013      	str	r3, [r2, #0]
				break;
 8001504:	e25b      	b.n	80019be <update_lcd+0xa22>
			}
			case 5:
			{
				if(flag_chuyen_lcd)
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <update_lcd+0x614>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d013      	beq.n	8001536 <update_lcd+0x59a>
				{
					flag_chuyen_lcd=0;
 800150e:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <update_lcd+0x614>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
					lcd_clear();
 8001514:	f007 fe70 	bl	80091f8 <lcd_clear>
					lcd_put_cur(0, 0);
 8001518:	2100      	movs	r1, #0
 800151a:	2000      	movs	r0, #0
 800151c:	f007 fe83 	bl	8009226 <lcd_put_cur>
					lcd_send_string("Set Do am:");
 8001520:	4838      	ldr	r0, [pc, #224]	; (8001604 <update_lcd+0x668>)
 8001522:	f007 fedc 	bl	80092de <lcd_send_string>
					lcd_put_cur(1, 0);
 8001526:	2100      	movs	r1, #0
 8001528:	2001      	movs	r0, #1
 800152a:	f007 fe7c 	bl	8009226 <lcd_put_cur>
					count_input_quang_tro=0;
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <update_lcd+0x61c>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
					break;
 8001534:	e243      	b.n	80019be <update_lcd+0xa22>
				}
				switch(flag_number)
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <update_lcd+0x620>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b0b      	cmp	r3, #11
 800153c:	f200 8111 	bhi.w	8001762 <update_lcd+0x7c6>
 8001540:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <update_lcd+0x5ac>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	08001579 	.word	0x08001579
 800154c:	0800158b 	.word	0x0800158b
 8001550:	08001609 	.word	0x08001609
 8001554:	0800161b 	.word	0x0800161b
 8001558:	0800162d 	.word	0x0800162d
 800155c:	0800163f 	.word	0x0800163f
 8001560:	08001651 	.word	0x08001651
 8001564:	08001663 	.word	0x08001663
 8001568:	08001675 	.word	0x08001675
 800156c:	08001687 	.word	0x08001687
 8001570:	08001763 	.word	0x08001763
 8001574:	08001699 	.word	0x08001699
				{
					case 0:
						lcd_send_string("0");
 8001578:	4811      	ldr	r0, [pc, #68]	; (80015c0 <update_lcd+0x624>)
 800157a:	f007 feb0 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <update_lcd+0x61c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <update_lcd+0x628>)
 8001584:	2100      	movs	r1, #0
 8001586:	54d1      	strb	r1, [r2, r3]
					break;
 8001588:	e0eb      	b.n	8001762 <update_lcd+0x7c6>
					case 1:
						lcd_send_string("1");
 800158a:	480f      	ldr	r0, [pc, #60]	; (80015c8 <update_lcd+0x62c>)
 800158c:	f007 fea7 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 1;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <update_lcd+0x61c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <update_lcd+0x628>)
 8001596:	2101      	movs	r1, #1
 8001598:	54d1      	strb	r1, [r2, r3]
					break;
 800159a:	e0e2      	b.n	8001762 <update_lcd+0x7c6>
 800159c:	0800a730 	.word	0x0800a730
 80015a0:	0800a738 	.word	0x0800a738
 80015a4:	20000220 	.word	0x20000220
 80015a8:	0800a740 	.word	0x0800a740
 80015ac:	0800a748 	.word	0x0800a748
 80015b0:	20000234 	.word	0x20000234
 80015b4:	0800a754 	.word	0x0800a754
 80015b8:	20000bf8 	.word	0x20000bf8
 80015bc:	20000afc 	.word	0x20000afc
 80015c0:	0800a704 	.word	0x0800a704
 80015c4:	20000be8 	.word	0x20000be8
 80015c8:	0800a764 	.word	0x0800a764
 80015cc:	0800a768 	.word	0x0800a768
 80015d0:	0800a76c 	.word	0x0800a76c
 80015d4:	0800a770 	.word	0x0800a770
 80015d8:	0800a774 	.word	0x0800a774
 80015dc:	0800a778 	.word	0x0800a778
 80015e0:	0800a77c 	.word	0x0800a77c
 80015e4:	0800a780 	.word	0x0800a780
 80015e8:	0800a784 	.word	0x0800a784
 80015ec:	0800a788 	.word	0x0800a788
 80015f0:	20000214 	.word	0x20000214
 80015f4:	2000022c 	.word	0x2000022c
 80015f8:	20000230 	.word	0x20000230
 80015fc:	0800a78c 	.word	0x0800a78c
 8001600:	0800a798 	.word	0x0800a798
 8001604:	0800a7a8 	.word	0x0800a7a8
					case 2:
						lcd_send_string("2");
 8001608:	48a2      	ldr	r0, [pc, #648]	; (8001894 <update_lcd+0x8f8>)
 800160a:	f007 fe68 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 2;
 800160e:	4ba2      	ldr	r3, [pc, #648]	; (8001898 <update_lcd+0x8fc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4aa2      	ldr	r2, [pc, #648]	; (800189c <update_lcd+0x900>)
 8001614:	2102      	movs	r1, #2
 8001616:	54d1      	strb	r1, [r2, r3]
					break;
 8001618:	e0a3      	b.n	8001762 <update_lcd+0x7c6>
					case 3:
						lcd_send_string("3");
 800161a:	48a1      	ldr	r0, [pc, #644]	; (80018a0 <update_lcd+0x904>)
 800161c:	f007 fe5f 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] =3;
 8001620:	4b9d      	ldr	r3, [pc, #628]	; (8001898 <update_lcd+0x8fc>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a9d      	ldr	r2, [pc, #628]	; (800189c <update_lcd+0x900>)
 8001626:	2103      	movs	r1, #3
 8001628:	54d1      	strb	r1, [r2, r3]
					break;
 800162a:	e09a      	b.n	8001762 <update_lcd+0x7c6>
					case 4:
						lcd_send_string("4");
 800162c:	489d      	ldr	r0, [pc, #628]	; (80018a4 <update_lcd+0x908>)
 800162e:	f007 fe56 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 4;
 8001632:	4b99      	ldr	r3, [pc, #612]	; (8001898 <update_lcd+0x8fc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a99      	ldr	r2, [pc, #612]	; (800189c <update_lcd+0x900>)
 8001638:	2104      	movs	r1, #4
 800163a:	54d1      	strb	r1, [r2, r3]
					break;
 800163c:	e091      	b.n	8001762 <update_lcd+0x7c6>
					case 5:
						lcd_send_string("5");
 800163e:	489a      	ldr	r0, [pc, #616]	; (80018a8 <update_lcd+0x90c>)
 8001640:	f007 fe4d 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 5;
 8001644:	4b94      	ldr	r3, [pc, #592]	; (8001898 <update_lcd+0x8fc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a94      	ldr	r2, [pc, #592]	; (800189c <update_lcd+0x900>)
 800164a:	2105      	movs	r1, #5
 800164c:	54d1      	strb	r1, [r2, r3]
					break;
 800164e:	e088      	b.n	8001762 <update_lcd+0x7c6>
					case 6:
						lcd_send_string("6");
 8001650:	4896      	ldr	r0, [pc, #600]	; (80018ac <update_lcd+0x910>)
 8001652:	f007 fe44 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 6;
 8001656:	4b90      	ldr	r3, [pc, #576]	; (8001898 <update_lcd+0x8fc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a90      	ldr	r2, [pc, #576]	; (800189c <update_lcd+0x900>)
 800165c:	2106      	movs	r1, #6
 800165e:	54d1      	strb	r1, [r2, r3]
					break;
 8001660:	e07f      	b.n	8001762 <update_lcd+0x7c6>
					case 7:
						lcd_send_string("7");
 8001662:	4893      	ldr	r0, [pc, #588]	; (80018b0 <update_lcd+0x914>)
 8001664:	f007 fe3b 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 7;
 8001668:	4b8b      	ldr	r3, [pc, #556]	; (8001898 <update_lcd+0x8fc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a8b      	ldr	r2, [pc, #556]	; (800189c <update_lcd+0x900>)
 800166e:	2107      	movs	r1, #7
 8001670:	54d1      	strb	r1, [r2, r3]
					break;
 8001672:	e076      	b.n	8001762 <update_lcd+0x7c6>
					case 8:
						lcd_send_string("8");
 8001674:	488f      	ldr	r0, [pc, #572]	; (80018b4 <update_lcd+0x918>)
 8001676:	f007 fe32 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 8;
 800167a:	4b87      	ldr	r3, [pc, #540]	; (8001898 <update_lcd+0x8fc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a87      	ldr	r2, [pc, #540]	; (800189c <update_lcd+0x900>)
 8001680:	2108      	movs	r1, #8
 8001682:	54d1      	strb	r1, [r2, r3]
					break;
 8001684:	e06d      	b.n	8001762 <update_lcd+0x7c6>
					case 9:
						lcd_send_string("9");
 8001686:	488c      	ldr	r0, [pc, #560]	; (80018b8 <update_lcd+0x91c>)
 8001688:	f007 fe29 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 9;
 800168c:	4b82      	ldr	r3, [pc, #520]	; (8001898 <update_lcd+0x8fc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a82      	ldr	r2, [pc, #520]	; (800189c <update_lcd+0x900>)
 8001692:	2109      	movs	r1, #9
 8001694:	54d1      	strb	r1, [r2, r3]
					break;
 8001696:	e064      	b.n	8001762 <update_lcd+0x7c6>
					case 11:
						if(arr_to_int1(data_qtr,strlen(data_qtr)) <= 4095 && arr_to_int1(data_qtr,strlen(data_qtr)) >=0)
 8001698:	4880      	ldr	r0, [pc, #512]	; (800189c <update_lcd+0x900>)
 800169a:	f7fe fd61 	bl	8000160 <strlen>
 800169e:	4603      	mov	r3, r0
 80016a0:	4619      	mov	r1, r3
 80016a2:	487e      	ldr	r0, [pc, #504]	; (800189c <update_lcd+0x900>)
 80016a4:	f7fe fd64 	bl	8000170 <arr_to_int1>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ae:	da2c      	bge.n	800170a <update_lcd+0x76e>
 80016b0:	487a      	ldr	r0, [pc, #488]	; (800189c <update_lcd+0x900>)
 80016b2:	f7fe fd55 	bl	8000160 <strlen>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4619      	mov	r1, r3
 80016ba:	4878      	ldr	r0, [pc, #480]	; (800189c <update_lcd+0x900>)
 80016bc:	f7fe fd58 	bl	8000170 <arr_to_int1>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db21      	blt.n	800170a <update_lcd+0x76e>
						{
							lcd_clear();
 80016c6:	f007 fd97 	bl	80091f8 <lcd_clear>
							lcd_put_cur(0, 0);
 80016ca:	2100      	movs	r1, #0
 80016cc:	2000      	movs	r0, #0
 80016ce:	f007 fdaa 	bl	8009226 <lcd_put_cur>
							lcd_send_string("OK");
 80016d2:	487a      	ldr	r0, [pc, #488]	; (80018bc <update_lcd+0x920>)
 80016d4:	f007 fe03 	bl	80092de <lcd_send_string>
							nguong_adc_do_am_dat = arr_to_int1(data_qtr,strlen(data_qtr));
 80016d8:	4870      	ldr	r0, [pc, #448]	; (800189c <update_lcd+0x900>)
 80016da:	f7fe fd41 	bl	8000160 <strlen>
 80016de:	4603      	mov	r3, r0
 80016e0:	4619      	mov	r1, r3
 80016e2:	486e      	ldr	r0, [pc, #440]	; (800189c <update_lcd+0x900>)
 80016e4:	f7fe fd44 	bl	8000170 <arr_to_int1>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a75      	ldr	r2, [pc, #468]	; (80018c0 <update_lcd+0x924>)
 80016ec:	6013      	str	r3, [r2, #0]
							flag_chuyen_lcd =1;
 80016ee:	4b75      	ldr	r3, [pc, #468]	; (80018c4 <update_lcd+0x928>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
							count_state_lcd =6;
 80016f4:	4b74      	ldr	r3, [pc, #464]	; (80018c8 <update_lcd+0x92c>)
 80016f6:	2206      	movs	r2, #6
 80016f8:	601a      	str	r2, [r3, #0]
							flag_ngat_keypad =1;
 80016fa:	4b74      	ldr	r3, [pc, #464]	; (80018cc <update_lcd+0x930>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
							HAL_Delay(1000);
 8001700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001704:	f003 fb1e 	bl	8004d44 <HAL_Delay>
 8001708:	e01c      	b.n	8001744 <update_lcd+0x7a8>
						} else {
							lcd_clear();
 800170a:	f007 fd75 	bl	80091f8 <lcd_clear>
							lcd_put_cur(0, 0);
 800170e:	2100      	movs	r1, #0
 8001710:	2000      	movs	r0, #0
 8001712:	f007 fd88 	bl	8009226 <lcd_put_cur>
							lcd_send_string("kh hop le");
 8001716:	486e      	ldr	r0, [pc, #440]	; (80018d0 <update_lcd+0x934>)
 8001718:	f007 fde1 	bl	80092de <lcd_send_string>
							lcd_put_cur(1, 0);
 800171c:	2100      	movs	r1, #0
 800171e:	2001      	movs	r0, #1
 8001720:	f007 fd81 	bl	8009226 <lcd_put_cur>
							lcd_send_string("moi nhap lai:");
 8001724:	486b      	ldr	r0, [pc, #428]	; (80018d4 <update_lcd+0x938>)
 8001726:	f007 fdda 	bl	80092de <lcd_send_string>
							flag_chuyen_lcd =1;
 800172a:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <update_lcd+0x928>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
							count_state_lcd =5;
 8001730:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <update_lcd+0x92c>)
 8001732:	2205      	movs	r2, #5
 8001734:	601a      	str	r2, [r3, #0]
							flag_ngat_keypad =1;
 8001736:	4b65      	ldr	r3, [pc, #404]	; (80018cc <update_lcd+0x930>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]
							HAL_Delay(1000);
 800173c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001740:	f003 fb00 	bl	8004d44 <HAL_Delay>
						}
						for(int i=0;i<sizeof(data_qtr);i++)
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	e007      	b.n	800175a <update_lcd+0x7be>
							data_qtr[i] =0;
 800174a:	4a54      	ldr	r2, [pc, #336]	; (800189c <update_lcd+0x900>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4413      	add	r3, r2
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
						for(int i=0;i<sizeof(data_qtr);i++)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	3301      	adds	r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d9f4      	bls.n	800174a <update_lcd+0x7ae>
					break;
 8001760:	bf00      	nop
				}
				count_input_quang_tro++;
 8001762:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <update_lcd+0x8fc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	3301      	adds	r3, #1
 8001768:	4a4b      	ldr	r2, [pc, #300]	; (8001898 <update_lcd+0x8fc>)
 800176a:	6013      	str	r3, [r2, #0]
				break;
 800176c:	e127      	b.n	80019be <update_lcd+0xa22>
			}
			case 6:
			{
				if(flag_chuyen_lcd)
 800176e:	4b55      	ldr	r3, [pc, #340]	; (80018c4 <update_lcd+0x928>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d013      	beq.n	800179e <update_lcd+0x802>
				{
					flag_chuyen_lcd=0;
 8001776:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <update_lcd+0x928>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
					lcd_clear();
 800177c:	f007 fd3c 	bl	80091f8 <lcd_clear>
					lcd_put_cur(0, 0);
 8001780:	2100      	movs	r1, #0
 8001782:	2000      	movs	r0, #0
 8001784:	f007 fd4f 	bl	8009226 <lcd_put_cur>
					lcd_send_string("Set Nhiet do:");
 8001788:	4853      	ldr	r0, [pc, #332]	; (80018d8 <update_lcd+0x93c>)
 800178a:	f007 fda8 	bl	80092de <lcd_send_string>
					lcd_put_cur(1, 0);
 800178e:	2100      	movs	r1, #0
 8001790:	2001      	movs	r0, #1
 8001792:	f007 fd48 	bl	8009226 <lcd_put_cur>
					count_input_quang_tro=0;
 8001796:	4b40      	ldr	r3, [pc, #256]	; (8001898 <update_lcd+0x8fc>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
					break;
 800179c:	e10f      	b.n	80019be <update_lcd+0xa22>
				}
				switch(flag_number)
 800179e:	4b4f      	ldr	r3, [pc, #316]	; (80018dc <update_lcd+0x940>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b0b      	cmp	r3, #11
 80017a4:	f200 8104 	bhi.w	80019b0 <update_lcd+0xa14>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <update_lcd+0x814>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017e1 	.word	0x080017e1
 80017b4:	080017f3 	.word	0x080017f3
 80017b8:	08001805 	.word	0x08001805
 80017bc:	08001817 	.word	0x08001817
 80017c0:	08001829 	.word	0x08001829
 80017c4:	0800183b 	.word	0x0800183b
 80017c8:	0800184d 	.word	0x0800184d
 80017cc:	0800185f 	.word	0x0800185f
 80017d0:	08001871 	.word	0x08001871
 80017d4:	08001883 	.word	0x08001883
 80017d8:	080019b1 	.word	0x080019b1
 80017dc:	080018e9 	.word	0x080018e9
				{
					case 0:
						lcd_send_string("0");
 80017e0:	483f      	ldr	r0, [pc, #252]	; (80018e0 <update_lcd+0x944>)
 80017e2:	f007 fd7c 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 0;
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <update_lcd+0x8fc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a2c      	ldr	r2, [pc, #176]	; (800189c <update_lcd+0x900>)
 80017ec:	2100      	movs	r1, #0
 80017ee:	54d1      	strb	r1, [r2, r3]
					break;
 80017f0:	e0de      	b.n	80019b0 <update_lcd+0xa14>
					case 1:
						lcd_send_string("1");
 80017f2:	483c      	ldr	r0, [pc, #240]	; (80018e4 <update_lcd+0x948>)
 80017f4:	f007 fd73 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 1;
 80017f8:	4b27      	ldr	r3, [pc, #156]	; (8001898 <update_lcd+0x8fc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a27      	ldr	r2, [pc, #156]	; (800189c <update_lcd+0x900>)
 80017fe:	2101      	movs	r1, #1
 8001800:	54d1      	strb	r1, [r2, r3]
					break;
 8001802:	e0d5      	b.n	80019b0 <update_lcd+0xa14>
					case 2:
						lcd_send_string("2");
 8001804:	4823      	ldr	r0, [pc, #140]	; (8001894 <update_lcd+0x8f8>)
 8001806:	f007 fd6a 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 2;
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <update_lcd+0x8fc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a23      	ldr	r2, [pc, #140]	; (800189c <update_lcd+0x900>)
 8001810:	2102      	movs	r1, #2
 8001812:	54d1      	strb	r1, [r2, r3]
					break;
 8001814:	e0cc      	b.n	80019b0 <update_lcd+0xa14>
					case 3:
						lcd_send_string("3");
 8001816:	4822      	ldr	r0, [pc, #136]	; (80018a0 <update_lcd+0x904>)
 8001818:	f007 fd61 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] =3;
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <update_lcd+0x8fc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1e      	ldr	r2, [pc, #120]	; (800189c <update_lcd+0x900>)
 8001822:	2103      	movs	r1, #3
 8001824:	54d1      	strb	r1, [r2, r3]
					break;
 8001826:	e0c3      	b.n	80019b0 <update_lcd+0xa14>
					case 4:
						lcd_send_string("4");
 8001828:	481e      	ldr	r0, [pc, #120]	; (80018a4 <update_lcd+0x908>)
 800182a:	f007 fd58 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 4;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <update_lcd+0x8fc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1a      	ldr	r2, [pc, #104]	; (800189c <update_lcd+0x900>)
 8001834:	2104      	movs	r1, #4
 8001836:	54d1      	strb	r1, [r2, r3]
					break;
 8001838:	e0ba      	b.n	80019b0 <update_lcd+0xa14>
					case 5:
						lcd_send_string("5");
 800183a:	481b      	ldr	r0, [pc, #108]	; (80018a8 <update_lcd+0x90c>)
 800183c:	f007 fd4f 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 5;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <update_lcd+0x8fc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a15      	ldr	r2, [pc, #84]	; (800189c <update_lcd+0x900>)
 8001846:	2105      	movs	r1, #5
 8001848:	54d1      	strb	r1, [r2, r3]
					break;
 800184a:	e0b1      	b.n	80019b0 <update_lcd+0xa14>
					case 6:
						lcd_send_string("6");
 800184c:	4817      	ldr	r0, [pc, #92]	; (80018ac <update_lcd+0x910>)
 800184e:	f007 fd46 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 6;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <update_lcd+0x8fc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a11      	ldr	r2, [pc, #68]	; (800189c <update_lcd+0x900>)
 8001858:	2106      	movs	r1, #6
 800185a:	54d1      	strb	r1, [r2, r3]
					break;
 800185c:	e0a8      	b.n	80019b0 <update_lcd+0xa14>
					case 7:
						lcd_send_string("7");
 800185e:	4814      	ldr	r0, [pc, #80]	; (80018b0 <update_lcd+0x914>)
 8001860:	f007 fd3d 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 7;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <update_lcd+0x8fc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0c      	ldr	r2, [pc, #48]	; (800189c <update_lcd+0x900>)
 800186a:	2107      	movs	r1, #7
 800186c:	54d1      	strb	r1, [r2, r3]
					break;
 800186e:	e09f      	b.n	80019b0 <update_lcd+0xa14>
					case 8:
						lcd_send_string("8");
 8001870:	4810      	ldr	r0, [pc, #64]	; (80018b4 <update_lcd+0x918>)
 8001872:	f007 fd34 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 8;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <update_lcd+0x8fc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <update_lcd+0x900>)
 800187c:	2108      	movs	r1, #8
 800187e:	54d1      	strb	r1, [r2, r3]
					break;
 8001880:	e096      	b.n	80019b0 <update_lcd+0xa14>
					case 9:
						lcd_send_string("9");
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <update_lcd+0x91c>)
 8001884:	f007 fd2b 	bl	80092de <lcd_send_string>
						data_qtr[count_input_quang_tro] = 9;
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <update_lcd+0x8fc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a03      	ldr	r2, [pc, #12]	; (800189c <update_lcd+0x900>)
 800188e:	2109      	movs	r1, #9
 8001890:	54d1      	strb	r1, [r2, r3]
					break;
 8001892:	e08d      	b.n	80019b0 <update_lcd+0xa14>
 8001894:	0800a768 	.word	0x0800a768
 8001898:	20000bf8 	.word	0x20000bf8
 800189c:	20000be8 	.word	0x20000be8
 80018a0:	0800a76c 	.word	0x0800a76c
 80018a4:	0800a770 	.word	0x0800a770
 80018a8:	0800a774 	.word	0x0800a774
 80018ac:	0800a778 	.word	0x0800a778
 80018b0:	0800a77c 	.word	0x0800a77c
 80018b4:	0800a780 	.word	0x0800a780
 80018b8:	0800a784 	.word	0x0800a784
 80018bc:	0800a788 	.word	0x0800a788
 80018c0:	20000218 	.word	0x20000218
 80018c4:	20000234 	.word	0x20000234
 80018c8:	2000022c 	.word	0x2000022c
 80018cc:	20000230 	.word	0x20000230
 80018d0:	0800a78c 	.word	0x0800a78c
 80018d4:	0800a798 	.word	0x0800a798
 80018d8:	0800a7b4 	.word	0x0800a7b4
 80018dc:	20000afc 	.word	0x20000afc
 80018e0:	0800a704 	.word	0x0800a704
 80018e4:	0800a764 	.word	0x0800a764
					case 11:
						if(arr_to_int1(data_qtr,strlen(data_qtr)) <= 100 && arr_to_int1(data_qtr,strlen(data_qtr)) >=0)
 80018e8:	4837      	ldr	r0, [pc, #220]	; (80019c8 <update_lcd+0xa2c>)
 80018ea:	f7fe fc39 	bl	8000160 <strlen>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4835      	ldr	r0, [pc, #212]	; (80019c8 <update_lcd+0xa2c>)
 80018f4:	f7fe fc3c 	bl	8000170 <arr_to_int1>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	dc2c      	bgt.n	8001958 <update_lcd+0x9bc>
 80018fe:	4832      	ldr	r0, [pc, #200]	; (80019c8 <update_lcd+0xa2c>)
 8001900:	f7fe fc2e 	bl	8000160 <strlen>
 8001904:	4603      	mov	r3, r0
 8001906:	4619      	mov	r1, r3
 8001908:	482f      	ldr	r0, [pc, #188]	; (80019c8 <update_lcd+0xa2c>)
 800190a:	f7fe fc31 	bl	8000170 <arr_to_int1>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	db21      	blt.n	8001958 <update_lcd+0x9bc>
						{
							lcd_clear();
 8001914:	f007 fc70 	bl	80091f8 <lcd_clear>
							lcd_put_cur(0, 0);
 8001918:	2100      	movs	r1, #0
 800191a:	2000      	movs	r0, #0
 800191c:	f007 fc83 	bl	8009226 <lcd_put_cur>
							lcd_send_string("OK");
 8001920:	482a      	ldr	r0, [pc, #168]	; (80019cc <update_lcd+0xa30>)
 8001922:	f007 fcdc 	bl	80092de <lcd_send_string>
							nguong_nhiet_do = arr_to_int1(data_qtr,strlen(data_qtr));
 8001926:	4828      	ldr	r0, [pc, #160]	; (80019c8 <update_lcd+0xa2c>)
 8001928:	f7fe fc1a 	bl	8000160 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	4619      	mov	r1, r3
 8001930:	4825      	ldr	r0, [pc, #148]	; (80019c8 <update_lcd+0xa2c>)
 8001932:	f7fe fc1d 	bl	8000170 <arr_to_int1>
 8001936:	4603      	mov	r3, r0
 8001938:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <update_lcd+0xa34>)
 800193a:	6013      	str	r3, [r2, #0]
							flag_chuyen_lcd =1;
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <update_lcd+0xa38>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]
							count_state_lcd =7;
 8001942:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <update_lcd+0xa3c>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
							flag_ngat_keypad =1;
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <update_lcd+0xa40>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]
							HAL_Delay(1000);
 800194e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001952:	f003 f9f7 	bl	8004d44 <HAL_Delay>
 8001956:	e01c      	b.n	8001992 <update_lcd+0x9f6>
						} else {
							lcd_clear();
 8001958:	f007 fc4e 	bl	80091f8 <lcd_clear>
							lcd_put_cur(0, 0);
 800195c:	2100      	movs	r1, #0
 800195e:	2000      	movs	r0, #0
 8001960:	f007 fc61 	bl	8009226 <lcd_put_cur>
							lcd_send_string("kh hop le");
 8001964:	481e      	ldr	r0, [pc, #120]	; (80019e0 <update_lcd+0xa44>)
 8001966:	f007 fcba 	bl	80092de <lcd_send_string>
							lcd_put_cur(1, 0);
 800196a:	2100      	movs	r1, #0
 800196c:	2001      	movs	r0, #1
 800196e:	f007 fc5a 	bl	8009226 <lcd_put_cur>
							lcd_send_string("moi nhap lai:");
 8001972:	481c      	ldr	r0, [pc, #112]	; (80019e4 <update_lcd+0xa48>)
 8001974:	f007 fcb3 	bl	80092de <lcd_send_string>
							flag_chuyen_lcd =1;
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <update_lcd+0xa38>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]
							count_state_lcd =6;
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <update_lcd+0xa3c>)
 8001980:	2206      	movs	r2, #6
 8001982:	601a      	str	r2, [r3, #0]
							flag_ngat_keypad =1;
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <update_lcd+0xa40>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]
							HAL_Delay(1000);
 800198a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800198e:	f003 f9d9 	bl	8004d44 <HAL_Delay>
						}
						for(int i=0;i<sizeof(data_qtr);i++)
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	e007      	b.n	80019a8 <update_lcd+0xa0c>
							data_qtr[i] =0;
 8001998:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <update_lcd+0xa2c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
						for(int i=0;i<sizeof(data_qtr);i++)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3301      	adds	r3, #1
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b0f      	cmp	r3, #15
 80019ac:	d9f4      	bls.n	8001998 <update_lcd+0x9fc>
					break;
 80019ae:	bf00      	nop
				}
				count_input_quang_tro++;
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <update_lcd+0xa4c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3301      	adds	r3, #1
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <update_lcd+0xa4c>)
 80019b8:	6013      	str	r3, [r2, #0]
				break;
 80019ba:	e000      	b.n	80019be <update_lcd+0xa22>
				break;
 80019bc:	bf00      	nop
			}
		}
	}
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000be8 	.word	0x20000be8
 80019cc:	0800a788 	.word	0x0800a788
 80019d0:	2000021c 	.word	0x2000021c
 80019d4:	20000234 	.word	0x20000234
 80019d8:	2000022c 	.word	0x2000022c
 80019dc:	20000230 	.word	0x20000230
 80019e0:	0800a78c 	.word	0x0800a78c
 80019e4:	0800a798 	.word	0x0800a798
 80019e8:	20000bf8 	.word	0x20000bf8

080019ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f0:	f003 f946 	bl	8004c80 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f4:	f000 f8c8 	bl	8001b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f8:	f000 fb4a 	bl	8002090 <MX_GPIO_Init>
  MX_DMA_Init();
 80019fc:	f000 fb2a 	bl	8002054 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a00:	f000 f91a 	bl	8001c38 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a04:	f000 f956 	bl	8001cb4 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001a08:	f000 f992 	bl	8001d30 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001a0c:	f000 f9be 	bl	8001d8c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a10:	f000 fa0e 	bl	8001e30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a14:	f000 fa58 	bl	8001ec8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a18:	f000 faa4 	bl	8001f64 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001a1c:	f000 faf0 	bl	8002000 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001a20:	2007      	movs	r0, #7
 8001a22:	f003 ff04 	bl	800582e <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001a26:	4843      	ldr	r0, [pc, #268]	; (8001b34 <main+0x148>)
 8001a28:	f005 fe92 	bl	8007750 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 8001a2c:	4842      	ldr	r0, [pc, #264]	; (8001b38 <main+0x14c>)
 8001a2e:	f005 fe8f 	bl	8007750 <HAL_TIM_Base_Stop_IT>
	//  HAL_UART_Receive_IT(&huart1, dataRX, 1);
	HAL_UART_Receive_DMA(&huart1, data_RX, sizeof(data_RX));
 8001a32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a36:	4941      	ldr	r1, [pc, #260]	; (8001b3c <main+0x150>)
 8001a38:	4841      	ldr	r0, [pc, #260]	; (8001b40 <main+0x154>)
 8001a3a:	f006 fae6 	bl	800800a <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim4);
 8001a3e:	4841      	ldr	r0, [pc, #260]	; (8001b44 <main+0x158>)
 8001a40:	f005 fe34 	bl	80076ac <HAL_TIM_Base_Start_IT>
	lcd_init();
 8001a44:	f007 fc0e 	bl	8009264 <lcd_init>
	lcd_clear();
 8001a48:	f007 fbd6 	bl	80091f8 <lcd_clear>
	lcd_put_cur(0, 3);
 8001a4c:	2103      	movs	r1, #3
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f007 fbe9 	bl	8009226 <lcd_put_cur>
	lcd_send_string("HELLO LCD");
 8001a54:	483c      	ldr	r0, [pc, #240]	; (8001b48 <main+0x15c>)
 8001a56:	f007 fc42 	bl	80092de <lcd_send_string>
	init_sim();
 8001a5a:	f7fe ff0d 	bl	8000878 <init_sim>
	HAL_TIM_Base_Start_IT(&htim1);
 8001a5e:	483b      	ldr	r0, [pc, #236]	; (8001b4c <main+0x160>)
 8001a60:	f005 fe24 	bl	80076ac <HAL_TIM_Base_Start_IT>
		//	  flag_check_OK =0;
		//	  flag_pass_all_RX_PAYLOAD = 0;
		//	  HAL_UART_Transmit(&huart1, data_SIM10, strlen(data_SIM10), 10);
		//	  HAL_Delay(100);
		//	  HAL_UART_Transmit(&huart1, data_SIM11, strlen(data_SIM11), 10);
		update();
 8001a64:	f7ff f942 	bl	8000cec <update>


		update();
 8001a68:	f7ff f940 	bl	8000cec <update>
		update_lcd();
 8001a6c:	f7ff fa96 	bl	8000f9c <update_lcd>

		if (flag_send_data) {
 8001a70:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <main+0x164>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f5      	beq.n	8001a64 <main+0x78>
			flag_send_data = 0;
 8001a78:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <main+0x164>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
			doc_dht11();
 8001a7e:	f002 fd97 	bl	80045b0 <doc_dht11>
			HAL_Delay(10);
 8001a82:	200a      	movs	r0, #10
 8001a84:	f003 f95e 	bl	8004d44 <HAL_Delay>
			xu_ly_tick_dht11(tick, data_dht11);
 8001a88:	4932      	ldr	r1, [pc, #200]	; (8001b54 <main+0x168>)
 8001a8a:	4833      	ldr	r0, [pc, #204]	; (8001b58 <main+0x16c>)
 8001a8c:	f002 fd38 	bl	8004500 <xu_ly_tick_dht11>

			sprintf(nhiet_do, "Nhiet do: %d.%doC", data_dht11[2], data_dht11[3]);
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <main+0x168>)
 8001a92:	789b      	ldrb	r3, [r3, #2]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <main+0x168>)
 8001a98:	78db      	ldrb	r3, [r3, #3]
 8001a9a:	4930      	ldr	r1, [pc, #192]	; (8001b5c <main+0x170>)
 8001a9c:	4830      	ldr	r0, [pc, #192]	; (8001b60 <main+0x174>)
 8001a9e:	f007 fc33 	bl	8009308 <siprintf>
			sprintf(do_am, "Do am:  %d.%d ", data_dht11[0], data_dht11[1]);
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <main+0x168>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <main+0x168>)
 8001aaa:	785b      	ldrb	r3, [r3, #1]
 8001aac:	492d      	ldr	r1, [pc, #180]	; (8001b64 <main+0x178>)
 8001aae:	482e      	ldr	r0, [pc, #184]	; (8001b68 <main+0x17c>)
 8001ab0:	f007 fc2a 	bl	8009308 <siprintf>
			HAL_ADC_Start(&hadc1);
 8001ab4:	482d      	ldr	r0, [pc, #180]	; (8001b6c <main+0x180>)
 8001ab6:	f003 fa41 	bl	8004f3c <HAL_ADC_Start>
			HAL_Delay(50);
 8001aba:	2032      	movs	r0, #50	; 0x32
 8001abc:	f003 f942 	bl	8004d44 <HAL_Delay>
			HAL_ADC_Start(&hadc2);
 8001ac0:	482b      	ldr	r0, [pc, #172]	; (8001b70 <main+0x184>)
 8001ac2:	f003 fa3b 	bl	8004f3c <HAL_ADC_Start>
			HAL_Delay(50);
 8001ac6:	2032      	movs	r0, #50	; 0x32
 8001ac8:	f003 f93c 	bl	8004d44 <HAL_Delay>
			adc_quang_tro = HAL_ADC_GetValue(&hadc1);  // đ ?c adc quang trở
 8001acc:	4827      	ldr	r0, [pc, #156]	; (8001b6c <main+0x180>)
 8001ace:	f003 fb0f 	bl	80050f0 <HAL_ADC_GetValue>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <main+0x188>)
 8001ad8:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8001ada:	2032      	movs	r0, #50	; 0x32
 8001adc:	f003 f932 	bl	8004d44 <HAL_Delay>
			adc_do_am_dat = HAL_ADC_GetValue(&hadc2);
 8001ae0:	4823      	ldr	r0, [pc, #140]	; (8001b70 <main+0x184>)
 8001ae2:	f003 fb05 	bl	80050f0 <HAL_ADC_GetValue>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <main+0x18c>)
 8001aec:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8001aee:	2032      	movs	r0, #50	; 0x32
 8001af0:	f003 f928 	bl	8004d44 <HAL_Delay>
			HAL_ADC_Stop(&hadc1);
 8001af4:	481d      	ldr	r0, [pc, #116]	; (8001b6c <main+0x180>)
 8001af6:	f003 facf 	bl	8005098 <HAL_ADC_Stop>
			HAL_ADC_Stop(&hadc2);
 8001afa:	481d      	ldr	r0, [pc, #116]	; (8001b70 <main+0x184>)
 8001afc:	f003 facc 	bl	8005098 <HAL_ADC_Stop>
			//			HAL_NVIC_DisableIRQ(EXTI2_IRQn);
			//			HAL_NVIC_DisableIRQ(EXTI3_IRQn);
			//			HAL_NVIC_DisableIRQ(EXTI4_IRQn);
			//			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			update();
 8001b00:	f7ff f8f4 	bl	8000cec <update>
			update_lcd();
 8001b04:	f7ff fa4a 	bl	8000f9c <update_lcd>
			if (FLAG_CHECK_SEND_DATA == 0)
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <main+0x190>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10b      	bne.n	8001b28 <main+0x13c>
			{
				count_check ++;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <main+0x194>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	4a1a      	ldr	r2, [pc, #104]	; (8001b80 <main+0x194>)
 8001b18:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1e:	4819      	ldr	r0, [pc, #100]	; (8001b84 <main+0x198>)
 8001b20:	f004 fbb1 	bl	8006286 <HAL_GPIO_TogglePin>
//				init_sim();
				send_data_to_server();
 8001b24:	f7fe fbfc 	bl	8000320 <send_data_to_server>
			}
			update();
 8001b28:	f7ff f8e0 	bl	8000cec <update>
			update_lcd();
 8001b2c:	f7ff fa36 	bl	8000f9c <update_lcd>
		update();
 8001b30:	e798      	b.n	8001a64 <main+0x78>
 8001b32:	bf00      	nop
 8001b34:	200003c0 	.word	0x200003c0
 8001b38:	20000408 	.word	0x20000408
 8001b3c:	20000524 	.word	0x20000524
 8001b40:	20000498 	.word	0x20000498
 8001b44:	20000450 	.word	0x20000450
 8001b48:	0800a7c4 	.word	0x0800a7c4
 8001b4c:	20000378 	.word	0x20000378
 8001b50:	20000af8 	.word	0x20000af8
 8001b54:	20000ab4 	.word	0x20000ab4
 8001b58:	20000a50 	.word	0x20000a50
 8001b5c:	0800a7d0 	.word	0x0800a7d0
 8001b60:	20000ac8 	.word	0x20000ac8
 8001b64:	0800a7e4 	.word	0x0800a7e4
 8001b68:	20000adc 	.word	0x20000adc
 8001b6c:	200002c4 	.word	0x200002c4
 8001b70:	200002f4 	.word	0x200002f4
 8001b74:	20000af0 	.word	0x20000af0
 8001b78:	20000af4 	.word	0x20000af4
 8001b7c:	20000bc8 	.word	0x20000bc8
 8001b80:	20000bfc 	.word	0x20000bfc
 8001b84:	40011000 	.word	0x40011000

08001b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b094      	sub	sp, #80	; 0x50
 8001b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b92:	2228      	movs	r2, #40	; 0x28
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f007 fc02 	bl	80093a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bc0:	2310      	movs	r3, #16
 8001bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001bcc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f005 f852 	bl	8006c80 <HAL_RCC_OscConfig>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001be2:	f002 fd43 	bl	800466c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be6:	230f      	movs	r3, #15
 8001be8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2102      	movs	r1, #2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f005 fabe 	bl	8007184 <HAL_RCC_ClockConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001c0e:	f002 fd2d 	bl	800466c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c12:	2302      	movs	r3, #2
 8001c14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c1a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f005 fc3e 	bl	80074a0 <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c2a:	f002 fd1f 	bl	800466c <Error_Handler>
  }
}
 8001c2e:	bf00      	nop
 8001c30:	3750      	adds	r7, #80	; 0x50
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <MX_ADC1_Init+0x74>)
 8001c4a:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <MX_ADC1_Init+0x78>)
 8001c4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <MX_ADC1_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <MX_ADC1_Init+0x74>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <MX_ADC1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_ADC1_Init+0x74>)
 8001c62:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_ADC1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_ADC1_Init+0x74>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c74:	480d      	ldr	r0, [pc, #52]	; (8001cac <MX_ADC1_Init+0x74>)
 8001c76:	f003 f889 	bl	8004d8c <HAL_ADC_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c80:	f002 fcf4 	bl	800466c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001c84:	2306      	movs	r3, #6
 8001c86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_ADC1_Init+0x74>)
 8001c96:	f003 fb09 	bl	80052ac <HAL_ADC_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001ca0:	f002 fce4 	bl	800466c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200002c4 	.word	0x200002c4
 8001cb0:	40012400 	.word	0x40012400

08001cb4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_ADC2_Init+0x74>)
 8001cc6:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <MX_ADC2_Init+0x78>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <MX_ADC2_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <MX_ADC2_Init+0x74>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <MX_ADC2_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <MX_ADC2_Init+0x74>)
 8001cde:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ce2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <MX_ADC2_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <MX_ADC2_Init+0x74>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <MX_ADC2_Init+0x74>)
 8001cf2:	f003 f84b 	bl	8004d8c <HAL_ADC_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001cfc:	f002 fcb6 	bl	800466c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001d00:	2307      	movs	r3, #7
 8001d02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_ADC2_Init+0x74>)
 8001d12:	f003 facb 	bl	80052ac <HAL_ADC_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001d1c:	f002 fca6 	bl	800466c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200002f4 	.word	0x200002f4
 8001d2c:	40012800 	.word	0x40012800

08001d30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d36:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <MX_I2C1_Init+0x54>)
 8001d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d3c:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <MX_I2C1_Init+0x58>)
 8001d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d6e:	f004 fabb 	bl	80062e8 <HAL_I2C_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d78:	f002 fc78 	bl	800466c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000324 	.word	0x20000324
 8001d84:	40005400 	.word	0x40005400
 8001d88:	000186a0 	.word	0x000186a0

08001d8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d92:	f107 0308 	add.w	r3, r7, #8
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da0:	463b      	mov	r3, r7
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <MX_TIM1_Init+0x9c>)
 8001daa:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <MX_TIM1_Init+0xa0>)
 8001dac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <MX_TIM1_Init+0x9c>)
 8001db0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001db4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <MX_TIM1_Init+0x9c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_TIM1_Init+0x9c>)
 8001dbe:	f247 5230 	movw	r2, #30000	; 0x7530
 8001dc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <MX_TIM1_Init+0x9c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <MX_TIM1_Init+0x9c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <MX_TIM1_Init+0x9c>)
 8001dd2:	2280      	movs	r2, #128	; 0x80
 8001dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dd6:	4814      	ldr	r0, [pc, #80]	; (8001e28 <MX_TIM1_Init+0x9c>)
 8001dd8:	f005 fc18 	bl	800760c <HAL_TIM_Base_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001de2:	f002 fc43 	bl	800466c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	4619      	mov	r1, r3
 8001df2:	480d      	ldr	r0, [pc, #52]	; (8001e28 <MX_TIM1_Init+0x9c>)
 8001df4:	f005 fde2 	bl	80079bc <HAL_TIM_ConfigClockSource>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001dfe:	f002 fc35 	bl	800466c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4806      	ldr	r0, [pc, #24]	; (8001e28 <MX_TIM1_Init+0x9c>)
 8001e10:	f005 ffb8 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001e1a:	f002 fc27 	bl	800466c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000378 	.word	0x20000378
 8001e2c:	40012c00 	.word	0x40012c00

08001e30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	463b      	mov	r3, r7
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <MX_TIM2_Init+0x94>)
 8001e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <MX_TIM2_Init+0x94>)
 8001e56:	223f      	movs	r2, #63	; 0x3f
 8001e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <MX_TIM2_Init+0x94>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <MX_TIM2_Init+0x94>)
 8001e62:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <MX_TIM2_Init+0x94>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <MX_TIM2_Init+0x94>)
 8001e70:	2280      	movs	r2, #128	; 0x80
 8001e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e74:	4813      	ldr	r0, [pc, #76]	; (8001ec4 <MX_TIM2_Init+0x94>)
 8001e76:	f005 fbc9 	bl	800760c <HAL_TIM_Base_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e80:	f002 fbf4 	bl	800466c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <MX_TIM2_Init+0x94>)
 8001e92:	f005 fd93 	bl	80079bc <HAL_TIM_ConfigClockSource>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e9c:	f002 fbe6 	bl	800466c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_TIM2_Init+0x94>)
 8001eae:	f005 ff69 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001eb8:	f002 fbd8 	bl	800466c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200003c0 	.word	0x200003c0

08001ec8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ece:	f107 0308 	add.w	r3, r7, #8
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001edc:	463b      	mov	r3, r7
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <MX_TIM3_Init+0x94>)
 8001ee6:	4a1e      	ldr	r2, [pc, #120]	; (8001f60 <MX_TIM3_Init+0x98>)
 8001ee8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <MX_TIM3_Init+0x94>)
 8001eec:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001ef0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <MX_TIM3_Init+0x94>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001ef8:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <MX_TIM3_Init+0x94>)
 8001efa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001efe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <MX_TIM3_Init+0x94>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <MX_TIM3_Init+0x94>)
 8001f08:	2280      	movs	r2, #128	; 0x80
 8001f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f0c:	4813      	ldr	r0, [pc, #76]	; (8001f5c <MX_TIM3_Init+0x94>)
 8001f0e:	f005 fb7d 	bl	800760c <HAL_TIM_Base_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f18:	f002 fba8 	bl	800466c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	4619      	mov	r1, r3
 8001f28:	480c      	ldr	r0, [pc, #48]	; (8001f5c <MX_TIM3_Init+0x94>)
 8001f2a:	f005 fd47 	bl	80079bc <HAL_TIM_ConfigClockSource>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f34:	f002 fb9a 	bl	800466c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f40:	463b      	mov	r3, r7
 8001f42:	4619      	mov	r1, r3
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_TIM3_Init+0x94>)
 8001f46:	f005 ff1d 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f50:	f002 fb8c 	bl	800466c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000408 	.word	0x20000408
 8001f60:	40000400 	.word	0x40000400

08001f64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6a:	f107 0308 	add.w	r3, r7, #8
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <MX_TIM4_Init+0x94>)
 8001f82:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <MX_TIM4_Init+0x98>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63999;
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <MX_TIM4_Init+0x94>)
 8001f88:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001f8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <MX_TIM4_Init+0x94>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <MX_TIM4_Init+0x94>)
 8001f96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MX_TIM4_Init+0x94>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <MX_TIM4_Init+0x94>)
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fa8:	4813      	ldr	r0, [pc, #76]	; (8001ff8 <MX_TIM4_Init+0x94>)
 8001faa:	f005 fb2f 	bl	800760c <HAL_TIM_Base_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001fb4:	f002 fb5a 	bl	800466c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <MX_TIM4_Init+0x94>)
 8001fc6:	f005 fcf9 	bl	80079bc <HAL_TIM_ConfigClockSource>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001fd0:	f002 fb4c 	bl	800466c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fdc:	463b      	mov	r3, r7
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_TIM4_Init+0x94>)
 8001fe2:	f005 fecf 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001fec:	f002 fb3e 	bl	800466c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000450 	.word	0x20000450
 8001ffc:	40000800 	.word	0x40000800

08002000 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_USART1_UART_Init+0x4c>)
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <MX_USART1_UART_Init+0x50>)
 8002008:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <MX_USART1_UART_Init+0x4c>)
 800200c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002010:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_USART1_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <MX_USART1_UART_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <MX_USART1_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <MX_USART1_UART_Init+0x4c>)
 8002026:	220c      	movs	r2, #12
 8002028:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <MX_USART1_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <MX_USART1_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002036:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_USART1_UART_Init+0x4c>)
 8002038:	f005 ff14 	bl	8007e64 <HAL_UART_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002042:	f002 fb13 	bl	800466c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000498 	.word	0x20000498
 8002050:	40013800 	.word	0x40013800

08002054 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_DMA_Init+0x38>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4a0b      	ldr	r2, [pc, #44]	; (800208c <MX_DMA_Init+0x38>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6153      	str	r3, [r2, #20]
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_DMA_Init+0x38>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	200f      	movs	r0, #15
 8002078:	f003 fbaf 	bl	80057da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800207c:	200f      	movs	r0, #15
 800207e:	f003 fbc8 	bl	8005812 <HAL_NVIC_EnableIRQ>

}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	f107 0310 	add.w	r3, r7, #16
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a4:	4b70      	ldr	r3, [pc, #448]	; (8002268 <MX_GPIO_Init+0x1d8>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a6f      	ldr	r2, [pc, #444]	; (8002268 <MX_GPIO_Init+0x1d8>)
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <MX_GPIO_Init+0x1d8>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020bc:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <MX_GPIO_Init+0x1d8>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a69      	ldr	r2, [pc, #420]	; (8002268 <MX_GPIO_Init+0x1d8>)
 80020c2:	f043 0320 	orr.w	r3, r3, #32
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b67      	ldr	r3, [pc, #412]	; (8002268 <MX_GPIO_Init+0x1d8>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	4b64      	ldr	r3, [pc, #400]	; (8002268 <MX_GPIO_Init+0x1d8>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a63      	ldr	r2, [pc, #396]	; (8002268 <MX_GPIO_Init+0x1d8>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b61      	ldr	r3, [pc, #388]	; (8002268 <MX_GPIO_Init+0x1d8>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	4b5e      	ldr	r3, [pc, #376]	; (8002268 <MX_GPIO_Init+0x1d8>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a5d      	ldr	r2, [pc, #372]	; (8002268 <MX_GPIO_Init+0x1d8>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <MX_GPIO_Init+0x1d8>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800210a:	4858      	ldr	r0, [pc, #352]	; (800226c <MX_GPIO_Init+0x1dc>)
 800210c:	f004 f8a3 	bl	8006256 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	f641 0101 	movw	r1, #6145	; 0x1801
 8002116:	4856      	ldr	r0, [pc, #344]	; (8002270 <MX_GPIO_Init+0x1e0>)
 8002118:	f004 f89d 	bl	8006256 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 800211c:	2200      	movs	r2, #0
 800211e:	f243 7101 	movw	r1, #14081	; 0x3701
 8002122:	4854      	ldr	r0, [pc, #336]	; (8002274 <MX_GPIO_Init+0x1e4>)
 8002124:	f004 f897 	bl	8006256 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800212c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2302      	movs	r3, #2
 8002138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213a:	f107 0310 	add.w	r3, r7, #16
 800213e:	4619      	mov	r1, r3
 8002140:	484a      	ldr	r0, [pc, #296]	; (800226c <MX_GPIO_Init+0x1dc>)
 8002142:	f003 fe31 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 8002146:	f641 0301 	movw	r3, #6145	; 0x1801
 800214a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214c:	2301      	movs	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002150:	2301      	movs	r3, #1
 8002152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2302      	movs	r3, #2
 8002156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4619      	mov	r1, r3
 800215e:	4844      	ldr	r0, [pc, #272]	; (8002270 <MX_GPIO_Init+0x1e0>)
 8002160:	f003 fe22 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002164:	2302      	movs	r3, #2
 8002166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002168:	4b43      	ldr	r3, [pc, #268]	; (8002278 <MX_GPIO_Init+0x1e8>)
 800216a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800216c:	2301      	movs	r3, #1
 800216e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4619      	mov	r1, r3
 8002176:	483e      	ldr	r0, [pc, #248]	; (8002270 <MX_GPIO_Init+0x1e0>)
 8002178:	f003 fe16 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800217c:	233c      	movs	r3, #60	; 0x3c
 800217e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002180:	4b3e      	ldr	r3, [pc, #248]	; (800227c <MX_GPIO_Init+0x1ec>)
 8002182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002184:	2301      	movs	r3, #1
 8002186:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	4619      	mov	r1, r3
 800218e:	4838      	ldr	r0, [pc, #224]	; (8002270 <MX_GPIO_Init+0x1e0>)
 8002190:	f003 fe0a 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB12 PB13
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 8002194:	f243 7301 	movw	r3, #14081	; 0x3701
 8002198:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	2301      	movs	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800219e:	2301      	movs	r3, #1
 80021a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a6:	f107 0310 	add.w	r3, r7, #16
 80021aa:	4619      	mov	r1, r3
 80021ac:	4831      	ldr	r0, [pc, #196]	; (8002274 <MX_GPIO_Init+0x1e4>)
 80021ae:	f003 fdfb 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80021b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b8:	4b31      	ldr	r3, [pc, #196]	; (8002280 <MX_GPIO_Init+0x1f0>)
 80021ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021bc:	2301      	movs	r3, #1
 80021be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	4619      	mov	r1, r3
 80021c6:	482b      	ldr	r0, [pc, #172]	; (8002274 <MX_GPIO_Init+0x1e4>)
 80021c8:	f003 fdee 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4;
 80021cc:	f24c 0318 	movw	r3, #49176	; 0xc018
 80021d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	4619      	mov	r1, r3
 80021e0:	4824      	ldr	r0, [pc, #144]	; (8002274 <MX_GPIO_Init+0x1e4>)
 80021e2:	f003 fde1 	bl	8005da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ec:	4b24      	ldr	r3, [pc, #144]	; (8002280 <MX_GPIO_Init+0x1f0>)
 80021ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f0:	2301      	movs	r3, #1
 80021f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	4619      	mov	r1, r3
 80021fa:	481d      	ldr	r0, [pc, #116]	; (8002270 <MX_GPIO_Init+0x1e0>)
 80021fc:	f003 fdd4 	bl	8005da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 4, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	2104      	movs	r1, #4
 8002204:	2007      	movs	r0, #7
 8002206:	f003 fae8 	bl	80057da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800220a:	2007      	movs	r0, #7
 800220c:	f003 fb01 	bl	8005812 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 10, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	210a      	movs	r1, #10
 8002214:	2008      	movs	r0, #8
 8002216:	f003 fae0 	bl	80057da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800221a:	2008      	movs	r0, #8
 800221c:	f003 faf9 	bl	8005812 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 10, 0);
 8002220:	2200      	movs	r2, #0
 8002222:	210a      	movs	r1, #10
 8002224:	2009      	movs	r0, #9
 8002226:	f003 fad8 	bl	80057da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800222a:	2009      	movs	r0, #9
 800222c:	f003 faf1 	bl	8005812 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 10, 0);
 8002230:	2200      	movs	r2, #0
 8002232:	210a      	movs	r1, #10
 8002234:	200a      	movs	r0, #10
 8002236:	f003 fad0 	bl	80057da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800223a:	200a      	movs	r0, #10
 800223c:	f003 fae9 	bl	8005812 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 8, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2108      	movs	r1, #8
 8002244:	2017      	movs	r0, #23
 8002246:	f003 fac8 	bl	80057da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800224a:	2017      	movs	r0, #23
 800224c:	f003 fae1 	bl	8005812 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	210a      	movs	r1, #10
 8002254:	2028      	movs	r0, #40	; 0x28
 8002256:	f003 fac0 	bl	80057da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800225a:	2028      	movs	r0, #40	; 0x28
 800225c:	f003 fad9 	bl	8005812 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	40011000 	.word	0x40011000
 8002270:	40010800 	.word	0x40010800
 8002274:	40010c00 	.word	0x40010c00
 8002278:	10310000 	.word	0x10310000
 800227c:	10210000 	.word	0x10210000
 8002280:	10110000 	.word	0x10110000

08002284 <HAL_TIM_PeriodElapsedCallback>:
//
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b0ba      	sub	sp, #232	; 0xe8
 8002288:	af06      	add	r7, sp, #24
 800228a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a84      	ldr	r2, [pc, #528]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d121      	bne.n	80022da <HAL_TIM_PeriodElapsedCallback+0x56>
		//		send_data_to_server();
		flag_send_data = 1;
 8002296:	4b84      	ldr	r3, [pc, #528]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]
		du_time_to_send_data = 1;
 800229c:	4b83      	ldr	r3, [pc, #524]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x228>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
		if (flag_di_qua_nhap_mat_khau == 1) {
 80022a2:	4b83      	ldr	r3, [pc, #524]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d117      	bne.n	80022da <HAL_TIM_PeriodElapsedCallback+0x56>
			count_timer1++;
 80022aa:	4b82      	ldr	r3, [pc, #520]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3301      	adds	r3, #1
 80022b0:	4a80      	ldr	r2, [pc, #512]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80022b2:	6013      	str	r3, [r2, #0]
			if (count_timer1 > 150) {
 80022b4:	4b7f      	ldr	r3, [pc, #508]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b96      	cmp	r3, #150	; 0x96
 80022ba:	dd0e      	ble.n	80022da <HAL_TIM_PeriodElapsedCallback+0x56>
				flag_di_qua_nhap_mat_khau = 0;
 80022bc:	4b7c      	ldr	r3, [pc, #496]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
				count_state_lcd = 1;
 80022c2:	4b7d      	ldr	r3, [pc, #500]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
				count_timer1 = 0;
 80022c8:	4b7a      	ldr	r3, [pc, #488]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
				flag_ngat_keypad = 1;
 80022ce:	4b7b      	ldr	r3, [pc, #492]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x238>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
				flag_chuyen_lcd = 1;
 80022d4:	4b7a      	ldr	r3, [pc, #488]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if (htim->Instance == TIM2) {
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d108      	bne.n	80022f6 <HAL_TIM_PeriodElapsedCallback+0x72>
		count++;
 80022e4:	4b77      	ldr	r3, [pc, #476]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	1c54      	adds	r4, r2, #1
 80022ec:	f143 0500 	adc.w	r5, r3, #0
 80022f0:	4b74      	ldr	r3, [pc, #464]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80022f2:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim->Instance == TIM3) {
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a73      	ldr	r2, [pc, #460]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	f040 81f3 	bne.w	80026e8 <HAL_TIM_PeriodElapsedCallback+0x464>
		if (flag_ngat_uart == 1) {
 8002302:	4b72      	ldr	r3, [pc, #456]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d105      	bne.n	8002316 <HAL_TIM_PeriodElapsedCallback+0x92>
			flag_ngat_uart = 0;
 800230a:	4b70      	ldr	r3, [pc, #448]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x248>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
			//			flag_send_data = 1;
			HAL_TIM_Base_Stop_IT(&htim3);
 8002310:	486f      	ldr	r0, [pc, #444]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002312:	f005 fa1d 	bl	8007750 <HAL_TIM_Base_Stop_IT>
		}
		if (flag_ngat_nut_nhan == 1) {
 8002316:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	f040 81e4 	bne.w	80026e8 <HAL_TIM_PeriodElapsedCallback+0x464>
			flag_ngat_nut_nhan = 0;
 8002320:	4b6c      	ldr	r3, [pc, #432]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
			switch (flag_switch_timer3) {
 8002326:	4b6c      	ldr	r3, [pc, #432]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3b01      	subs	r3, #1
 800232c:	2b05      	cmp	r3, #5
 800232e:	f200 81d8 	bhi.w	80026e2 <HAL_TIM_PeriodElapsedCallback+0x45e>
 8002332:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	08002351 	.word	0x08002351
 800233c:	080023ff 	.word	0x080023ff
 8002340:	08002539 	.word	0x08002539
 8002344:	080025dd 	.word	0x080025dd
 8002348:	08002695 	.word	0x08002695
 800234c:	080026b9 	.word	0x080026b9
				case 1: {
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1) {
 8002350:	2104      	movs	r1, #4
 8002352:	4862      	ldr	r0, [pc, #392]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002354:	f003 ff68 	bl	8006228 <HAL_GPIO_ReadPin>
 8002358:	4603      	mov	r3, r0
 800235a:	2b01      	cmp	r3, #1
 800235c:	d135      	bne.n	80023ca <HAL_TIM_PeriodElapsedCallback+0x146>
						num1 = num1_state1;
 800235e:	4b60      	ldr	r3, [pc, #384]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a60      	ldr	r2, [pc, #384]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002364:	6013      	str	r3, [r2, #0]
						num2 = num2_state1;
 8002366:	4b60      	ldr	r3, [pc, #384]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a60      	ldr	r2, [pc, #384]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x268>)
 800236c:	6013      	str	r3, [r2, #0]
						num3 = num3_state1;
 800236e:	4b60      	ldr	r3, [pc, #384]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a60      	ldr	r2, [pc, #384]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002374:	6013      	str	r3, [r2, #0]
						led = led_state1;
 8002376:	4b60      	ldr	r3, [pc, #384]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a60      	ldr	r2, [pc, #384]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800237c:	6013      	str	r3, [r2, #0]
						flag_number = flag_number_state1;
 800237e:	4b60      	ldr	r3, [pc, #384]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a60      	ldr	r2, [pc, #384]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002384:	6013      	str	r3, [r2, #0]
						flag_ngat_keypad = 1;
 8002386:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]
						state_ngat2 = 0;
 800238c:	4b5e      	ldr	r3, [pc, #376]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
						state_ngat1 = 1;
 8002392:	4b5e      	ldr	r3, [pc, #376]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]
						flag_start_button = 1;
 8002398:	4b5d      	ldr	r3, [pc, #372]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]
						GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
						GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023ac:	2304      	movs	r3, #4
 80023ae:	67fb      	str	r3, [r7, #124]	; 0x7c
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023b0:	4b58      	ldr	r3, [pc, #352]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80023b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023c0:	4619      	mov	r1, r3
 80023c2:	4846      	ldr	r0, [pc, #280]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 80023c4:	f003 fcf0 	bl	8005da8 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = GPIO_PIN_2;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
						GPIO_InitStruct.Pull = GPIO_PULLUP;
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
					}
					break;
 80023c8:	e18b      	b.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x45e>
						state_ngat2 = 0;
 80023ca:	4b4f      	ldr	r3, [pc, #316]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
						state_ngat1 = 1;
 80023d0:	4b4e      	ldr	r3, [pc, #312]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x288>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
						GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	60da      	str	r2, [r3, #12]
						GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023e4:	2304      	movs	r3, #4
 80023e6:	66fb      	str	r3, [r7, #108]	; 0x6c
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023e8:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80023ea:	673b      	str	r3, [r7, #112]	; 0x70
						GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ec:	2301      	movs	r3, #1
 80023ee:	677b      	str	r3, [r7, #116]	; 0x74
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023f4:	4619      	mov	r1, r3
 80023f6:	4839      	ldr	r0, [pc, #228]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 80023f8:	f003 fcd6 	bl	8005da8 <HAL_GPIO_Init>
					break;
 80023fc:	e171      	b.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x45e>
				}
				case 2: {
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 80023fe:	2108      	movs	r1, #8
 8002400:	4836      	ldr	r0, [pc, #216]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002402:	f003 ff11 	bl	8006228 <HAL_GPIO_ReadPin>
 8002406:	4603      	mov	r3, r0
 8002408:	2b01      	cmp	r3, #1
 800240a:	d130      	bne.n	800246e <HAL_TIM_PeriodElapsedCallback+0x1ea>
						num4 = num4_state1;
 800240c:	4b42      	ldr	r3, [pc, #264]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a42      	ldr	r2, [pc, #264]	; (800251c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002412:	6013      	str	r3, [r2, #0]
						num5 = num5_state1;
 8002414:	4b42      	ldr	r3, [pc, #264]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a42      	ldr	r2, [pc, #264]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800241a:	6013      	str	r3, [r2, #0]
						num6 = num6_state1;
 800241c:	4b42      	ldr	r3, [pc, #264]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a42      	ldr	r2, [pc, #264]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002422:	6013      	str	r3, [r2, #0]
						quat = quat_state1;
 8002424:	4b42      	ldr	r3, [pc, #264]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a42      	ldr	r2, [pc, #264]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800242a:	6013      	str	r3, [r2, #0]
						flag_number = flag_number_state1;
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a34      	ldr	r2, [pc, #208]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002432:	6013      	str	r3, [r2, #0]
						flag_ngat_keypad = 1;
 8002434:	4b21      	ldr	r3, [pc, #132]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]
						state_ngat2 = 0;
 800243a:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
						state_ngat1 = 1;
 8002440:	4b32      	ldr	r3, [pc, #200]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]
						GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002446:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
						GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002454:	2308      	movs	r3, #8
 8002456:	65fb      	str	r3, [r7, #92]	; 0x5c
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002458:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800245a:	663b      	str	r3, [r7, #96]	; 0x60
						GPIO_InitStruct.Pull = GPIO_PULLUP;
 800245c:	2301      	movs	r3, #1
 800245e:	667b      	str	r3, [r7, #100]	; 0x64
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002464:	4619      	mov	r1, r3
 8002466:	481d      	ldr	r0, [pc, #116]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002468:	f003 fc9e 	bl	8005da8 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = GPIO_PIN_3;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
						GPIO_InitStruct.Pull = GPIO_PULLUP;
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
					}
					break;
 800246c:	e139      	b.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x45e>
						state_ngat2 = 0;
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
						state_ngat1 = 1;
 8002474:	4b25      	ldr	r3, [pc, #148]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]
						GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
						GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002488:	2308      	movs	r3, #8
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800248e:	653b      	str	r3, [r7, #80]	; 0x50
						GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002490:	2301      	movs	r3, #1
 8002492:	657b      	str	r3, [r7, #84]	; 0x54
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002498:	4619      	mov	r1, r3
 800249a:	4810      	ldr	r0, [pc, #64]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 800249c:	f003 fc84 	bl	8005da8 <HAL_GPIO_Init>
					break;
 80024a0:	e11f      	b.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x45e>
 80024a2:	bf00      	nop
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	20000af8 	.word	0x20000af8
 80024ac:	200009e8 	.word	0x200009e8
 80024b0:	20000b60 	.word	0x20000b60
 80024b4:	20000bb8 	.word	0x20000bb8
 80024b8:	2000022c 	.word	0x2000022c
 80024bc:	20000230 	.word	0x20000230
 80024c0:	20000234 	.word	0x20000234
 80024c4:	20000ac0 	.word	0x20000ac0
 80024c8:	40000400 	.word	0x40000400
 80024cc:	20000bc0 	.word	0x20000bc0
 80024d0:	20000408 	.word	0x20000408
 80024d4:	20000bbc 	.word	0x20000bbc
 80024d8:	20000bc4 	.word	0x20000bc4
 80024dc:	40010800 	.word	0x40010800
 80024e0:	20000b78 	.word	0x20000b78
 80024e4:	20000a04 	.word	0x20000a04
 80024e8:	20000b7c 	.word	0x20000b7c
 80024ec:	20000a08 	.word	0x20000a08
 80024f0:	20000b80 	.word	0x20000b80
 80024f4:	20000a0c 	.word	0x20000a0c
 80024f8:	20000b84 	.word	0x20000b84
 80024fc:	200009ec 	.word	0x200009ec
 8002500:	20000b74 	.word	0x20000b74
 8002504:	20000afc 	.word	0x20000afc
 8002508:	20000bb4 	.word	0x20000bb4
 800250c:	20000244 	.word	0x20000244
 8002510:	20000240 	.word	0x20000240
 8002514:	10210000 	.word	0x10210000
 8002518:	20000b88 	.word	0x20000b88
 800251c:	20000a10 	.word	0x20000a10
 8002520:	20000b8c 	.word	0x20000b8c
 8002524:	20000a14 	.word	0x20000a14
 8002528:	20000b90 	.word	0x20000b90
 800252c:	20000a18 	.word	0x20000a18
 8002530:	20000ba4 	.word	0x20000ba4
 8002534:	200009f0 	.word	0x200009f0
				}
				case 3: {
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 8002538:	2110      	movs	r1, #16
 800253a:	4884      	ldr	r0, [pc, #528]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800253c:	f003 fe74 	bl	8006228 <HAL_GPIO_ReadPin>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	d130      	bne.n	80025a8 <HAL_TIM_PeriodElapsedCallback+0x324>
						num7 = num7_state1;
 8002546:	4b82      	ldr	r3, [pc, #520]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a82      	ldr	r2, [pc, #520]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 800254c:	6013      	str	r3, [r2, #0]
						num8 = num8_state1;
 800254e:	4b82      	ldr	r3, [pc, #520]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a82      	ldr	r2, [pc, #520]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8002554:	6013      	str	r3, [r2, #0]
						num9 = num9_state1;
 8002556:	4b82      	ldr	r3, [pc, #520]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a82      	ldr	r2, [pc, #520]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 800255c:	6013      	str	r3, [r2, #0]
						bom = bom_state1;
 800255e:	4b82      	ldr	r3, [pc, #520]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a82      	ldr	r2, [pc, #520]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8002564:	6013      	str	r3, [r2, #0]
						flag_number = flag_number_state1;
 8002566:	4b82      	ldr	r3, [pc, #520]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a82      	ldr	r2, [pc, #520]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800256c:	6013      	str	r3, [r2, #0]
						flag_ngat_keypad = 1;
 800256e:	4b82      	ldr	r3, [pc, #520]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8002570:	2201      	movs	r2, #1
 8002572:	601a      	str	r2, [r3, #0]
						state_ngat2 = 0;
 8002574:	4b81      	ldr	r3, [pc, #516]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
						state_ngat1 = 1;
 800257a:	4b81      	ldr	r3, [pc, #516]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]
						GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
						GPIO_InitStruct.Pin = GPIO_PIN_4;
 800258e:	2310      	movs	r3, #16
 8002590:	63fb      	str	r3, [r7, #60]	; 0x3c
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002592:	4b7c      	ldr	r3, [pc, #496]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002594:	643b      	str	r3, [r7, #64]	; 0x40
						GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002596:	2301      	movs	r3, #1
 8002598:	647b      	str	r3, [r7, #68]	; 0x44
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800259e:	4619      	mov	r1, r3
 80025a0:	486a      	ldr	r0, [pc, #424]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80025a2:	f003 fc01 	bl	8005da8 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = GPIO_PIN_4;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
						GPIO_InitStruct.Pull = GPIO_PULLUP;
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
					}
					break;
 80025a6:	e09c      	b.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x45e>
						state_ngat2 = 0;
 80025a8:	4b74      	ldr	r3, [pc, #464]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
						state_ngat1 = 1;
 80025ae:	4b74      	ldr	r3, [pc, #464]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
						GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
						GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025c2:	2310      	movs	r3, #16
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025c6:	4b6f      	ldr	r3, [pc, #444]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80025c8:	633b      	str	r3, [r7, #48]	; 0x30
						GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ca:	2301      	movs	r3, #1
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d2:	4619      	mov	r1, r3
 80025d4:	485d      	ldr	r0, [pc, #372]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80025d6:	f003 fbe7 	bl	8005da8 <HAL_GPIO_Init>
					break;
 80025da:	e082      	b.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x45e>
				}
				case 4: {
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1) {
 80025dc:	2120      	movs	r1, #32
 80025de:	485b      	ldr	r0, [pc, #364]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80025e0:	f003 fe22 	bl	8006228 <HAL_GPIO_ReadPin>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d13a      	bne.n	8002660 <HAL_TIM_PeriodElapsedCallback+0x3dc>
						if (num_sao != num_sao_state1) {
 80025ea:	4b67      	ldr	r3, [pc, #412]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x504>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4b67      	ldr	r3, [pc, #412]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x508>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d007      	beq.n	8002606 <HAL_TIM_PeriodElapsedCallback+0x382>
							count_state_lcd++;
 80025f6:	4b66      	ldr	r3, [pc, #408]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	4a64      	ldr	r2, [pc, #400]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80025fe:	6013      	str	r3, [r2, #0]
							flag_chuyen_lcd = 1;
 8002600:	4b64      	ldr	r3, [pc, #400]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]
						}
						num_sao = num_sao_state1;
 8002606:	4b61      	ldr	r3, [pc, #388]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a5f      	ldr	r2, [pc, #380]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x504>)
 800260c:	6013      	str	r3, [r2, #0]
						num0 = num0_state1;
 800260e:	4b62      	ldr	r3, [pc, #392]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a62      	ldr	r2, [pc, #392]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x518>)
 8002614:	6013      	str	r3, [r2, #0]
						num_thang = num_thang_state1;
 8002616:	4b62      	ldr	r3, [pc, #392]	; (80027a0 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a62      	ldr	r2, [pc, #392]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800261c:	6013      	str	r3, [r2, #0]
						//				mode = mode_state1;
						flag_number = flag_number_state1;
 800261e:	4b54      	ldr	r3, [pc, #336]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a54      	ldr	r2, [pc, #336]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8002624:	6013      	str	r3, [r2, #0]
						flag_ngat_keypad = 1;
 8002626:	4b54      	ldr	r3, [pc, #336]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]
						state_ngat2 = 0;
 800262c:	4b53      	ldr	r3, [pc, #332]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
						state_ngat1 = 1;
 8002632:	4b53      	ldr	r3, [pc, #332]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]
						GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 031c 	add.w	r3, r7, #28
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
						GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002646:	2320      	movs	r3, #32
 8002648:	61fb      	str	r3, [r7, #28]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800264a:	4b4e      	ldr	r3, [pc, #312]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x500>)
 800264c:	623b      	str	r3, [r7, #32]
						GPIO_InitStruct.Pull = GPIO_PULLUP;
 800264e:	2301      	movs	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	4619      	mov	r1, r3
 8002658:	483c      	ldr	r0, [pc, #240]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800265a:	f003 fba5 	bl	8005da8 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = GPIO_PIN_5;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
						GPIO_InitStruct.Pull = GPIO_PULLUP;
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
					}
					break;
 800265e:	e040      	b.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x45e>
						state_ngat2 = 0;
 8002660:	4b46      	ldr	r3, [pc, #280]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
						state_ngat1 = 1;
 8002666:	4b46      	ldr	r3, [pc, #280]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]
						GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
						GPIO_InitStruct.Pin = GPIO_PIN_5;
 800267a:	2320      	movs	r3, #32
 800267c:	60fb      	str	r3, [r7, #12]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800267e:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002680:	613b      	str	r3, [r7, #16]
						GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002682:	2301      	movs	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	f107 030c 	add.w	r3, r7, #12
 800268a:	4619      	mov	r1, r3
 800268c:	482f      	ldr	r0, [pc, #188]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800268e:	f003 fb8b 	bl	8005da8 <HAL_GPIO_Init>
					break;
 8002692:	e026      	b.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x45e>
				}
				case 5: {
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1) {
 8002694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002698:	482c      	ldr	r0, [pc, #176]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800269a:	f003 fdc5 	bl	8006228 <HAL_GPIO_ReadPin>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d11b      	bne.n	80026dc <HAL_TIM_PeriodElapsedCallback+0x458>
						if (flag_di_qua_nhap_mat_khau == 1) {
 80026a4:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0x524>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d117      	bne.n	80026dc <HAL_TIM_PeriodElapsedCallback+0x458>
							mode = 1;
 80026ac:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <HAL_TIM_PeriodElapsedCallback+0x528>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
							update();
 80026b2:	f7fe fb1b 	bl	8000cec <update>
						}
					}
					break;
 80026b6:	e011      	b.n	80026dc <HAL_TIM_PeriodElapsedCallback+0x458>
				}
				case 6: {
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80026b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026bc:	483c      	ldr	r0, [pc, #240]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 80026be:	f003 fdb3 	bl	8006228 <HAL_GPIO_ReadPin>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HAL_TIM_PeriodElapsedCallback+0x45c>
						if (flag_di_qua_nhap_mat_khau == 1) {
 80026c8:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0x524>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_PeriodElapsedCallback+0x45c>
							mode = 0;
 80026d0:	4b36      	ldr	r3, [pc, #216]	; (80027ac <HAL_TIM_PeriodElapsedCallback+0x528>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
							update();
 80026d6:	f7fe fb09 	bl	8000cec <update>
						}
					}
					break;
 80026da:	e001      	b.n	80026e0 <HAL_TIM_PeriodElapsedCallback+0x45c>
					break;
 80026dc:	bf00      	nop
 80026de:	e000      	b.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x45e>
					break;
 80026e0:	bf00      	nop
				}
			}
			HAL_TIM_Base_Stop_IT(&htim3);
 80026e2:	4834      	ldr	r0, [pc, #208]	; (80027b4 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80026e4:	f005 f834 	bl	8007750 <HAL_TIM_Base_Stop_IT>
		}
	}
	if (htim->Instance == TIM4) {
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a32      	ldr	r2, [pc, #200]	; (80027b8 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	f040 8712 	bne.w	8003518 <HAL_TIM_PeriodElapsedCallback+0x1294>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80026f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026f8:	4830      	ldr	r0, [pc, #192]	; (80027bc <HAL_TIM_PeriodElapsedCallback+0x538>)
 80026fa:	f003 fdc4 	bl	8006286 <HAL_GPIO_TogglePin>
		for (int i = 0; i < sizeof(data_RX); i++) {
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002704:	e00b      	b.n	800271e <HAL_TIM_PeriodElapsedCallback+0x49a>
			if (data_RX[i] != 0)
 8002706:	4a2e      	ldr	r2, [pc, #184]	; (80027c0 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002708:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800270c:	4413      	add	r3, r2
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <HAL_TIM_PeriodElapsedCallback+0x4a6>
		for (int i = 0; i < sizeof(data_RX); i++) {
 8002714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002718:	3301      	adds	r3, #1
 800271a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800271e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002722:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002726:	d3ee      	bcc.n	8002706 <HAL_TIM_PeriodElapsedCallback+0x482>
 8002728:	e000      	b.n	800272c <HAL_TIM_PeriodElapsedCallback+0x4a8>
				break;
 800272a:	bf00      	nop
			if (i >= (sizeof(data_RX) - 1))
				;
			//				return;
		}
		HAL_UART_DMAStop(&huart1);
 800272c:	4825      	ldr	r0, [pc, #148]	; (80027c4 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800272e:	f005 fc91 	bl	8008054 <HAL_UART_DMAStop>
		HAL_UART_Receive_DMA(&huart1, data_RX, sizeof(data_RX));
 8002732:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002736:	4922      	ldr	r1, [pc, #136]	; (80027c0 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002738:	4822      	ldr	r0, [pc, #136]	; (80027c4 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800273a:	f005 fc66 	bl	800800a <HAL_UART_Receive_DMA>
		count_flag_gan = 0;
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX); i++) {
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800274a:	e185      	b.n	8002a58 <HAL_TIM_PeriodElapsedCallback+0x7d4>
 800274c:	40010800 	.word	0x40010800
 8002750:	20000b94 	.word	0x20000b94
 8002754:	20000a1c 	.word	0x20000a1c
 8002758:	20000b98 	.word	0x20000b98
 800275c:	20000a20 	.word	0x20000a20
 8002760:	20000b9c 	.word	0x20000b9c
 8002764:	20000a24 	.word	0x20000a24
 8002768:	20000ba8 	.word	0x20000ba8
 800276c:	200009f4 	.word	0x200009f4
 8002770:	20000b74 	.word	0x20000b74
 8002774:	20000afc 	.word	0x20000afc
 8002778:	20000230 	.word	0x20000230
 800277c:	20000bb4 	.word	0x20000bb4
 8002780:	20000244 	.word	0x20000244
 8002784:	10210000 	.word	0x10210000
 8002788:	20000a2c 	.word	0x20000a2c
 800278c:	20000bac 	.word	0x20000bac
 8002790:	2000022c 	.word	0x2000022c
 8002794:	20000234 	.word	0x20000234
 8002798:	20000ba0 	.word	0x20000ba0
 800279c:	20000a28 	.word	0x20000a28
 80027a0:	20000bb0 	.word	0x20000bb0
 80027a4:	20000a30 	.word	0x20000a30
 80027a8:	20000b60 	.word	0x20000b60
 80027ac:	20000220 	.word	0x20000220
 80027b0:	40010c00 	.word	0x40010c00
 80027b4:	20000408 	.word	0x20000408
 80027b8:	40000800 	.word	0x40000800
 80027bc:	40011000 	.word	0x40011000
 80027c0:	20000524 	.word	0x20000524
 80027c4:	20000498 	.word	0x20000498
 80027c8:	200009d4 	.word	0x200009d4
			if ((data_RX[i] == 13) && (data_RX[i + 1] == 10)) {
 80027cc:	4a83      	ldr	r2, [pc, #524]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 80027ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027d2:	4413      	add	r3, r2
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b0d      	cmp	r3, #13
 80027d8:	d10b      	bne.n	80027f2 <HAL_TIM_PeriodElapsedCallback+0x56e>
 80027da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027de:	3301      	adds	r3, #1
 80027e0:	4a7e      	ldr	r2, [pc, #504]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	2b0a      	cmp	r3, #10
 80027e6:	d104      	bne.n	80027f2 <HAL_TIM_PeriodElapsedCallback+0x56e>
				count_flag_gan++;
 80027e8:	4b7d      	ldr	r3, [pc, #500]	; (80029e0 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	4a7c      	ldr	r2, [pc, #496]	; (80029e0 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 80027f0:	6013      	str	r3, [r2, #0]
			}

			if ((data_RX[i] == 13) || (data_RX[i] == 10)) {
 80027f2:	4a7a      	ldr	r2, [pc, #488]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 80027f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027f8:	4413      	add	r3, r2
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b0d      	cmp	r3, #13
 80027fe:	f000 8125 	beq.w	8002a4c <HAL_TIM_PeriodElapsedCallback+0x7c8>
 8002802:	4a76      	ldr	r2, [pc, #472]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002804:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b0a      	cmp	r3, #10
 800280e:	f000 811d 	beq.w	8002a4c <HAL_TIM_PeriodElapsedCallback+0x7c8>
				continue;
			}

			switch (count_flag_gan) {
 8002812:	4b73      	ldr	r3, [pc, #460]	; (80029e0 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b0b      	cmp	r3, #11
 8002818:	f200 80d0 	bhi.w	80029bc <HAL_TIM_PeriodElapsedCallback+0x738>
 800281c:	a201      	add	r2, pc, #4	; (adr r2, 8002824 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800281e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002822:	bf00      	nop
 8002824:	08002855 	.word	0x08002855
 8002828:	08002873 	.word	0x08002873
 800282c:	08002891 	.word	0x08002891
 8002830:	080028af 	.word	0x080028af
 8002834:	080028cd 	.word	0x080028cd
 8002838:	080028eb 	.word	0x080028eb
 800283c:	08002909 	.word	0x08002909
 8002840:	08002927 	.word	0x08002927
 8002844:	08002945 	.word	0x08002945
 8002848:	08002963 	.word	0x08002963
 800284c:	08002981 	.word	0x08002981
 8002850:	0800299f 	.word	0x0800299f
				case 0:
					data_RX_0[cout_0] = data_RX[i];
 8002854:	4b63      	ldr	r3, [pc, #396]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4960      	ldr	r1, [pc, #384]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 800285a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800285e:	440a      	add	r2, r1
 8002860:	7811      	ldrb	r1, [r2, #0]
 8002862:	4a61      	ldr	r2, [pc, #388]	; (80029e8 <HAL_TIM_PeriodElapsedCallback+0x764>)
 8002864:	54d1      	strb	r1, [r2, r3]
					cout_0++;
 8002866:	4b5f      	ldr	r3, [pc, #380]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	4a5d      	ldr	r2, [pc, #372]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0x760>)
 800286e:	6013      	str	r3, [r2, #0]
					break;
 8002870:	e0ed      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
				case 1:
					data_RX_1[cout_1] = data_RX[i];
 8002872:	4b5e      	ldr	r3, [pc, #376]	; (80029ec <HAL_TIM_PeriodElapsedCallback+0x768>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4959      	ldr	r1, [pc, #356]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002878:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800287c:	440a      	add	r2, r1
 800287e:	7811      	ldrb	r1, [r2, #0]
 8002880:	4a5b      	ldr	r2, [pc, #364]	; (80029f0 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8002882:	54d1      	strb	r1, [r2, r3]
					cout_1++;
 8002884:	4b59      	ldr	r3, [pc, #356]	; (80029ec <HAL_TIM_PeriodElapsedCallback+0x768>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	4a58      	ldr	r2, [pc, #352]	; (80029ec <HAL_TIM_PeriodElapsedCallback+0x768>)
 800288c:	6013      	str	r3, [r2, #0]
					break;
 800288e:	e0de      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
				case 2:
					data_RX_2[cout_2] = data_RX[i];
 8002890:	4b58      	ldr	r3, [pc, #352]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x770>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4951      	ldr	r1, [pc, #324]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002896:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800289a:	440a      	add	r2, r1
 800289c:	7811      	ldrb	r1, [r2, #0]
 800289e:	4a56      	ldr	r2, [pc, #344]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x774>)
 80028a0:	54d1      	strb	r1, [r2, r3]
					cout_2++;
 80028a2:	4b54      	ldr	r3, [pc, #336]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x770>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x770>)
 80028aa:	6013      	str	r3, [r2, #0]
					break;
 80028ac:	e0cf      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
				case 3:
					data_RX_3[cout_3] = data_RX[i];
 80028ae:	4b53      	ldr	r3, [pc, #332]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x778>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	494a      	ldr	r1, [pc, #296]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 80028b4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028b8:	440a      	add	r2, r1
 80028ba:	7811      	ldrb	r1, [r2, #0]
 80028bc:	4a50      	ldr	r2, [pc, #320]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80028be:	54d1      	strb	r1, [r2, r3]
					cout_3++;
 80028c0:	4b4e      	ldr	r3, [pc, #312]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x778>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	4a4d      	ldr	r2, [pc, #308]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x778>)
 80028c8:	6013      	str	r3, [r2, #0]
					break;
 80028ca:	e0c0      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
				case 4:
					data_RX_4[cout_4] = data_RX[i];
 80028cc:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x780>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4942      	ldr	r1, [pc, #264]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 80028d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028d6:	440a      	add	r2, r1
 80028d8:	7811      	ldrb	r1, [r2, #0]
 80028da:	4a4b      	ldr	r2, [pc, #300]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x784>)
 80028dc:	54d1      	strb	r1, [r2, r3]
					cout_4++;
 80028de:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x780>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	4a47      	ldr	r2, [pc, #284]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x780>)
 80028e6:	6013      	str	r3, [r2, #0]
					break;
 80028e8:	e0b1      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
				case 5:
					data_RX_5[cout_5] = data_RX[i];
 80028ea:	4b48      	ldr	r3, [pc, #288]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x788>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	493b      	ldr	r1, [pc, #236]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 80028f0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028f4:	440a      	add	r2, r1
 80028f6:	7811      	ldrb	r1, [r2, #0]
 80028f8:	4a45      	ldr	r2, [pc, #276]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 80028fa:	54d1      	strb	r1, [r2, r3]
					cout_5++;
 80028fc:	4b43      	ldr	r3, [pc, #268]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x788>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	4a42      	ldr	r2, [pc, #264]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x788>)
 8002904:	6013      	str	r3, [r2, #0]
					break;
 8002906:	e0a2      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
				case 6:
					data_RX_6[cout_6] = data_RX[i];
 8002908:	4b42      	ldr	r3, [pc, #264]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x790>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4933      	ldr	r1, [pc, #204]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 800290e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002912:	440a      	add	r2, r1
 8002914:	7811      	ldrb	r1, [r2, #0]
 8002916:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8002918:	54d1      	strb	r1, [r2, r3]
					cout_6++;
 800291a:	4b3e      	ldr	r3, [pc, #248]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x790>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3301      	adds	r3, #1
 8002920:	4a3c      	ldr	r2, [pc, #240]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x790>)
 8002922:	6013      	str	r3, [r2, #0]
					break;
 8002924:	e093      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
				case 7:
					data_RX_7[cout_7] = data_RX[i];
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x798>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	492c      	ldr	r1, [pc, #176]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 800292c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002930:	440a      	add	r2, r1
 8002932:	7811      	ldrb	r1, [r2, #0]
 8002934:	4a3a      	ldr	r2, [pc, #232]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x79c>)
 8002936:	54d1      	strb	r1, [r2, r3]
					cout_7++;
 8002938:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x798>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	4a37      	ldr	r2, [pc, #220]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x798>)
 8002940:	6013      	str	r3, [r2, #0]
					break;
 8002942:	e084      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
				case 8:
					data_RX_8[cout_8] = data_RX[i];
 8002944:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4924      	ldr	r1, [pc, #144]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 800294a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800294e:	440a      	add	r2, r1
 8002950:	7811      	ldrb	r1, [r2, #0]
 8002952:	4a35      	ldr	r2, [pc, #212]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x7a4>)
 8002954:	54d1      	strb	r1, [r2, r3]
					cout_8++;
 8002956:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	4a31      	ldr	r2, [pc, #196]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 800295e:	6013      	str	r3, [r2, #0]
					break;
 8002960:	e075      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
				case 9:
					data_RX_9[cout_9] = data_RX[i];
 8002962:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	491d      	ldr	r1, [pc, #116]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002968:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800296c:	440a      	add	r2, r1
 800296e:	7811      	ldrb	r1, [r2, #0]
 8002970:	4a2f      	ldr	r2, [pc, #188]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x7ac>)
 8002972:	54d1      	strb	r1, [r2, r3]
					cout_9++;
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	4a2c      	ldr	r2, [pc, #176]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 800297c:	6013      	str	r3, [r2, #0]
					break;
 800297e:	e066      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
				case 10:
					data_RX_10[cout_10] = data_RX[i];
 8002980:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4915      	ldr	r1, [pc, #84]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002986:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800298a:	440a      	add	r2, r1
 800298c:	7811      	ldrb	r1, [r2, #0]
 800298e:	4a2a      	ldr	r2, [pc, #168]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 8002990:	54d1      	strb	r1, [r2, r3]
					cout_10++;
 8002992:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	4a26      	ldr	r2, [pc, #152]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 800299a:	6013      	str	r3, [r2, #0]
					break;
 800299c:	e057      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
				case 11:
					data_RX_11[cout_11] = data_RX[i];
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	490e      	ldr	r1, [pc, #56]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 80029a4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029a8:	440a      	add	r2, r1
 80029aa:	7811      	ldrb	r1, [r2, #0]
 80029ac:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 80029ae:	54d1      	strb	r1, [r2, r3]
					cout_11++;
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3301      	adds	r3, #1
 80029b6:	4a21      	ldr	r2, [pc, #132]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 80029b8:	6013      	str	r3, [r2, #0]
					break;
 80029ba:	e048      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
				default:
					data_RX_12[cout_12] = data_RX[i];
 80029bc:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x758>)
 80029c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029c6:	440a      	add	r2, r1
 80029c8:	7811      	ldrb	r1, [r2, #0]
 80029ca:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 80029cc:	54d1      	strb	r1, [r2, r3]
					cout_12++;
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 80029d6:	6013      	str	r3, [r2, #0]
					break;
 80029d8:	e039      	b.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x7ca>
 80029da:	bf00      	nop
 80029dc:	20000524 	.word	0x20000524
 80029e0:	200009d4 	.word	0x200009d4
 80029e4:	20000960 	.word	0x20000960
 80029e8:	20000650 	.word	0x20000650
 80029ec:	20000964 	.word	0x20000964
 80029f0:	2000068c 	.word	0x2000068c
 80029f4:	20000968 	.word	0x20000968
 80029f8:	200006c8 	.word	0x200006c8
 80029fc:	2000096c 	.word	0x2000096c
 8002a00:	20000704 	.word	0x20000704
 8002a04:	20000970 	.word	0x20000970
 8002a08:	20000740 	.word	0x20000740
 8002a0c:	20000974 	.word	0x20000974
 8002a10:	2000077c 	.word	0x2000077c
 8002a14:	20000978 	.word	0x20000978
 8002a18:	200007b8 	.word	0x200007b8
 8002a1c:	2000097c 	.word	0x2000097c
 8002a20:	200007f4 	.word	0x200007f4
 8002a24:	20000980 	.word	0x20000980
 8002a28:	20000830 	.word	0x20000830
 8002a2c:	20000984 	.word	0x20000984
 8002a30:	2000086c 	.word	0x2000086c
 8002a34:	20000988 	.word	0x20000988
 8002a38:	200008a8 	.word	0x200008a8
 8002a3c:	2000098c 	.word	0x2000098c
 8002a40:	200008e4 	.word	0x200008e4
 8002a44:	20000990 	.word	0x20000990
 8002a48:	20000920 	.word	0x20000920
				continue;
 8002a4c:	bf00      	nop
		for (int i = 0; i < sizeof(data_RX); i++) {
 8002a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a52:	3301      	adds	r3, #1
 8002a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002a60:	f4ff aeb4 	bcc.w	80027cc <HAL_TIM_PeriodElapsedCallback+0x548>
			}
		}
		///////////////////////////////
		if (data_RX_0[0] == '>') {
 8002a64:	4b95      	ldr	r3, [pc, #596]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b3e      	cmp	r3, #62	; 0x3e
 8002a6a:	d102      	bne.n	8002a72 <HAL_TIM_PeriodElapsedCallback+0x7ee>
			flag_pass_input = 1;
 8002a6c:	4b94      	ldr	r3, [pc, #592]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
		}
		if (data_RX_1[0] == '>') {
 8002a72:	4b94      	ldr	r3, [pc, #592]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b3e      	cmp	r3, #62	; 0x3e
 8002a78:	d102      	bne.n	8002a80 <HAL_TIM_PeriodElapsedCallback+0x7fc>
			flag_pass_input = 1;
 8002a7a:	4b91      	ldr	r3, [pc, #580]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
		}
		if (data_RX_2[0] == '>') {
 8002a80:	4b91      	ldr	r3, [pc, #580]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b3e      	cmp	r3, #62	; 0x3e
 8002a86:	d102      	bne.n	8002a8e <HAL_TIM_PeriodElapsedCallback+0x80a>
			flag_pass_input = 1;
 8002a88:	4b8d      	ldr	r3, [pc, #564]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
		}
		if (data_RX_3[0] == '>') {
 8002a8e:	4b8f      	ldr	r3, [pc, #572]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b3e      	cmp	r3, #62	; 0x3e
 8002a94:	d102      	bne.n	8002a9c <HAL_TIM_PeriodElapsedCallback+0x818>
			flag_pass_input = 1;
 8002a96:	4b8a      	ldr	r3, [pc, #552]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
		}
		if (data_RX_4[0] == '>') {
 8002a9c:	4b8c      	ldr	r3, [pc, #560]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b3e      	cmp	r3, #62	; 0x3e
 8002aa2:	d102      	bne.n	8002aaa <HAL_TIM_PeriodElapsedCallback+0x826>
			flag_pass_input = 1;
 8002aa4:	4b86      	ldr	r3, [pc, #536]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
		}
		if (data_RX_5[0] == '>') {
 8002aaa:	4b8a      	ldr	r3, [pc, #552]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b3e      	cmp	r3, #62	; 0x3e
 8002ab0:	d102      	bne.n	8002ab8 <HAL_TIM_PeriodElapsedCallback+0x834>
			flag_pass_input = 1;
 8002ab2:	4b83      	ldr	r3, [pc, #524]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
		}
		if (data_RX_6[0] == '>') {
 8002ab8:	4b87      	ldr	r3, [pc, #540]	; (8002cd8 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b3e      	cmp	r3, #62	; 0x3e
 8002abe:	d102      	bne.n	8002ac6 <HAL_TIM_PeriodElapsedCallback+0x842>
			flag_pass_input = 1;
 8002ac0:	4b7f      	ldr	r3, [pc, #508]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
		}
		if (data_RX_7[0] == '>') {
 8002ac6:	4b85      	ldr	r3, [pc, #532]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b3e      	cmp	r3, #62	; 0x3e
 8002acc:	d102      	bne.n	8002ad4 <HAL_TIM_PeriodElapsedCallback+0x850>
			flag_pass_input = 1;
 8002ace:	4b7c      	ldr	r3, [pc, #496]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
		}
		if (data_RX_8[0] == '>') {
 8002ad4:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b3e      	cmp	r3, #62	; 0x3e
 8002ada:	d102      	bne.n	8002ae2 <HAL_TIM_PeriodElapsedCallback+0x85e>
			flag_pass_input = 1;
 8002adc:	4b78      	ldr	r3, [pc, #480]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
		}
		if (data_RX_9[0] == '>') {
 8002ae2:	4b80      	ldr	r3, [pc, #512]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8002ae8:	d102      	bne.n	8002af0 <HAL_TIM_PeriodElapsedCallback+0x86c>
			flag_pass_input = 1;
 8002aea:	4b75      	ldr	r3, [pc, #468]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
		}
		if (data_RX_10[0] == '>') {
 8002af0:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b3e      	cmp	r3, #62	; 0x3e
 8002af6:	d102      	bne.n	8002afe <HAL_TIM_PeriodElapsedCallback+0x87a>
			flag_pass_input = 1;
 8002af8:	4b71      	ldr	r3, [pc, #452]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
		}
		if (data_RX_11[0] == '>') {
 8002afe:	4b7b      	ldr	r3, [pc, #492]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b3e      	cmp	r3, #62	; 0x3e
 8002b04:	d102      	bne.n	8002b0c <HAL_TIM_PeriodElapsedCallback+0x888>
			flag_pass_input = 1;
 8002b06:	4b6e      	ldr	r3, [pc, #440]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
		}
		if (data_RX_12[0] == '>') {
 8002b0c:	4b78      	ldr	r3, [pc, #480]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b3e      	cmp	r3, #62	; 0x3e
 8002b12:	d102      	bne.n	8002b1a <HAL_TIM_PeriodElapsedCallback+0x896>
			flag_pass_input = 1;
 8002b14:	4b6a      	ldr	r3, [pc, #424]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
		}
		//////////////////////////////
		if (!strcmp((const char *)data_RX_0, (const char *)cmd_OK)) {
 8002b1a:	4976      	ldr	r1, [pc, #472]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002b1c:	4867      	ldr	r0, [pc, #412]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8002b1e:	f7fd fb15 	bl	800014c <strcmp>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_TIM_PeriodElapsedCallback+0x8b0>
			flag_pass = 1;
 8002b28:	4b73      	ldr	r3, [pc, #460]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002b2e:	4b73      	ldr	r3, [pc, #460]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
		}
		if (!strcmp((const char *)data_RX_1, (const char *)cmd_OK)) {
 8002b34:	496f      	ldr	r1, [pc, #444]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002b36:	4863      	ldr	r0, [pc, #396]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8002b38:	f7fd fb08 	bl	800014c <strcmp>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <HAL_TIM_PeriodElapsedCallback+0x8ca>
			flag_pass = 1;
 8002b42:	4b6d      	ldr	r3, [pc, #436]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002b48:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
		}
		if (!strcmp((const char *)data_RX_2, (const char *)cmd_OK)) {
 8002b4e:	4969      	ldr	r1, [pc, #420]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002b50:	485d      	ldr	r0, [pc, #372]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8002b52:	f7fd fafb 	bl	800014c <strcmp>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <HAL_TIM_PeriodElapsedCallback+0x8e4>
			flag_pass = 1;
 8002b5c:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002b62:	4b66      	ldr	r3, [pc, #408]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
		}
		if (!strcmp((const char *)data_RX_3, (const char *)cmd_OK)) {
 8002b68:	4962      	ldr	r1, [pc, #392]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002b6a:	4858      	ldr	r0, [pc, #352]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8002b6c:	f7fd faee 	bl	800014c <strcmp>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <HAL_TIM_PeriodElapsedCallback+0x8fe>
			flag_pass = 1;
 8002b76:	4b60      	ldr	r3, [pc, #384]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002b7c:	4b5f      	ldr	r3, [pc, #380]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
		}
		if (!strcmp((const char *)data_RX_4, (const char *)cmd_OK)) {
 8002b82:	495c      	ldr	r1, [pc, #368]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002b84:	4852      	ldr	r0, [pc, #328]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8002b86:	f7fd fae1 	bl	800014c <strcmp>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_TIM_PeriodElapsedCallback+0x918>
			flag_pass = 1;
 8002b90:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002b96:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
		}
		if (!strcmp((const char *)data_RX_5, (const char *)cmd_OK)) {
 8002b9c:	4955      	ldr	r1, [pc, #340]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002b9e:	484d      	ldr	r0, [pc, #308]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8002ba0:	f7fd fad4 	bl	800014c <strcmp>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d105      	bne.n	8002bb6 <HAL_TIM_PeriodElapsedCallback+0x932>
			flag_pass = 1;
 8002baa:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002bb0:	4b52      	ldr	r3, [pc, #328]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
		}
		if (!strcmp((const char *)data_RX_6, (const char *)cmd_OK)) {
 8002bb6:	494f      	ldr	r1, [pc, #316]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002bb8:	4847      	ldr	r0, [pc, #284]	; (8002cd8 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8002bba:	f7fd fac7 	bl	800014c <strcmp>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_TIM_PeriodElapsedCallback+0x94c>
			flag_pass = 1;
 8002bc4:	4b4c      	ldr	r3, [pc, #304]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002bca:	4b4c      	ldr	r3, [pc, #304]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
		}
		if (!strcmp((const char *)data_RX_7, (const char *)cmd_OK)) {
 8002bd0:	4948      	ldr	r1, [pc, #288]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002bd2:	4842      	ldr	r0, [pc, #264]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8002bd4:	f7fd faba 	bl	800014c <strcmp>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d105      	bne.n	8002bea <HAL_TIM_PeriodElapsedCallback+0x966>
			flag_pass = 1;
 8002bde:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002be4:	4b45      	ldr	r3, [pc, #276]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
		}
		if (!strcmp((const char *)data_RX_8, (const char *)cmd_OK)) {
 8002bea:	4942      	ldr	r1, [pc, #264]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002bec:	483c      	ldr	r0, [pc, #240]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8002bee:	f7fd faad 	bl	800014c <strcmp>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <HAL_TIM_PeriodElapsedCallback+0x980>
			flag_pass = 1;
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002bfe:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
		}
		if (!strcmp((const char *)data_RX_9, (const char *)cmd_OK)) {
 8002c04:	493b      	ldr	r1, [pc, #236]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002c06:	4837      	ldr	r0, [pc, #220]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8002c08:	f7fd faa0 	bl	800014c <strcmp>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d105      	bne.n	8002c1e <HAL_TIM_PeriodElapsedCallback+0x99a>
			flag_pass = 1;
 8002c12:	4b39      	ldr	r3, [pc, #228]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002c18:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
		}
		if (!strcmp((const char *)data_RX_10, (const char *)cmd_OK)) {
 8002c1e:	4935      	ldr	r1, [pc, #212]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002c20:	4831      	ldr	r0, [pc, #196]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8002c22:	f7fd fa93 	bl	800014c <strcmp>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_TIM_PeriodElapsedCallback+0x9b4>
			flag_pass = 1;
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002c32:	4b32      	ldr	r3, [pc, #200]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
		}
		if (!strcmp((const char *)data_RX_11, (const char *)cmd_OK)) {
 8002c38:	492e      	ldr	r1, [pc, #184]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002c3a:	482c      	ldr	r0, [pc, #176]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8002c3c:	f7fd fa86 	bl	800014c <strcmp>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <HAL_TIM_PeriodElapsedCallback+0x9ce>
			flag_pass = 1;
 8002c46:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
		}
		if (!strcmp((const char *)data_RX_12, (const char *)cmd_OK)) {
 8002c52:	4928      	ldr	r1, [pc, #160]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002c54:	4826      	ldr	r0, [pc, #152]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8002c56:	f7fd fa79 	bl	800014c <strcmp>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d105      	bne.n	8002c6c <HAL_TIM_PeriodElapsedCallback+0x9e8>
			flag_pass = 1;
 8002c60:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
			flag_nhap_topic = 1;
 8002c66:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
		}
		int err = compare_n_char(data_RX_0, sizeof(data_RX_0), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 8002c6c:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2310      	movs	r3, #16
 8002c72:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8002c74:	213c      	movs	r1, #60	; 0x3c
 8002c76:	4811      	ldr	r0, [pc, #68]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8002c78:	f7fd fb14 	bl	80002a4 <compare_n_char>
 8002c7c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 8002c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d15e      	bne.n	8002d46 <HAL_TIM_PeriodElapsedCallback+0xac2>
			sscanf((const char *)data_RX_1, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 8002c88:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8002c8a:	9304      	str	r3, [sp, #16]
 8002c8c:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8002c8e:	9303      	str	r3, [sp, #12]
 8002c90:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 8002c92:	9302      	str	r3, [sp, #8]
 8002c94:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0xa90>)
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	4b1f      	ldr	r3, [pc, #124]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0xa98>)
 8002c9e:	4a20      	ldr	r2, [pc, #128]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0xa9c>)
 8002ca0:	4920      	ldr	r1, [pc, #128]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8002ca2:	4808      	ldr	r0, [pc, #32]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8002ca4:	f006 fb50 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0xaa4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d142      	bne.n	8002d36 <HAL_TIM_PeriodElapsedCallback+0xab2>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0xaa8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f247 522f 	movw	r2, #29999	; 0x752f
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
 8002cba:	e039      	b.n	8002d30 <HAL_TIM_PeriodElapsedCallback+0xaac>
 8002cbc:	20000650 	.word	0x20000650
 8002cc0:	20000bd8 	.word	0x20000bd8
 8002cc4:	2000068c 	.word	0x2000068c
 8002cc8:	200006c8 	.word	0x200006c8
 8002ccc:	20000704 	.word	0x20000704
 8002cd0:	20000740 	.word	0x20000740
 8002cd4:	2000077c 	.word	0x2000077c
 8002cd8:	200007b8 	.word	0x200007b8
 8002cdc:	200007f4 	.word	0x200007f4
 8002ce0:	20000830 	.word	0x20000830
 8002ce4:	2000086c 	.word	0x2000086c
 8002ce8:	200008a8 	.word	0x200008a8
 8002cec:	200008e4 	.word	0x200008e4
 8002cf0:	20000920 	.word	0x20000920
 8002cf4:	20000200 	.word	0x20000200
 8002cf8:	200009c8 	.word	0x200009c8
 8002cfc:	200009cc 	.word	0x200009cc
 8002d00:	20000994 	.word	0x20000994
 8002d04:	20000204 	.word	0x20000204
 8002d08:	2000021c 	.word	0x2000021c
 8002d0c:	20000218 	.word	0x20000218
 8002d10:	20000214 	.word	0x20000214
 8002d14:	20000220 	.word	0x20000220
 8002d18:	200009f4 	.word	0x200009f4
 8002d1c:	200009f0 	.word	0x200009f0
 8002d20:	200009ec 	.word	0x200009ec
 8002d24:	0800a7f4 	.word	0x0800a7f4
 8002d28:	20000bd4 	.word	0x20000bd4
 8002d2c:	20000378 	.word	0x20000378
				data_avail_mqtt = 1;
 8002d30:	4b95      	ldr	r3, [pc, #596]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 8002d36:	4b95      	ldr	r3, [pc, #596]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0xd08>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
			count_test_re++;
 8002d3c:	4b94      	ldr	r3, [pc, #592]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	4a93      	ldr	r2, [pc, #588]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002d44:	6013      	str	r3, [r2, #0]
		}
		err = compare_n_char(data_RX_1, sizeof(data_RX_1), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 8002d46:	4b93      	ldr	r3, [pc, #588]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	4a92      	ldr	r2, [pc, #584]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0xd14>)
 8002d4e:	213c      	movs	r1, #60	; 0x3c
 8002d50:	4892      	ldr	r0, [pc, #584]	; (8002f9c <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8002d52:	f7fd faa7 	bl	80002a4 <compare_n_char>
 8002d56:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 8002d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d123      	bne.n	8002daa <HAL_TIM_PeriodElapsedCallback+0xb26>
			sscanf((const char *)data_RX_2, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 8002d62:	4b8f      	ldr	r3, [pc, #572]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 8002d64:	9304      	str	r3, [sp, #16]
 8002d66:	4b8f      	ldr	r3, [pc, #572]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 8002d68:	9303      	str	r3, [sp, #12]
 8002d6a:	4b8f      	ldr	r3, [pc, #572]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xd24>)
 8002d6c:	9302      	str	r3, [sp, #8]
 8002d6e:	4b8f      	ldr	r3, [pc, #572]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	4b8f      	ldr	r3, [pc, #572]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8002d78:	4a8f      	ldr	r2, [pc, #572]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xd34>)
 8002d7a:	4990      	ldr	r1, [pc, #576]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8002d7c:	4890      	ldr	r0, [pc, #576]	; (8002fc0 <HAL_TIM_PeriodElapsedCallback+0xd3c>)
 8002d7e:	f006 fae3 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 8002d82:	4b90      	ldr	r3, [pc, #576]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d107      	bne.n	8002d9a <HAL_TIM_PeriodElapsedCallback+0xb16>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 8002d8a:	4b8f      	ldr	r3, [pc, #572]	; (8002fc8 <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f247 522f 	movw	r2, #29999	; 0x752f
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24
				data_avail_mqtt = 1;
 8002d94:	4b7c      	ldr	r3, [pc, #496]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 8002d9a:	4b7c      	ldr	r3, [pc, #496]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0xd08>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
			count_test_re++;
 8002da0:	4b7b      	ldr	r3, [pc, #492]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3301      	adds	r3, #1
 8002da6:	4a7a      	ldr	r2, [pc, #488]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002da8:	6013      	str	r3, [r2, #0]
		}
		err = compare_n_char(data_RX_2, sizeof(data_RX_2), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 8002daa:	4b7a      	ldr	r3, [pc, #488]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2310      	movs	r3, #16
 8002db0:	4a79      	ldr	r2, [pc, #484]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0xd14>)
 8002db2:	213c      	movs	r1, #60	; 0x3c
 8002db4:	4882      	ldr	r0, [pc, #520]	; (8002fc0 <HAL_TIM_PeriodElapsedCallback+0xd3c>)
 8002db6:	f7fd fa75 	bl	80002a4 <compare_n_char>
 8002dba:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 8002dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d123      	bne.n	8002e0e <HAL_TIM_PeriodElapsedCallback+0xb8a>
			sscanf((const char *)data_RX_3, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 8002dc6:	4b76      	ldr	r3, [pc, #472]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 8002dc8:	9304      	str	r3, [sp, #16]
 8002dca:	4b76      	ldr	r3, [pc, #472]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 8002dcc:	9303      	str	r3, [sp, #12]
 8002dce:	4b76      	ldr	r3, [pc, #472]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xd24>)
 8002dd0:	9302      	str	r3, [sp, #8]
 8002dd2:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	4b76      	ldr	r3, [pc, #472]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	4b76      	ldr	r3, [pc, #472]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8002ddc:	4a76      	ldr	r2, [pc, #472]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xd34>)
 8002dde:	4977      	ldr	r1, [pc, #476]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8002de0:	487a      	ldr	r0, [pc, #488]	; (8002fcc <HAL_TIM_PeriodElapsedCallback+0xd48>)
 8002de2:	f006 fab1 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 8002de6:	4b77      	ldr	r3, [pc, #476]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d107      	bne.n	8002dfe <HAL_TIM_PeriodElapsedCallback+0xb7a>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 8002dee:	4b76      	ldr	r3, [pc, #472]	; (8002fc8 <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f247 522f 	movw	r2, #29999	; 0x752f
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24
				data_avail_mqtt = 1;
 8002df8:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 8002dfe:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0xd08>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
			count_test_re++;
 8002e04:	4b62      	ldr	r3, [pc, #392]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	4a61      	ldr	r2, [pc, #388]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002e0c:	6013      	str	r3, [r2, #0]
		}
		err = compare_n_char(data_RX_3, sizeof(data_RX_3), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 8002e0e:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	2310      	movs	r3, #16
 8002e14:	4a60      	ldr	r2, [pc, #384]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0xd14>)
 8002e16:	213c      	movs	r1, #60	; 0x3c
 8002e18:	486c      	ldr	r0, [pc, #432]	; (8002fcc <HAL_TIM_PeriodElapsedCallback+0xd48>)
 8002e1a:	f7fd fa43 	bl	80002a4 <compare_n_char>
 8002e1e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 8002e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d123      	bne.n	8002e72 <HAL_TIM_PeriodElapsedCallback+0xbee>
			sscanf((const char *)data_RX_4, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 8002e2a:	4b5d      	ldr	r3, [pc, #372]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 8002e2c:	9304      	str	r3, [sp, #16]
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 8002e30:	9303      	str	r3, [sp, #12]
 8002e32:	4b5d      	ldr	r3, [pc, #372]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xd24>)
 8002e34:	9302      	str	r3, [sp, #8]
 8002e36:	4b5d      	ldr	r3, [pc, #372]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	4b5d      	ldr	r3, [pc, #372]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	4b5d      	ldr	r3, [pc, #372]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8002e40:	4a5d      	ldr	r2, [pc, #372]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xd34>)
 8002e42:	495e      	ldr	r1, [pc, #376]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8002e44:	4862      	ldr	r0, [pc, #392]	; (8002fd0 <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 8002e46:	f006 fa7f 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 8002e4a:	4b5e      	ldr	r3, [pc, #376]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d107      	bne.n	8002e62 <HAL_TIM_PeriodElapsedCallback+0xbde>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 8002e52:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f247 522f 	movw	r2, #29999	; 0x752f
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24
				data_avail_mqtt = 1;
 8002e5c:	4b4a      	ldr	r3, [pc, #296]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 8002e62:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0xd08>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
			count_test_re++;
 8002e68:	4b49      	ldr	r3, [pc, #292]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	4a48      	ldr	r2, [pc, #288]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002e70:	6013      	str	r3, [r2, #0]
		}
		err = compare_n_char(data_RX_4, sizeof(data_RX_4), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 8002e72:	4b48      	ldr	r3, [pc, #288]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	2310      	movs	r3, #16
 8002e78:	4a47      	ldr	r2, [pc, #284]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0xd14>)
 8002e7a:	213c      	movs	r1, #60	; 0x3c
 8002e7c:	4854      	ldr	r0, [pc, #336]	; (8002fd0 <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 8002e7e:	f7fd fa11 	bl	80002a4 <compare_n_char>
 8002e82:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 8002e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d123      	bne.n	8002ed6 <HAL_TIM_PeriodElapsedCallback+0xc52>
			sscanf((const char *)data_RX_5, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 8002e8e:	4b44      	ldr	r3, [pc, #272]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 8002e90:	9304      	str	r3, [sp, #16]
 8002e92:	4b44      	ldr	r3, [pc, #272]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 8002e94:	9303      	str	r3, [sp, #12]
 8002e96:	4b44      	ldr	r3, [pc, #272]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xd24>)
 8002e98:	9302      	str	r3, [sp, #8]
 8002e9a:	4b44      	ldr	r3, [pc, #272]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	4b44      	ldr	r3, [pc, #272]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8002ea4:	4a44      	ldr	r2, [pc, #272]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xd34>)
 8002ea6:	4945      	ldr	r1, [pc, #276]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8002ea8:	484a      	ldr	r0, [pc, #296]	; (8002fd4 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002eaa:	f006 fa4d 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 8002eae:	4b45      	ldr	r3, [pc, #276]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <HAL_TIM_PeriodElapsedCallback+0xc42>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 8002eb6:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f247 522f 	movw	r2, #29999	; 0x752f
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24
				data_avail_mqtt = 1;
 8002ec0:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 8002ec6:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0xd08>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
			count_test_re++;
 8002ecc:	4b30      	ldr	r3, [pc, #192]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	4a2f      	ldr	r2, [pc, #188]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002ed4:	6013      	str	r3, [r2, #0]
		}
		err = compare_n_char(data_RX_5, sizeof(data_RX_5), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 8002ed6:	4b2f      	ldr	r3, [pc, #188]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	2310      	movs	r3, #16
 8002edc:	4a2e      	ldr	r2, [pc, #184]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0xd14>)
 8002ede:	213c      	movs	r1, #60	; 0x3c
 8002ee0:	483c      	ldr	r0, [pc, #240]	; (8002fd4 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002ee2:	f7fd f9df 	bl	80002a4 <compare_n_char>
 8002ee6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 8002eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d123      	bne.n	8002f3a <HAL_TIM_PeriodElapsedCallback+0xcb6>
			sscanf((const char *)data_RX_6, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 8002ef4:	9304      	str	r3, [sp, #16]
 8002ef6:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 8002ef8:	9303      	str	r3, [sp, #12]
 8002efa:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xd24>)
 8002efc:	9302      	str	r3, [sp, #8]
 8002efe:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8002f08:	4a2b      	ldr	r2, [pc, #172]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xd34>)
 8002f0a:	492c      	ldr	r1, [pc, #176]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8002f0c:	4832      	ldr	r0, [pc, #200]	; (8002fd8 <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8002f0e:	f006 fa1b 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 8002f12:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d107      	bne.n	8002f2a <HAL_TIM_PeriodElapsedCallback+0xca6>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f247 522f 	movw	r2, #29999	; 0x752f
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24
				data_avail_mqtt = 1;
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 8002f2a:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0xd08>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
			count_test_re++;
 8002f30:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002f38:	6013      	str	r3, [r2, #0]
		}

		err = compare_n_char(data_RX_6, sizeof(data_RX_6), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2310      	movs	r3, #16
 8002f40:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0xd14>)
 8002f42:	213c      	movs	r1, #60	; 0x3c
 8002f44:	4824      	ldr	r0, [pc, #144]	; (8002fd8 <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8002f46:	f7fd f9ad 	bl	80002a4 <compare_n_char>
 8002f4a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 8002f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d150      	bne.n	8002ff8 <HAL_TIM_PeriodElapsedCallback+0xd74>
			sscanf((const char *)data_RX_7, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 8002f58:	9304      	str	r3, [sp, #16]
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 8002f5c:	9303      	str	r3, [sp, #12]
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xd24>)
 8002f60:	9302      	str	r3, [sp, #8]
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8002f6c:	4a12      	ldr	r2, [pc, #72]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xd34>)
 8002f6e:	4913      	ldr	r1, [pc, #76]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8002f70:	481a      	ldr	r0, [pc, #104]	; (8002fdc <HAL_TIM_PeriodElapsedCallback+0xd58>)
 8002f72:	f006 f9e9 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d134      	bne.n	8002fe8 <HAL_TIM_PeriodElapsedCallback+0xd64>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f247 522f 	movw	r2, #29999	; 0x752f
 8002f86:	e02b      	b.n	8002fe0 <HAL_TIM_PeriodElapsedCallback+0xd5c>
 8002f88:	20000be4 	.word	0x20000be4
 8002f8c:	20000230 	.word	0x20000230
 8002f90:	2000095c 	.word	0x2000095c
 8002f94:	20000994 	.word	0x20000994
 8002f98:	20000204 	.word	0x20000204
 8002f9c:	2000068c 	.word	0x2000068c
 8002fa0:	2000021c 	.word	0x2000021c
 8002fa4:	20000218 	.word	0x20000218
 8002fa8:	20000214 	.word	0x20000214
 8002fac:	20000220 	.word	0x20000220
 8002fb0:	200009f4 	.word	0x200009f4
 8002fb4:	200009f0 	.word	0x200009f0
 8002fb8:	200009ec 	.word	0x200009ec
 8002fbc:	0800a7f4 	.word	0x0800a7f4
 8002fc0:	200006c8 	.word	0x200006c8
 8002fc4:	20000bd4 	.word	0x20000bd4
 8002fc8:	20000378 	.word	0x20000378
 8002fcc:	20000704 	.word	0x20000704
 8002fd0:	20000740 	.word	0x20000740
 8002fd4:	2000077c 	.word	0x2000077c
 8002fd8:	200007b8 	.word	0x200007b8
 8002fdc:	200007f4 	.word	0x200007f4
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24
				data_avail_mqtt = 1;
 8002fe2:	4b96      	ldr	r3, [pc, #600]	; (800323c <HAL_TIM_PeriodElapsedCallback+0xfb8>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 8002fe8:	4b95      	ldr	r3, [pc, #596]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
			count_test_re++;
 8002fee:	4b95      	ldr	r3, [pc, #596]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	4a93      	ldr	r2, [pc, #588]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8002ff6:	6013      	str	r3, [r2, #0]
		}

		err = compare_n_char(data_RX_7, sizeof(data_RX_7), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 8002ff8:	4b93      	ldr	r3, [pc, #588]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	4a93      	ldr	r2, [pc, #588]	; (800324c <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8003000:	213c      	movs	r1, #60	; 0x3c
 8003002:	4893      	ldr	r0, [pc, #588]	; (8003250 <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8003004:	f7fd f94e 	bl	80002a4 <compare_n_char>
 8003008:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 800300c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d123      	bne.n	800305c <HAL_TIM_PeriodElapsedCallback+0xdd8>
			sscanf((const char *)data_RX_8, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 8003014:	4b8f      	ldr	r3, [pc, #572]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8003016:	9304      	str	r3, [sp, #16]
 8003018:	4b8f      	ldr	r3, [pc, #572]	; (8003258 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 800301a:	9303      	str	r3, [sp, #12]
 800301c:	4b8f      	ldr	r3, [pc, #572]	; (800325c <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	4b8f      	ldr	r3, [pc, #572]	; (8003260 <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	4b8f      	ldr	r3, [pc, #572]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	4b8f      	ldr	r3, [pc, #572]	; (8003268 <HAL_TIM_PeriodElapsedCallback+0xfe4>)
 800302a:	4a90      	ldr	r2, [pc, #576]	; (800326c <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 800302c:	4990      	ldr	r1, [pc, #576]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0xfec>)
 800302e:	4891      	ldr	r0, [pc, #580]	; (8003274 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 8003030:	f006 f98a 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 8003034:	4b90      	ldr	r3, [pc, #576]	; (8003278 <HAL_TIM_PeriodElapsedCallback+0xff4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <HAL_TIM_PeriodElapsedCallback+0xdc8>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 800303c:	4b8f      	ldr	r3, [pc, #572]	; (800327c <HAL_TIM_PeriodElapsedCallback+0xff8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f247 522f 	movw	r2, #29999	; 0x752f
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
				data_avail_mqtt = 1;
 8003046:	4b7d      	ldr	r3, [pc, #500]	; (800323c <HAL_TIM_PeriodElapsedCallback+0xfb8>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 800304c:	4b7c      	ldr	r3, [pc, #496]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]
			count_test_re++;
 8003052:	4b7c      	ldr	r3, [pc, #496]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	4a7a      	ldr	r2, [pc, #488]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 800305a:	6013      	str	r3, [r2, #0]
		}

		err = compare_n_char(data_RX_8, sizeof(data_RX_8), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 800305c:	4b7a      	ldr	r3, [pc, #488]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2310      	movs	r3, #16
 8003062:	4a7a      	ldr	r2, [pc, #488]	; (800324c <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8003064:	213c      	movs	r1, #60	; 0x3c
 8003066:	4883      	ldr	r0, [pc, #524]	; (8003274 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 8003068:	f7fd f91c 	bl	80002a4 <compare_n_char>
 800306c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 8003070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d123      	bne.n	80030c0 <HAL_TIM_PeriodElapsedCallback+0xe3c>
			sscanf((const char *)data_RX_9, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 8003078:	4b76      	ldr	r3, [pc, #472]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 800307a:	9304      	str	r3, [sp, #16]
 800307c:	4b76      	ldr	r3, [pc, #472]	; (8003258 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 800307e:	9303      	str	r3, [sp, #12]
 8003080:	4b76      	ldr	r3, [pc, #472]	; (800325c <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	4b76      	ldr	r3, [pc, #472]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	4b76      	ldr	r3, [pc, #472]	; (8003268 <HAL_TIM_PeriodElapsedCallback+0xfe4>)
 800308e:	4a77      	ldr	r2, [pc, #476]	; (800326c <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 8003090:	4977      	ldr	r1, [pc, #476]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0xfec>)
 8003092:	487b      	ldr	r0, [pc, #492]	; (8003280 <HAL_TIM_PeriodElapsedCallback+0xffc>)
 8003094:	f006 f958 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 8003098:	4b77      	ldr	r3, [pc, #476]	; (8003278 <HAL_TIM_PeriodElapsedCallback+0xff4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <HAL_TIM_PeriodElapsedCallback+0xe2c>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 80030a0:	4b76      	ldr	r3, [pc, #472]	; (800327c <HAL_TIM_PeriodElapsedCallback+0xff8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f247 522f 	movw	r2, #29999	; 0x752f
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24
				data_avail_mqtt = 1;
 80030aa:	4b64      	ldr	r3, [pc, #400]	; (800323c <HAL_TIM_PeriodElapsedCallback+0xfb8>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 80030b0:	4b63      	ldr	r3, [pc, #396]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
			count_test_re++;
 80030b6:	4b63      	ldr	r3, [pc, #396]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3301      	adds	r3, #1
 80030bc:	4a61      	ldr	r2, [pc, #388]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 80030be:	6013      	str	r3, [r2, #0]
		}

		err = compare_n_char(data_RX_9, sizeof(data_RX_9), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 80030c0:	4b61      	ldr	r3, [pc, #388]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2310      	movs	r3, #16
 80030c6:	4a61      	ldr	r2, [pc, #388]	; (800324c <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 80030c8:	213c      	movs	r1, #60	; 0x3c
 80030ca:	486d      	ldr	r0, [pc, #436]	; (8003280 <HAL_TIM_PeriodElapsedCallback+0xffc>)
 80030cc:	f7fd f8ea 	bl	80002a4 <compare_n_char>
 80030d0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 80030d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d123      	bne.n	8003124 <HAL_TIM_PeriodElapsedCallback+0xea0>
			sscanf((const char *)data_RX_10, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 80030dc:	4b5d      	ldr	r3, [pc, #372]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 80030de:	9304      	str	r3, [sp, #16]
 80030e0:	4b5d      	ldr	r3, [pc, #372]	; (8003258 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 80030e2:	9303      	str	r3, [sp, #12]
 80030e4:	4b5d      	ldr	r3, [pc, #372]	; (800325c <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 80030e6:	9302      	str	r3, [sp, #8]
 80030e8:	4b5d      	ldr	r3, [pc, #372]	; (8003260 <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_TIM_PeriodElapsedCallback+0xfe4>)
 80030f2:	4a5e      	ldr	r2, [pc, #376]	; (800326c <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 80030f4:	495e      	ldr	r1, [pc, #376]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0xfec>)
 80030f6:	4863      	ldr	r0, [pc, #396]	; (8003284 <HAL_TIM_PeriodElapsedCallback+0x1000>)
 80030f8:	f006 f926 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 80030fc:	4b5e      	ldr	r3, [pc, #376]	; (8003278 <HAL_TIM_PeriodElapsedCallback+0xff4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d107      	bne.n	8003114 <HAL_TIM_PeriodElapsedCallback+0xe90>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 8003104:	4b5d      	ldr	r3, [pc, #372]	; (800327c <HAL_TIM_PeriodElapsedCallback+0xff8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f247 522f 	movw	r2, #29999	; 0x752f
 800310c:	625a      	str	r2, [r3, #36]	; 0x24
				data_avail_mqtt = 1;
 800310e:	4b4b      	ldr	r3, [pc, #300]	; (800323c <HAL_TIM_PeriodElapsedCallback+0xfb8>)
 8003110:	2201      	movs	r2, #1
 8003112:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 8003114:	4b4a      	ldr	r3, [pc, #296]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]
			count_test_re++;
 800311a:	4b4a      	ldr	r3, [pc, #296]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	4a48      	ldr	r2, [pc, #288]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8003122:	6013      	str	r3, [r2, #0]
		}

		err = compare_n_char(data_RX_9, sizeof(data_RX_9), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 8003124:	4b48      	ldr	r3, [pc, #288]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2310      	movs	r3, #16
 800312a:	4a48      	ldr	r2, [pc, #288]	; (800324c <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 800312c:	213c      	movs	r1, #60	; 0x3c
 800312e:	4854      	ldr	r0, [pc, #336]	; (8003280 <HAL_TIM_PeriodElapsedCallback+0xffc>)
 8003130:	f7fd f8b8 	bl	80002a4 <compare_n_char>
 8003134:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 8003138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d123      	bne.n	8003188 <HAL_TIM_PeriodElapsedCallback+0xf04>
			sscanf((const char *)data_RX_10, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 8003140:	4b44      	ldr	r3, [pc, #272]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8003142:	9304      	str	r3, [sp, #16]
 8003144:	4b44      	ldr	r3, [pc, #272]	; (8003258 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8003146:	9303      	str	r3, [sp, #12]
 8003148:	4b44      	ldr	r3, [pc, #272]	; (800325c <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 800314a:	9302      	str	r3, [sp, #8]
 800314c:	4b44      	ldr	r3, [pc, #272]	; (8003260 <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	4b44      	ldr	r3, [pc, #272]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	4b44      	ldr	r3, [pc, #272]	; (8003268 <HAL_TIM_PeriodElapsedCallback+0xfe4>)
 8003156:	4a45      	ldr	r2, [pc, #276]	; (800326c <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 8003158:	4945      	ldr	r1, [pc, #276]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0xfec>)
 800315a:	484a      	ldr	r0, [pc, #296]	; (8003284 <HAL_TIM_PeriodElapsedCallback+0x1000>)
 800315c:	f006 f8f4 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 8003160:	4b45      	ldr	r3, [pc, #276]	; (8003278 <HAL_TIM_PeriodElapsedCallback+0xff4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d107      	bne.n	8003178 <HAL_TIM_PeriodElapsedCallback+0xef4>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 8003168:	4b44      	ldr	r3, [pc, #272]	; (800327c <HAL_TIM_PeriodElapsedCallback+0xff8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f247 522f 	movw	r2, #29999	; 0x752f
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
				data_avail_mqtt = 1;
 8003172:	4b32      	ldr	r3, [pc, #200]	; (800323c <HAL_TIM_PeriodElapsedCallback+0xfb8>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 8003178:	4b31      	ldr	r3, [pc, #196]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]
			count_test_re++;
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	4a2f      	ldr	r2, [pc, #188]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8003186:	6013      	str	r3, [r2, #0]
		}

		err = compare_n_char(data_RX_10, sizeof(data_RX_10), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 8003188:	4b2f      	ldr	r3, [pc, #188]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2310      	movs	r3, #16
 800318e:	4a2f      	ldr	r2, [pc, #188]	; (800324c <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8003190:	213c      	movs	r1, #60	; 0x3c
 8003192:	483c      	ldr	r0, [pc, #240]	; (8003284 <HAL_TIM_PeriodElapsedCallback+0x1000>)
 8003194:	f7fd f886 	bl	80002a4 <compare_n_char>
 8003198:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 800319c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d123      	bne.n	80031ec <HAL_TIM_PeriodElapsedCallback+0xf68>
			sscanf((const char *)data_RX_11, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 80031a4:	4b2b      	ldr	r3, [pc, #172]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 80031a6:	9304      	str	r3, [sp, #16]
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 80031aa:	9303      	str	r3, [sp, #12]
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 80031ae:	9302      	str	r3, [sp, #8]
 80031b0:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	4b2b      	ldr	r3, [pc, #172]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <HAL_TIM_PeriodElapsedCallback+0xfe4>)
 80031ba:	4a2c      	ldr	r2, [pc, #176]	; (800326c <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 80031bc:	492c      	ldr	r1, [pc, #176]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0xfec>)
 80031be:	4832      	ldr	r0, [pc, #200]	; (8003288 <HAL_TIM_PeriodElapsedCallback+0x1004>)
 80031c0:	f006 f8c2 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 80031c4:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <HAL_TIM_PeriodElapsedCallback+0xff4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d107      	bne.n	80031dc <HAL_TIM_PeriodElapsedCallback+0xf58>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 80031cc:	4b2b      	ldr	r3, [pc, #172]	; (800327c <HAL_TIM_PeriodElapsedCallback+0xff8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f247 522f 	movw	r2, #29999	; 0x752f
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24
				data_avail_mqtt = 1;
 80031d6:	4b19      	ldr	r3, [pc, #100]	; (800323c <HAL_TIM_PeriodElapsedCallback+0xfb8>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 80031dc:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 80031de:	2201      	movs	r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
			count_test_re++;
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3301      	adds	r3, #1
 80031e8:	4a16      	ldr	r2, [pc, #88]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 80031ea:	6013      	str	r3, [r2, #0]
		}
		err = compare_n_char(data_RX_11, sizeof(data_RX_11), cmd_MQTT, sizeof(cmd_MQTT), match_buf);
 80031ec:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2310      	movs	r3, #16
 80031f2:	4a16      	ldr	r2, [pc, #88]	; (800324c <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 80031f4:	213c      	movs	r1, #60	; 0x3c
 80031f6:	4824      	ldr	r0, [pc, #144]	; (8003288 <HAL_TIM_PeriodElapsedCallback+0x1004>)
 80031f8:	f7fd f854 	bl	80002a4 <compare_n_char>
 80031fc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!err) {
 8003200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d14f      	bne.n	80032a8 <HAL_TIM_PeriodElapsedCallback+0x1024>
			sscanf((const char *)data_RX_12, "%d %d %d %d %d %d %d", &led, &quat, &bom, &mode, &nguong_adc_quang_tro, &nguong_adc_do_am_dat, &nguong_nhiet_do);
 8003208:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 800320a:	9304      	str	r3, [sp, #16]
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 800320e:	9303      	str	r3, [sp, #12]
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 8003212:	9302      	str	r3, [sp, #8]
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_TIM_PeriodElapsedCallback+0xfe4>)
 800321e:	4a13      	ldr	r2, [pc, #76]	; (800326c <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 8003220:	4913      	ldr	r1, [pc, #76]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0xfec>)
 8003222:	481a      	ldr	r0, [pc, #104]	; (800328c <HAL_TIM_PeriodElapsedCallback+0x1008>)
 8003224:	f006 f890 	bl	8009348 <siscanf>
			if (flag_k_cho_phep_nhan == 0) {
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <HAL_TIM_PeriodElapsedCallback+0xff4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d133      	bne.n	8003298 <HAL_TIM_PeriodElapsedCallback+0x1014>
				__HAL_TIM_SET_COUNTER(&htim1, 29999);
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_TIM_PeriodElapsedCallback+0xff8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f247 522f 	movw	r2, #29999	; 0x752f
 8003238:	e02a      	b.n	8003290 <HAL_TIM_PeriodElapsedCallback+0x100c>
 800323a:	bf00      	nop
 800323c:	20000be4 	.word	0x20000be4
 8003240:	20000230 	.word	0x20000230
 8003244:	2000095c 	.word	0x2000095c
 8003248:	20000994 	.word	0x20000994
 800324c:	20000204 	.word	0x20000204
 8003250:	200007f4 	.word	0x200007f4
 8003254:	2000021c 	.word	0x2000021c
 8003258:	20000218 	.word	0x20000218
 800325c:	20000214 	.word	0x20000214
 8003260:	20000220 	.word	0x20000220
 8003264:	200009f4 	.word	0x200009f4
 8003268:	200009f0 	.word	0x200009f0
 800326c:	200009ec 	.word	0x200009ec
 8003270:	0800a7f4 	.word	0x0800a7f4
 8003274:	20000830 	.word	0x20000830
 8003278:	20000bd4 	.word	0x20000bd4
 800327c:	20000378 	.word	0x20000378
 8003280:	2000086c 	.word	0x2000086c
 8003284:	200008a8 	.word	0x200008a8
 8003288:	200008e4 	.word	0x200008e4
 800328c:	20000920 	.word	0x20000920
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
				data_avail_mqtt = 1;
 8003292:	4ba3      	ldr	r3, [pc, #652]	; (8003520 <HAL_TIM_PeriodElapsedCallback+0x129c>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]
			}
			flag_ngat_keypad=1;
 8003298:	4ba2      	ldr	r3, [pc, #648]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]
			count_test_re++;
 800329e:	4ba2      	ldr	r3, [pc, #648]	; (8003528 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	4aa0      	ldr	r2, [pc, #640]	; (8003528 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 80032a6:	6013      	str	r3, [r2, #0]
		}

		cout_0 = 0;
 80032a8:	4ba0      	ldr	r3, [pc, #640]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
		cout_1 = 0;
 80032ae:	4ba0      	ldr	r3, [pc, #640]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
		cout_2 = 0;
 80032b4:	4b9f      	ldr	r3, [pc, #636]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
		cout_3 = 0;
 80032ba:	4b9f      	ldr	r3, [pc, #636]	; (8003538 <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
		cout_4 = 0;
 80032c0:	4b9e      	ldr	r3, [pc, #632]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x12b8>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
		cout_5 = 0;
 80032c6:	4b9e      	ldr	r3, [pc, #632]	; (8003540 <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
		cout_6 = 0;
 80032cc:	4b9d      	ldr	r3, [pc, #628]	; (8003544 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
		cout_7 = 0;
 80032d2:	4b9d      	ldr	r3, [pc, #628]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
		cout_8 = 0;
 80032d8:	4b9c      	ldr	r3, [pc, #624]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
		cout_9 = 0;
 80032de:	4b9c      	ldr	r3, [pc, #624]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
		cout_10 = 0;
 80032e4:	4b9b      	ldr	r3, [pc, #620]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x12d0>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
		cout_11 = 0;
 80032ea:	4b9b      	ldr	r3, [pc, #620]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x12d4>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
		cout_12 = 0;
 80032f0:	4b9a      	ldr	r3, [pc, #616]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x12d8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
		flag_cho_phep_gan = 0;
 80032f6:	4b9a      	ldr	r3, [pc, #616]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x12dc>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
		count_flag_gan = 0;
 80032fc:	4b99      	ldr	r3, [pc, #612]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x12e0>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

		//////////
		for (int i = 0; i < sizeof(data_RX); i++) {
 8003302:	2300      	movs	r3, #0
 8003304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003308:	e00a      	b.n	8003320 <HAL_TIM_PeriodElapsedCallback+0x109c>
			data_RX[i] = 0;
 800330a:	4a97      	ldr	r2, [pc, #604]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x12e4>)
 800330c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003310:	4413      	add	r3, r2
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX); i++) {
 8003316:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800331a:	3301      	adds	r3, #1
 800331c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003324:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003328:	d3ef      	bcc.n	800330a <HAL_TIM_PeriodElapsedCallback+0x1086>
		}
		for (int i = 0; i < sizeof(data_RX_0); i++) {
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003330:	e00a      	b.n	8003348 <HAL_TIM_PeriodElapsedCallback+0x10c4>
			data_RX_0[i] = 0;
 8003332:	4a8e      	ldr	r2, [pc, #568]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x12e8>)
 8003334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003338:	4413      	add	r3, r2
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_0); i++) {
 800333e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003342:	3301      	adds	r3, #1
 8003344:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003348:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800334c:	2b3b      	cmp	r3, #59	; 0x3b
 800334e:	d9f0      	bls.n	8003332 <HAL_TIM_PeriodElapsedCallback+0x10ae>
		}
		for (int i = 0; i < sizeof(data_RX_1); i++) {
 8003350:	2300      	movs	r3, #0
 8003352:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003356:	e00a      	b.n	800336e <HAL_TIM_PeriodElapsedCallback+0x10ea>
			data_RX_1[i] = 0;
 8003358:	4a85      	ldr	r2, [pc, #532]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 800335a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800335e:	4413      	add	r3, r2
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_1); i++) {
 8003364:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003368:	3301      	adds	r3, #1
 800336a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800336e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003372:	2b3b      	cmp	r3, #59	; 0x3b
 8003374:	d9f0      	bls.n	8003358 <HAL_TIM_PeriodElapsedCallback+0x10d4>
		}
		for (int i = 0; i < sizeof(data_RX_2); i++) {
 8003376:	2300      	movs	r3, #0
 8003378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800337c:	e00a      	b.n	8003394 <HAL_TIM_PeriodElapsedCallback+0x1110>
			data_RX_2[i] = 0;
 800337e:	4a7d      	ldr	r2, [pc, #500]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x12f0>)
 8003380:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003384:	4413      	add	r3, r2
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_2); i++) {
 800338a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800338e:	3301      	adds	r3, #1
 8003390:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003398:	2b3b      	cmp	r3, #59	; 0x3b
 800339a:	d9f0      	bls.n	800337e <HAL_TIM_PeriodElapsedCallback+0x10fa>
		}
		for (int i = 0; i < sizeof(data_RX_3); i++) {
 800339c:	2300      	movs	r3, #0
 800339e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033a2:	e00a      	b.n	80033ba <HAL_TIM_PeriodElapsedCallback+0x1136>
			data_RX_3[i] = 0;
 80033a4:	4a74      	ldr	r2, [pc, #464]	; (8003578 <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 80033a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033aa:	4413      	add	r3, r2
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_3); i++) {
 80033b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033b4:	3301      	adds	r3, #1
 80033b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033be:	2b3b      	cmp	r3, #59	; 0x3b
 80033c0:	d9f0      	bls.n	80033a4 <HAL_TIM_PeriodElapsedCallback+0x1120>
		}
		for (int i = 0; i < sizeof(data_RX_4); i++) {
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033c8:	e00a      	b.n	80033e0 <HAL_TIM_PeriodElapsedCallback+0x115c>
			data_RX_4[i] = 0;
 80033ca:	4a6c      	ldr	r2, [pc, #432]	; (800357c <HAL_TIM_PeriodElapsedCallback+0x12f8>)
 80033cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033d0:	4413      	add	r3, r2
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_4); i++) {
 80033d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033da:	3301      	adds	r3, #1
 80033dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033e4:	2b3b      	cmp	r3, #59	; 0x3b
 80033e6:	d9f0      	bls.n	80033ca <HAL_TIM_PeriodElapsedCallback+0x1146>
		}
		for (int i = 0; i < sizeof(data_RX_5); i++) {
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033ee:	e00a      	b.n	8003406 <HAL_TIM_PeriodElapsedCallback+0x1182>
			data_RX_5[i] = 0;
 80033f0:	4a63      	ldr	r2, [pc, #396]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x12fc>)
 80033f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033f6:	4413      	add	r3, r2
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_5); i++) {
 80033fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003400:	3301      	adds	r3, #1
 8003402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800340a:	2b3b      	cmp	r3, #59	; 0x3b
 800340c:	d9f0      	bls.n	80033f0 <HAL_TIM_PeriodElapsedCallback+0x116c>
		}
		for (int i = 0; i < sizeof(data_RX_6); i++) {
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003414:	e00a      	b.n	800342c <HAL_TIM_PeriodElapsedCallback+0x11a8>
			data_RX_6[i] = 0;
 8003416:	4a5b      	ldr	r2, [pc, #364]	; (8003584 <HAL_TIM_PeriodElapsedCallback+0x1300>)
 8003418:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800341c:	4413      	add	r3, r2
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_6); i++) {
 8003422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003426:	3301      	adds	r3, #1
 8003428:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800342c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003430:	2b3b      	cmp	r3, #59	; 0x3b
 8003432:	d9f0      	bls.n	8003416 <HAL_TIM_PeriodElapsedCallback+0x1192>
		}
		for (int i = 0; i < sizeof(data_RX_7); i++) {
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800343a:	e00a      	b.n	8003452 <HAL_TIM_PeriodElapsedCallback+0x11ce>
			data_RX_7[i] = 0;
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0x1304>)
 800343e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003442:	4413      	add	r3, r2
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_7); i++) {
 8003448:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800344c:	3301      	adds	r3, #1
 800344e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003456:	2b3b      	cmp	r3, #59	; 0x3b
 8003458:	d9f0      	bls.n	800343c <HAL_TIM_PeriodElapsedCallback+0x11b8>
		}
		for (int i = 0; i < sizeof(data_RX_8); i++) {
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003460:	e00a      	b.n	8003478 <HAL_TIM_PeriodElapsedCallback+0x11f4>
			data_RX_8[i] = 0;
 8003462:	4a4a      	ldr	r2, [pc, #296]	; (800358c <HAL_TIM_PeriodElapsedCallback+0x1308>)
 8003464:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003468:	4413      	add	r3, r2
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_8); i++) {
 800346e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003472:	3301      	adds	r3, #1
 8003474:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003478:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800347c:	2b3b      	cmp	r3, #59	; 0x3b
 800347e:	d9f0      	bls.n	8003462 <HAL_TIM_PeriodElapsedCallback+0x11de>
		}
		for (int i = 0; i < sizeof(data_RX_9); i++) {
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003486:	e00a      	b.n	800349e <HAL_TIM_PeriodElapsedCallback+0x121a>
			data_RX_9[i] = 0;
 8003488:	4a41      	ldr	r2, [pc, #260]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0x130c>)
 800348a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800348e:	4413      	add	r3, r2
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_9); i++) {
 8003494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003498:	3301      	adds	r3, #1
 800349a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800349e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034a2:	2b3b      	cmp	r3, #59	; 0x3b
 80034a4:	d9f0      	bls.n	8003488 <HAL_TIM_PeriodElapsedCallback+0x1204>
		}
		for (int i = 0; i < sizeof(data_RX_10); i++) {
 80034a6:	2300      	movs	r3, #0
 80034a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034ac:	e00a      	b.n	80034c4 <HAL_TIM_PeriodElapsedCallback+0x1240>
			data_RX_10[i] = 0;
 80034ae:	4a39      	ldr	r2, [pc, #228]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 80034b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034b4:	4413      	add	r3, r2
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_10); i++) {
 80034ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034be:	3301      	adds	r3, #1
 80034c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034c8:	2b3b      	cmp	r3, #59	; 0x3b
 80034ca:	d9f0      	bls.n	80034ae <HAL_TIM_PeriodElapsedCallback+0x122a>
		}
		for (int i = 0; i < sizeof(data_RX_11); i++) {
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034d2:	e00a      	b.n	80034ea <HAL_TIM_PeriodElapsedCallback+0x1266>
			data_RX_11[i] = 0;
 80034d4:	4a30      	ldr	r2, [pc, #192]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 80034d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034da:	4413      	add	r3, r2
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_11); i++) {
 80034e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034e4:	3301      	adds	r3, #1
 80034e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034ee:	2b3b      	cmp	r3, #59	; 0x3b
 80034f0:	d9f0      	bls.n	80034d4 <HAL_TIM_PeriodElapsedCallback+0x1250>
		}
		for (int i = 0; i < sizeof(data_RX_12); i++) {
 80034f2:	2300      	movs	r3, #0
 80034f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034f8:	e00a      	b.n	8003510 <HAL_TIM_PeriodElapsedCallback+0x128c>
			data_RX_12[i] = 0;
 80034fa:	4a28      	ldr	r2, [pc, #160]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x1318>)
 80034fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003500:	4413      	add	r3, r2
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data_RX_12); i++) {
 8003506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800350a:	3301      	adds	r3, #1
 800350c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003510:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003514:	2b3b      	cmp	r3, #59	; 0x3b
 8003516:	d9f0      	bls.n	80034fa <HAL_TIM_PeriodElapsedCallback+0x1276>
		}
	}
}
 8003518:	bf00      	nop
 800351a:	37d0      	adds	r7, #208	; 0xd0
 800351c:	46bd      	mov	sp, r7
 800351e:	bdb0      	pop	{r4, r5, r7, pc}
 8003520:	20000be4 	.word	0x20000be4
 8003524:	20000230 	.word	0x20000230
 8003528:	2000095c 	.word	0x2000095c
 800352c:	20000960 	.word	0x20000960
 8003530:	20000964 	.word	0x20000964
 8003534:	20000968 	.word	0x20000968
 8003538:	2000096c 	.word	0x2000096c
 800353c:	20000970 	.word	0x20000970
 8003540:	20000974 	.word	0x20000974
 8003544:	20000978 	.word	0x20000978
 8003548:	2000097c 	.word	0x2000097c
 800354c:	20000980 	.word	0x20000980
 8003550:	20000984 	.word	0x20000984
 8003554:	20000988 	.word	0x20000988
 8003558:	2000098c 	.word	0x2000098c
 800355c:	20000990 	.word	0x20000990
 8003560:	200009d0 	.word	0x200009d0
 8003564:	200009d4 	.word	0x200009d4
 8003568:	20000524 	.word	0x20000524
 800356c:	20000650 	.word	0x20000650
 8003570:	2000068c 	.word	0x2000068c
 8003574:	200006c8 	.word	0x200006c8
 8003578:	20000704 	.word	0x20000704
 800357c:	20000740 	.word	0x20000740
 8003580:	2000077c 	.word	0x2000077c
 8003584:	200007b8 	.word	0x200007b8
 8003588:	200007f4 	.word	0x200007f4
 800358c:	20000830 	.word	0x20000830
 8003590:	2000086c 	.word	0x2000086c
 8003594:	200008a8 	.word	0x200008a8
 8003598:	200008e4 	.word	0x200008e4
 800359c:	20000920 	.word	0x20000920

080035a0 <HAL_GPIO_EXTI_Callback>:
int count_so_lan_nhan = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b0c2      	sub	sp, #264	; 0x108
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4602      	mov	r2, r0
 80035a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035ac:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80035b0:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_2) {
 80035b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035b6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	f040 81bc 	bne.w	800393a <HAL_GPIO_EXTI_Callback+0x39a>
		if (state_ngat1 == 1) {
 80035c2:	4b8b      	ldr	r3, [pc, #556]	; (80037f0 <HAL_GPIO_EXTI_Callback+0x250>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	f040 81a6 	bne.w	8003918 <HAL_GPIO_EXTI_Callback+0x378>
			currentTime = HAL_GetTick();  // Lấy th�?i gian hiện tại
 80035cc:	f001 fbb0 	bl	8004d30 <HAL_GetTick>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4a88      	ldr	r2, [pc, #544]	; (80037f4 <HAL_GPIO_EXTI_Callback+0x254>)
 80035d4:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay || (flag_start_button == 1)) {
 80035d6:	4b87      	ldr	r3, [pc, #540]	; (80037f4 <HAL_GPIO_EXTI_Callback+0x254>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4b87      	ldr	r3, [pc, #540]	; (80037f8 <HAL_GPIO_EXTI_Callback+0x258>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	1ad2      	subs	r2, r2, r3
 80035e0:	4b86      	ldr	r3, [pc, #536]	; (80037fc <HAL_GPIO_EXTI_Callback+0x25c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d804      	bhi.n	80035f2 <HAL_GPIO_EXTI_Callback+0x52>
 80035e8:	4b85      	ldr	r3, [pc, #532]	; (8003800 <HAL_GPIO_EXTI_Callback+0x260>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	f040 8193 	bne.w	8003918 <HAL_GPIO_EXTI_Callback+0x378>
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0) {
 80035f2:	2104      	movs	r1, #4
 80035f4:	4883      	ldr	r0, [pc, #524]	; (8003804 <HAL_GPIO_EXTI_Callback+0x264>)
 80035f6:	f002 fe17 	bl	8006228 <HAL_GPIO_ReadPin>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f040 8187 	bne.w	8003910 <HAL_GPIO_EXTI_Callback+0x370>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003608:	487f      	ldr	r0, [pc, #508]	; (8003808 <HAL_GPIO_EXTI_Callback+0x268>)
 800360a:	f002 fe24 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 800360e:	2201      	movs	r2, #1
 8003610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003614:	487c      	ldr	r0, [pc, #496]	; (8003808 <HAL_GPIO_EXTI_Callback+0x268>)
 8003616:	f002 fe1e 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800361a:	2201      	movs	r2, #1
 800361c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003620:	4879      	ldr	r0, [pc, #484]	; (8003808 <HAL_GPIO_EXTI_Callback+0x268>)
 8003622:	f002 fe18 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8003626:	2201      	movs	r2, #1
 8003628:	2101      	movs	r1, #1
 800362a:	4877      	ldr	r0, [pc, #476]	; (8003808 <HAL_GPIO_EXTI_Callback+0x268>)
 800362c:	f002 fe13 	bl	8006256 <HAL_GPIO_WritePin>
					if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0) && (flag_disable_nut_nhan == 0)) {
 8003630:	2104      	movs	r1, #4
 8003632:	4874      	ldr	r0, [pc, #464]	; (8003804 <HAL_GPIO_EXTI_Callback+0x264>)
 8003634:	f002 fdf8 	bl	8006228 <HAL_GPIO_ReadPin>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d133      	bne.n	80036a6 <HAL_GPIO_EXTI_Callback+0x106>
 800363e:	4b73      	ldr	r3, [pc, #460]	; (800380c <HAL_GPIO_EXTI_Callback+0x26c>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	f083 0301 	eor.w	r3, r3, #1
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d02c      	beq.n	80036a6 <HAL_GPIO_EXTI_Callback+0x106>
						GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]
						GPIO_InitStruct.Pin = GPIO_PIN_2;
 800365a:	2304      	movs	r3, #4
 800365c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003660:	4b6b      	ldr	r3, [pc, #428]	; (8003810 <HAL_GPIO_EXTI_Callback+0x270>)
 8003662:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003666:	2301      	movs	r3, #1
 8003668:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003670:	4619      	mov	r1, r3
 8003672:	4864      	ldr	r0, [pc, #400]	; (8003804 <HAL_GPIO_EXTI_Callback+0x264>)
 8003674:	f002 fb98 	bl	8005da8 <HAL_GPIO_Init>
						num1_state1 = num1;
 8003678:	4b66      	ldr	r3, [pc, #408]	; (8003814 <HAL_GPIO_EXTI_Callback+0x274>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a66      	ldr	r2, [pc, #408]	; (8003818 <HAL_GPIO_EXTI_Callback+0x278>)
 800367e:	6013      	str	r3, [r2, #0]
						flag_number_state1 = flag_number;
 8003680:	4b66      	ldr	r3, [pc, #408]	; (800381c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a66      	ldr	r2, [pc, #408]	; (8003820 <HAL_GPIO_EXTI_Callback+0x280>)
 8003686:	6013      	str	r3, [r2, #0]
						num1_state1++;
 8003688:	4b63      	ldr	r3, [pc, #396]	; (8003818 <HAL_GPIO_EXTI_Callback+0x278>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	4a62      	ldr	r2, [pc, #392]	; (8003818 <HAL_GPIO_EXTI_Callback+0x278>)
 8003690:	6013      	str	r3, [r2, #0]
						flag_number_state1 = 1;
 8003692:	4b63      	ldr	r3, [pc, #396]	; (8003820 <HAL_GPIO_EXTI_Callback+0x280>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]
						state_ngat2 = 1;
 8003698:	4b62      	ldr	r3, [pc, #392]	; (8003824 <HAL_GPIO_EXTI_Callback+0x284>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]
						state_ngat1 = 0;
 800369e:	4b54      	ldr	r3, [pc, #336]	; (80037f0 <HAL_GPIO_EXTI_Callback+0x250>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
					if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0) && (flag_disable_nut_nhan == 0)) {
 80036a4:	e11d      	b.n	80038e2 <HAL_GPIO_EXTI_Callback+0x342>
						//					num1++;
						//					flag_number=1;
						//					flag_ngat_keypad=1;

					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 80036a6:	2201      	movs	r2, #1
 80036a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036ac:	4856      	ldr	r0, [pc, #344]	; (8003808 <HAL_GPIO_EXTI_Callback+0x268>)
 80036ae:	f002 fdd2 	bl	8006256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036b8:	4853      	ldr	r0, [pc, #332]	; (8003808 <HAL_GPIO_EXTI_Callback+0x268>)
 80036ba:	f002 fdcc 	bl	8006256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80036be:	2201      	movs	r2, #1
 80036c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036c4:	4850      	ldr	r0, [pc, #320]	; (8003808 <HAL_GPIO_EXTI_Callback+0x268>)
 80036c6:	f002 fdc6 	bl	8006256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80036ca:	2201      	movs	r2, #1
 80036cc:	2101      	movs	r1, #1
 80036ce:	484e      	ldr	r0, [pc, #312]	; (8003808 <HAL_GPIO_EXTI_Callback+0x268>)
 80036d0:	f002 fdc1 	bl	8006256 <HAL_GPIO_WritePin>
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0) && (flag_disable_nut_nhan == 0)) {
 80036d4:	2104      	movs	r1, #4
 80036d6:	484b      	ldr	r0, [pc, #300]	; (8003804 <HAL_GPIO_EXTI_Callback+0x264>)
 80036d8:	f002 fda6 	bl	8006228 <HAL_GPIO_ReadPin>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d133      	bne.n	800374a <HAL_GPIO_EXTI_Callback+0x1aa>
 80036e2:	4b4a      	ldr	r3, [pc, #296]	; (800380c <HAL_GPIO_EXTI_Callback+0x26c>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	f083 0301 	eor.w	r3, r3, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02c      	beq.n	800374a <HAL_GPIO_EXTI_Callback+0x1aa>
							GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
							GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036fe:	2304      	movs	r3, #4
 8003700:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
							GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003704:	4b42      	ldr	r3, [pc, #264]	; (8003810 <HAL_GPIO_EXTI_Callback+0x270>)
 8003706:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
							GPIO_InitStruct.Pull = GPIO_PULLUP;
 800370a:	2301      	movs	r3, #1
 800370c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
							HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003710:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003714:	4619      	mov	r1, r3
 8003716:	483b      	ldr	r0, [pc, #236]	; (8003804 <HAL_GPIO_EXTI_Callback+0x264>)
 8003718:	f002 fb46 	bl	8005da8 <HAL_GPIO_Init>
							num2_state1 = num2;
 800371c:	4b42      	ldr	r3, [pc, #264]	; (8003828 <HAL_GPIO_EXTI_Callback+0x288>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a42      	ldr	r2, [pc, #264]	; (800382c <HAL_GPIO_EXTI_Callback+0x28c>)
 8003722:	6013      	str	r3, [r2, #0]
							flag_number_state1 = flag_number;
 8003724:	4b3d      	ldr	r3, [pc, #244]	; (800381c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3d      	ldr	r2, [pc, #244]	; (8003820 <HAL_GPIO_EXTI_Callback+0x280>)
 800372a:	6013      	str	r3, [r2, #0]
							num2_state1++;
 800372c:	4b3f      	ldr	r3, [pc, #252]	; (800382c <HAL_GPIO_EXTI_Callback+0x28c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	4a3e      	ldr	r2, [pc, #248]	; (800382c <HAL_GPIO_EXTI_Callback+0x28c>)
 8003734:	6013      	str	r3, [r2, #0]
							flag_number_state1 = 2;
 8003736:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <HAL_GPIO_EXTI_Callback+0x280>)
 8003738:	2202      	movs	r2, #2
 800373a:	601a      	str	r2, [r3, #0]
							state_ngat2 = 1;
 800373c:	4b39      	ldr	r3, [pc, #228]	; (8003824 <HAL_GPIO_EXTI_Callback+0x284>)
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]
							state_ngat1 = 0;
 8003742:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_GPIO_EXTI_Callback+0x250>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0) && (flag_disable_nut_nhan == 0)) {
 8003748:	e0cb      	b.n	80038e2 <HAL_GPIO_EXTI_Callback+0x342>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 800374a:	2201      	movs	r2, #1
 800374c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003750:	482d      	ldr	r0, [pc, #180]	; (8003808 <HAL_GPIO_EXTI_Callback+0x268>)
 8003752:	f002 fd80 	bl	8006256 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8003756:	2201      	movs	r2, #1
 8003758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800375c:	482a      	ldr	r0, [pc, #168]	; (8003808 <HAL_GPIO_EXTI_Callback+0x268>)
 800375e:	f002 fd7a 	bl	8006256 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003768:	4827      	ldr	r0, [pc, #156]	; (8003808 <HAL_GPIO_EXTI_Callback+0x268>)
 800376a:	f002 fd74 	bl	8006256 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800376e:	2201      	movs	r2, #1
 8003770:	2101      	movs	r1, #1
 8003772:	4825      	ldr	r0, [pc, #148]	; (8003808 <HAL_GPIO_EXTI_Callback+0x268>)
 8003774:	f002 fd6f 	bl	8006256 <HAL_GPIO_WritePin>
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0) && (flag_disable_nut_nhan == 0)) {
 8003778:	2104      	movs	r1, #4
 800377a:	4822      	ldr	r0, [pc, #136]	; (8003804 <HAL_GPIO_EXTI_Callback+0x264>)
 800377c:	f002 fd54 	bl	8006228 <HAL_GPIO_ReadPin>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d158      	bne.n	8003838 <HAL_GPIO_EXTI_Callback+0x298>
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <HAL_GPIO_EXTI_Callback+0x26c>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	f083 0301 	eor.w	r3, r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d051      	beq.n	8003838 <HAL_GPIO_EXTI_Callback+0x298>
								GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
								GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037a2:	2304      	movs	r3, #4
 80037a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
								GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037a8:	4b19      	ldr	r3, [pc, #100]	; (8003810 <HAL_GPIO_EXTI_Callback+0x270>)
 80037aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
								GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
								HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80037b8:	4619      	mov	r1, r3
 80037ba:	4812      	ldr	r0, [pc, #72]	; (8003804 <HAL_GPIO_EXTI_Callback+0x264>)
 80037bc:	f002 faf4 	bl	8005da8 <HAL_GPIO_Init>
								num3_state1 = num3;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_GPIO_EXTI_Callback+0x290>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1b      	ldr	r2, [pc, #108]	; (8003834 <HAL_GPIO_EXTI_Callback+0x294>)
 80037c6:	6013      	str	r3, [r2, #0]
								flag_number_state1 = flag_number;
 80037c8:	4b14      	ldr	r3, [pc, #80]	; (800381c <HAL_GPIO_EXTI_Callback+0x27c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a14      	ldr	r2, [pc, #80]	; (8003820 <HAL_GPIO_EXTI_Callback+0x280>)
 80037ce:	6013      	str	r3, [r2, #0]
								num3_state1++;
 80037d0:	4b18      	ldr	r3, [pc, #96]	; (8003834 <HAL_GPIO_EXTI_Callback+0x294>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_GPIO_EXTI_Callback+0x294>)
 80037d8:	6013      	str	r3, [r2, #0]
								flag_number_state1 = 3;
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_GPIO_EXTI_Callback+0x280>)
 80037dc:	2203      	movs	r2, #3
 80037de:	601a      	str	r2, [r3, #0]
								state_ngat2 = 1;
 80037e0:	4b10      	ldr	r3, [pc, #64]	; (8003824 <HAL_GPIO_EXTI_Callback+0x284>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
								state_ngat1 = 0;
 80037e6:	4b02      	ldr	r3, [pc, #8]	; (80037f0 <HAL_GPIO_EXTI_Callback+0x250>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0) && (flag_disable_nut_nhan == 0)) {
 80037ec:	e079      	b.n	80038e2 <HAL_GPIO_EXTI_Callback+0x342>
 80037ee:	bf00      	nop
 80037f0:	20000244 	.word	0x20000244
 80037f4:	20000a00 	.word	0x20000a00
 80037f8:	200009fc 	.word	0x200009fc
 80037fc:	20000228 	.word	0x20000228
 8003800:	20000240 	.word	0x20000240
 8003804:	40010800 	.word	0x40010800
 8003808:	40010c00 	.word	0x40010c00
 800380c:	20000b64 	.word	0x20000b64
 8003810:	10110000 	.word	0x10110000
 8003814:	20000a04 	.word	0x20000a04
 8003818:	20000b78 	.word	0x20000b78
 800381c:	20000afc 	.word	0x20000afc
 8003820:	20000b74 	.word	0x20000b74
 8003824:	20000bb4 	.word	0x20000bb4
 8003828:	20000a08 	.word	0x20000a08
 800382c:	20000b7c 	.word	0x20000b7c
 8003830:	20000a0c 	.word	0x20000a0c
 8003834:	20000b80 	.word	0x20000b80
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8003838:	2201      	movs	r2, #1
 800383a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800383e:	48a5      	ldr	r0, [pc, #660]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 8003840:	f002 fd09 	bl	8006256 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8003844:	2201      	movs	r2, #1
 8003846:	f44f 7100 	mov.w	r1, #512	; 0x200
 800384a:	48a2      	ldr	r0, [pc, #648]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 800384c:	f002 fd03 	bl	8006256 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8003850:	2201      	movs	r2, #1
 8003852:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003856:	489f      	ldr	r0, [pc, #636]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 8003858:	f002 fcfd 	bl	8006256 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800385c:	2200      	movs	r2, #0
 800385e:	2101      	movs	r1, #1
 8003860:	489c      	ldr	r0, [pc, #624]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 8003862:	f002 fcf8 	bl	8006256 <HAL_GPIO_WritePin>
								if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0) && (flag_disable_nut_nhan == 0)) {
 8003866:	2104      	movs	r1, #4
 8003868:	489b      	ldr	r0, [pc, #620]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x538>)
 800386a:	f002 fcdd 	bl	8006228 <HAL_GPIO_ReadPin>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d136      	bne.n	80038e2 <HAL_GPIO_EXTI_Callback+0x342>
 8003874:	4b99      	ldr	r3, [pc, #612]	; (8003adc <HAL_GPIO_EXTI_Callback+0x53c>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	f083 0301 	eor.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d02f      	beq.n	80038e2 <HAL_GPIO_EXTI_Callback+0x342>
									if (flag_di_qua_nhap_mat_khau) {
 8003882:	4b97      	ldr	r3, [pc, #604]	; (8003ae0 <HAL_GPIO_EXTI_Callback+0x540>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d02b      	beq.n	80038e2 <HAL_GPIO_EXTI_Callback+0x342>
										GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	609a      	str	r2, [r3, #8]
 8003896:	60da      	str	r2, [r3, #12]
										GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003898:	2304      	movs	r3, #4
 800389a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
										GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800389e:	4b91      	ldr	r3, [pc, #580]	; (8003ae4 <HAL_GPIO_EXTI_Callback+0x544>)
 80038a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
										GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
										HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80038ae:	4619      	mov	r1, r3
 80038b0:	4889      	ldr	r0, [pc, #548]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x538>)
 80038b2:	f002 fa79 	bl	8005da8 <HAL_GPIO_Init>
										led_state1 = led;
 80038b6:	4b8c      	ldr	r3, [pc, #560]	; (8003ae8 <HAL_GPIO_EXTI_Callback+0x548>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a8c      	ldr	r2, [pc, #560]	; (8003aec <HAL_GPIO_EXTI_Callback+0x54c>)
 80038bc:	6013      	str	r3, [r2, #0]
										flag_number_state1 = flag_number;
 80038be:	4b8c      	ldr	r3, [pc, #560]	; (8003af0 <HAL_GPIO_EXTI_Callback+0x550>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a8c      	ldr	r2, [pc, #560]	; (8003af4 <HAL_GPIO_EXTI_Callback+0x554>)
 80038c4:	6013      	str	r3, [r2, #0]
										led_state1++;
 80038c6:	4b89      	ldr	r3, [pc, #548]	; (8003aec <HAL_GPIO_EXTI_Callback+0x54c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3301      	adds	r3, #1
 80038cc:	4a87      	ldr	r2, [pc, #540]	; (8003aec <HAL_GPIO_EXTI_Callback+0x54c>)
 80038ce:	6013      	str	r3, [r2, #0]
										flag_number_state1 = 10;
 80038d0:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_GPIO_EXTI_Callback+0x554>)
 80038d2:	220a      	movs	r2, #10
 80038d4:	601a      	str	r2, [r3, #0]
										state_ngat2 = 1;
 80038d6:	4b88      	ldr	r3, [pc, #544]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x558>)
 80038d8:	2201      	movs	r2, #1
 80038da:	601a      	str	r2, [r3, #0]
										state_ngat1 = 0;
 80038dc:	4b87      	ldr	r3, [pc, #540]	; (8003afc <HAL_GPIO_EXTI_Callback+0x55c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 80038e2:	2200      	movs	r2, #0
 80038e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038e8:	487a      	ldr	r0, [pc, #488]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 80038ea:	f002 fcb4 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 80038ee:	2200      	movs	r2, #0
 80038f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038f4:	4877      	ldr	r0, [pc, #476]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 80038f6:	f002 fcae 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003900:	4874      	ldr	r0, [pc, #464]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 8003902:	f002 fca8 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	2101      	movs	r1, #1
 800390a:	4872      	ldr	r0, [pc, #456]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 800390c:	f002 fca3 	bl	8006256 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime;  // Cập nhật th�?i gian debounce cuối cùng
 8003910:	4b7b      	ldr	r3, [pc, #492]	; (8003b00 <HAL_GPIO_EXTI_Callback+0x560>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a7b      	ldr	r2, [pc, #492]	; (8003b04 <HAL_GPIO_EXTI_Callback+0x564>)
 8003916:	6013      	str	r3, [r2, #0]
			}
		}

		if (state_ngat2 == 1) {
 8003918:	4b77      	ldr	r3, [pc, #476]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x558>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10c      	bne.n	800393a <HAL_GPIO_EXTI_Callback+0x39a>
			//						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
			//					}
			//				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
			//				}
			//			}
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003920:	4b79      	ldr	r3, [pc, #484]	; (8003b08 <HAL_GPIO_EXTI_Callback+0x568>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2200      	movs	r2, #0
 8003926:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim3);
 8003928:	4877      	ldr	r0, [pc, #476]	; (8003b08 <HAL_GPIO_EXTI_Callback+0x568>)
 800392a:	f003 febf 	bl	80076ac <HAL_TIM_Base_Start_IT>
			flag_ngat_nut_nhan = 1;
 800392e:	4b77      	ldr	r3, [pc, #476]	; (8003b0c <HAL_GPIO_EXTI_Callback+0x56c>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]
			flag_switch_timer3 = 1;
 8003934:	4b76      	ldr	r3, [pc, #472]	; (8003b10 <HAL_GPIO_EXTI_Callback+0x570>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == GPIO_PIN_3) {
 800393a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800393e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	2b08      	cmp	r3, #8
 8003946:	f040 81c4 	bne.w	8003cd2 <HAL_GPIO_EXTI_Callback+0x732>
		if (state_ngat1 == 1) {
 800394a:	4b6c      	ldr	r3, [pc, #432]	; (8003afc <HAL_GPIO_EXTI_Callback+0x55c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b01      	cmp	r3, #1
 8003950:	f040 81ae 	bne.w	8003cb0 <HAL_GPIO_EXTI_Callback+0x710>
			currentTime = HAL_GetTick();  // Lấy th�?i gian hiện tại
 8003954:	f001 f9ec 	bl	8004d30 <HAL_GetTick>
 8003958:	4603      	mov	r3, r0
 800395a:	4a69      	ldr	r2, [pc, #420]	; (8003b00 <HAL_GPIO_EXTI_Callback+0x560>)
 800395c:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay || (flag_start_button == 1)) {
 800395e:	4b68      	ldr	r3, [pc, #416]	; (8003b00 <HAL_GPIO_EXTI_Callback+0x560>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b68      	ldr	r3, [pc, #416]	; (8003b04 <HAL_GPIO_EXTI_Callback+0x564>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	1ad2      	subs	r2, r2, r3
 8003968:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <HAL_GPIO_EXTI_Callback+0x574>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d804      	bhi.n	800397a <HAL_GPIO_EXTI_Callback+0x3da>
 8003970:	4b69      	ldr	r3, [pc, #420]	; (8003b18 <HAL_GPIO_EXTI_Callback+0x578>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	f040 819b 	bne.w	8003cb0 <HAL_GPIO_EXTI_Callback+0x710>
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) {
 800397a:	2108      	movs	r1, #8
 800397c:	4856      	ldr	r0, [pc, #344]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x538>)
 800397e:	f002 fc53 	bl	8006228 <HAL_GPIO_ReadPin>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 818f 	bne.w	8003ca8 <HAL_GPIO_EXTI_Callback+0x708>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003990:	4850      	ldr	r0, [pc, #320]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 8003992:	f002 fc60 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8003996:	2201      	movs	r2, #1
 8003998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800399c:	484d      	ldr	r0, [pc, #308]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 800399e:	f002 fc5a 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80039a2:	2201      	movs	r2, #1
 80039a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039a8:	484a      	ldr	r0, [pc, #296]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 80039aa:	f002 fc54 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80039ae:	2201      	movs	r2, #1
 80039b0:	2101      	movs	r1, #1
 80039b2:	4848      	ldr	r0, [pc, #288]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 80039b4:	f002 fc4f 	bl	8006256 <HAL_GPIO_WritePin>
					if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) && (flag_disable_nut_nhan == 0)) {
 80039b8:	2108      	movs	r1, #8
 80039ba:	4847      	ldr	r0, [pc, #284]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x538>)
 80039bc:	f002 fc34 	bl	8006228 <HAL_GPIO_ReadPin>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d133      	bne.n	8003a2e <HAL_GPIO_EXTI_Callback+0x48e>
 80039c6:	4b45      	ldr	r3, [pc, #276]	; (8003adc <HAL_GPIO_EXTI_Callback+0x53c>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	f083 0301 	eor.w	r3, r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d02c      	beq.n	8003a2e <HAL_GPIO_EXTI_Callback+0x48e>
						GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	60da      	str	r2, [r3, #12]
						GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039e2:	2308      	movs	r3, #8
 80039e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039e8:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <HAL_GPIO_EXTI_Callback+0x544>)
 80039ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80039f8:	4619      	mov	r1, r3
 80039fa:	4837      	ldr	r0, [pc, #220]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x538>)
 80039fc:	f002 f9d4 	bl	8005da8 <HAL_GPIO_Init>
						num4_state1 = num4;
 8003a00:	4b46      	ldr	r3, [pc, #280]	; (8003b1c <HAL_GPIO_EXTI_Callback+0x57c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a46      	ldr	r2, [pc, #280]	; (8003b20 <HAL_GPIO_EXTI_Callback+0x580>)
 8003a06:	6013      	str	r3, [r2, #0]
						flag_number_state1 = flag_number;
 8003a08:	4b39      	ldr	r3, [pc, #228]	; (8003af0 <HAL_GPIO_EXTI_Callback+0x550>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a39      	ldr	r2, [pc, #228]	; (8003af4 <HAL_GPIO_EXTI_Callback+0x554>)
 8003a0e:	6013      	str	r3, [r2, #0]
						num4_state1++;
 8003a10:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <HAL_GPIO_EXTI_Callback+0x580>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3301      	adds	r3, #1
 8003a16:	4a42      	ldr	r2, [pc, #264]	; (8003b20 <HAL_GPIO_EXTI_Callback+0x580>)
 8003a18:	6013      	str	r3, [r2, #0]
						flag_number_state1 = 4;
 8003a1a:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <HAL_GPIO_EXTI_Callback+0x554>)
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	601a      	str	r2, [r3, #0]
						state_ngat2 = 1;
 8003a20:	4b35      	ldr	r3, [pc, #212]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x558>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
						state_ngat1 = 0;
 8003a26:	4b35      	ldr	r3, [pc, #212]	; (8003afc <HAL_GPIO_EXTI_Callback+0x55c>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
					if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) && (flag_disable_nut_nhan == 0)) {
 8003a2c:	e125      	b.n	8003c7a <HAL_GPIO_EXTI_Callback+0x6da>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a34:	4827      	ldr	r0, [pc, #156]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 8003a36:	f002 fc0e 	bl	8006256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a40:	4824      	ldr	r0, [pc, #144]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 8003a42:	f002 fc08 	bl	8006256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8003a46:	2201      	movs	r2, #1
 8003a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a4c:	4821      	ldr	r0, [pc, #132]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 8003a4e:	f002 fc02 	bl	8006256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8003a52:	2201      	movs	r2, #1
 8003a54:	2101      	movs	r1, #1
 8003a56:	481f      	ldr	r0, [pc, #124]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x534>)
 8003a58:	f002 fbfd 	bl	8006256 <HAL_GPIO_WritePin>
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) && (flag_disable_nut_nhan == 0)) {
 8003a5c:	2108      	movs	r1, #8
 8003a5e:	481e      	ldr	r0, [pc, #120]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x538>)
 8003a60:	f002 fbe2 	bl	8006228 <HAL_GPIO_ReadPin>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d160      	bne.n	8003b2c <HAL_GPIO_EXTI_Callback+0x58c>
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	; (8003adc <HAL_GPIO_EXTI_Callback+0x53c>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	f083 0301 	eor.w	r3, r3, #1
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d059      	beq.n	8003b2c <HAL_GPIO_EXTI_Callback+0x58c>
							GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a78:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]
							GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a86:	2308      	movs	r3, #8
 8003a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
							GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a8c:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <HAL_GPIO_EXTI_Callback+0x544>)
 8003a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
							GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
							HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a98:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	480e      	ldr	r0, [pc, #56]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x538>)
 8003aa0:	f002 f982 	bl	8005da8 <HAL_GPIO_Init>
							num5_state1 = num5;
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <HAL_GPIO_EXTI_Callback+0x584>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1f      	ldr	r2, [pc, #124]	; (8003b28 <HAL_GPIO_EXTI_Callback+0x588>)
 8003aaa:	6013      	str	r3, [r2, #0]
							flag_number_state1 = flag_number;
 8003aac:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <HAL_GPIO_EXTI_Callback+0x550>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a10      	ldr	r2, [pc, #64]	; (8003af4 <HAL_GPIO_EXTI_Callback+0x554>)
 8003ab2:	6013      	str	r3, [r2, #0]
							num5_state1++;
 8003ab4:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <HAL_GPIO_EXTI_Callback+0x588>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	4a1b      	ldr	r2, [pc, #108]	; (8003b28 <HAL_GPIO_EXTI_Callback+0x588>)
 8003abc:	6013      	str	r3, [r2, #0]
							flag_number_state1 = 5;
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <HAL_GPIO_EXTI_Callback+0x554>)
 8003ac0:	2205      	movs	r2, #5
 8003ac2:	601a      	str	r2, [r3, #0]
							state_ngat2 = 1;
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x558>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
							state_ngat1 = 0;
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <HAL_GPIO_EXTI_Callback+0x55c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) && (flag_disable_nut_nhan == 0)) {
 8003ad0:	e0d3      	b.n	8003c7a <HAL_GPIO_EXTI_Callback+0x6da>
 8003ad2:	bf00      	nop
 8003ad4:	40010c00 	.word	0x40010c00
 8003ad8:	40010800 	.word	0x40010800
 8003adc:	20000b64 	.word	0x20000b64
 8003ae0:	20000b60 	.word	0x20000b60
 8003ae4:	10110000 	.word	0x10110000
 8003ae8:	200009ec 	.word	0x200009ec
 8003aec:	20000b84 	.word	0x20000b84
 8003af0:	20000afc 	.word	0x20000afc
 8003af4:	20000b74 	.word	0x20000b74
 8003af8:	20000bb4 	.word	0x20000bb4
 8003afc:	20000244 	.word	0x20000244
 8003b00:	20000a00 	.word	0x20000a00
 8003b04:	200009fc 	.word	0x200009fc
 8003b08:	20000408 	.word	0x20000408
 8003b0c:	20000bbc 	.word	0x20000bbc
 8003b10:	20000bc4 	.word	0x20000bc4
 8003b14:	20000228 	.word	0x20000228
 8003b18:	20000240 	.word	0x20000240
 8003b1c:	20000a10 	.word	0x20000a10
 8003b20:	20000b88 	.word	0x20000b88
 8003b24:	20000a14 	.word	0x20000a14
 8003b28:	20000b8c 	.word	0x20000b8c
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b32:	48a8      	ldr	r0, [pc, #672]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003b34:	f002 fb8f 	bl	8006256 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b3e:	48a5      	ldr	r0, [pc, #660]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003b40:	f002 fb89 	bl	8006256 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8003b44:	2200      	movs	r2, #0
 8003b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b4a:	48a2      	ldr	r0, [pc, #648]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003b4c:	f002 fb83 	bl	8006256 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8003b50:	2201      	movs	r2, #1
 8003b52:	2101      	movs	r1, #1
 8003b54:	489f      	ldr	r0, [pc, #636]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003b56:	f002 fb7e 	bl	8006256 <HAL_GPIO_WritePin>
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) && (flag_disable_nut_nhan == 0)) {
 8003b5a:	2108      	movs	r1, #8
 8003b5c:	489e      	ldr	r0, [pc, #632]	; (8003dd8 <HAL_GPIO_EXTI_Callback+0x838>)
 8003b5e:	f002 fb63 	bl	8006228 <HAL_GPIO_ReadPin>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d133      	bne.n	8003bd0 <HAL_GPIO_EXTI_Callback+0x630>
 8003b68:	4b9c      	ldr	r3, [pc, #624]	; (8003ddc <HAL_GPIO_EXTI_Callback+0x83c>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	f083 0301 	eor.w	r3, r3, #1
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d02c      	beq.n	8003bd0 <HAL_GPIO_EXTI_Callback+0x630>
								GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b76:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	609a      	str	r2, [r3, #8]
 8003b82:	60da      	str	r2, [r3, #12]
								GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b84:	2308      	movs	r3, #8
 8003b86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
								GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b8a:	4b95      	ldr	r3, [pc, #596]	; (8003de0 <HAL_GPIO_EXTI_Callback+0x840>)
 8003b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
								GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
								HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b96:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	488e      	ldr	r0, [pc, #568]	; (8003dd8 <HAL_GPIO_EXTI_Callback+0x838>)
 8003b9e:	f002 f903 	bl	8005da8 <HAL_GPIO_Init>
								num6_state1 = num6;
 8003ba2:	4b90      	ldr	r3, [pc, #576]	; (8003de4 <HAL_GPIO_EXTI_Callback+0x844>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a90      	ldr	r2, [pc, #576]	; (8003de8 <HAL_GPIO_EXTI_Callback+0x848>)
 8003ba8:	6013      	str	r3, [r2, #0]
								flag_number_state1 = flag_number;
 8003baa:	4b90      	ldr	r3, [pc, #576]	; (8003dec <HAL_GPIO_EXTI_Callback+0x84c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a90      	ldr	r2, [pc, #576]	; (8003df0 <HAL_GPIO_EXTI_Callback+0x850>)
 8003bb0:	6013      	str	r3, [r2, #0]
								num6_state1++;
 8003bb2:	4b8d      	ldr	r3, [pc, #564]	; (8003de8 <HAL_GPIO_EXTI_Callback+0x848>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	4a8b      	ldr	r2, [pc, #556]	; (8003de8 <HAL_GPIO_EXTI_Callback+0x848>)
 8003bba:	6013      	str	r3, [r2, #0]
								flag_number_state1 = 6;
 8003bbc:	4b8c      	ldr	r3, [pc, #560]	; (8003df0 <HAL_GPIO_EXTI_Callback+0x850>)
 8003bbe:	2206      	movs	r2, #6
 8003bc0:	601a      	str	r2, [r3, #0]
								state_ngat2 = 1;
 8003bc2:	4b8c      	ldr	r3, [pc, #560]	; (8003df4 <HAL_GPIO_EXTI_Callback+0x854>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
								state_ngat1 = 0;
 8003bc8:	4b8b      	ldr	r3, [pc, #556]	; (8003df8 <HAL_GPIO_EXTI_Callback+0x858>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) && (flag_disable_nut_nhan == 0)) {
 8003bce:	e054      	b.n	8003c7a <HAL_GPIO_EXTI_Callback+0x6da>
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bd6:	487f      	ldr	r0, [pc, #508]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003bd8:	f002 fb3d 	bl	8006256 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003be2:	487c      	ldr	r0, [pc, #496]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003be4:	f002 fb37 	bl	8006256 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8003be8:	2201      	movs	r2, #1
 8003bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bee:	4879      	ldr	r0, [pc, #484]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003bf0:	f002 fb31 	bl	8006256 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	4876      	ldr	r0, [pc, #472]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003bfa:	f002 fb2c 	bl	8006256 <HAL_GPIO_WritePin>
								if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0) && (flag_disable_nut_nhan == 0)) {
 8003bfe:	2108      	movs	r1, #8
 8003c00:	4875      	ldr	r0, [pc, #468]	; (8003dd8 <HAL_GPIO_EXTI_Callback+0x838>)
 8003c02:	f002 fb11 	bl	8006228 <HAL_GPIO_ReadPin>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d136      	bne.n	8003c7a <HAL_GPIO_EXTI_Callback+0x6da>
 8003c0c:	4b73      	ldr	r3, [pc, #460]	; (8003ddc <HAL_GPIO_EXTI_Callback+0x83c>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	f083 0301 	eor.w	r3, r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d02f      	beq.n	8003c7a <HAL_GPIO_EXTI_Callback+0x6da>
									if (flag_di_qua_nhap_mat_khau) {
 8003c1a:	4b78      	ldr	r3, [pc, #480]	; (8003dfc <HAL_GPIO_EXTI_Callback+0x85c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d02b      	beq.n	8003c7a <HAL_GPIO_EXTI_Callback+0x6da>
										GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c22:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	60da      	str	r2, [r3, #12]
										GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c30:	2308      	movs	r3, #8
 8003c32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
										GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c36:	4b6a      	ldr	r3, [pc, #424]	; (8003de0 <HAL_GPIO_EXTI_Callback+0x840>)
 8003c38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
										GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
										HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c42:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c46:	4619      	mov	r1, r3
 8003c48:	4863      	ldr	r0, [pc, #396]	; (8003dd8 <HAL_GPIO_EXTI_Callback+0x838>)
 8003c4a:	f002 f8ad 	bl	8005da8 <HAL_GPIO_Init>
										quat_state1 = quat;
 8003c4e:	4b6c      	ldr	r3, [pc, #432]	; (8003e00 <HAL_GPIO_EXTI_Callback+0x860>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6c      	ldr	r2, [pc, #432]	; (8003e04 <HAL_GPIO_EXTI_Callback+0x864>)
 8003c54:	6013      	str	r3, [r2, #0]
										flag_number_state1 = flag_number;
 8003c56:	4b65      	ldr	r3, [pc, #404]	; (8003dec <HAL_GPIO_EXTI_Callback+0x84c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a65      	ldr	r2, [pc, #404]	; (8003df0 <HAL_GPIO_EXTI_Callback+0x850>)
 8003c5c:	6013      	str	r3, [r2, #0]
										quat_state1++;
 8003c5e:	4b69      	ldr	r3, [pc, #420]	; (8003e04 <HAL_GPIO_EXTI_Callback+0x864>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	4a67      	ldr	r2, [pc, #412]	; (8003e04 <HAL_GPIO_EXTI_Callback+0x864>)
 8003c66:	6013      	str	r3, [r2, #0]
										flag_number_state1 = 10;
 8003c68:	4b61      	ldr	r3, [pc, #388]	; (8003df0 <HAL_GPIO_EXTI_Callback+0x850>)
 8003c6a:	220a      	movs	r2, #10
 8003c6c:	601a      	str	r2, [r3, #0]
										state_ngat2 = 1;
 8003c6e:	4b61      	ldr	r3, [pc, #388]	; (8003df4 <HAL_GPIO_EXTI_Callback+0x854>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
										state_ngat1 = 0;
 8003c74:	4b60      	ldr	r3, [pc, #384]	; (8003df8 <HAL_GPIO_EXTI_Callback+0x858>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c80:	4854      	ldr	r0, [pc, #336]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003c82:	f002 fae8 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c8c:	4851      	ldr	r0, [pc, #324]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003c8e:	f002 fae2 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8003c92:	2200      	movs	r2, #0
 8003c94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c98:	484e      	ldr	r0, [pc, #312]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003c9a:	f002 fadc 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	484c      	ldr	r0, [pc, #304]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003ca4:	f002 fad7 	bl	8006256 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime;  // Cập nhật th�?i gian debounce cuối cùng
 8003ca8:	4b57      	ldr	r3, [pc, #348]	; (8003e08 <HAL_GPIO_EXTI_Callback+0x868>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a57      	ldr	r2, [pc, #348]	; (8003e0c <HAL_GPIO_EXTI_Callback+0x86c>)
 8003cae:	6013      	str	r3, [r2, #0]
			}
		}
		if (state_ngat2 == 1) {
 8003cb0:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <HAL_GPIO_EXTI_Callback+0x854>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d10c      	bne.n	8003cd2 <HAL_GPIO_EXTI_Callback+0x732>
			//					GPIO_InitStruct.Pull = GPIO_PULLUP;
			//					HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
			//				}
			//			lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
			//			}
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003cb8:	4b55      	ldr	r3, [pc, #340]	; (8003e10 <HAL_GPIO_EXTI_Callback+0x870>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim3);
 8003cc0:	4853      	ldr	r0, [pc, #332]	; (8003e10 <HAL_GPIO_EXTI_Callback+0x870>)
 8003cc2:	f003 fcf3 	bl	80076ac <HAL_TIM_Base_Start_IT>
			flag_ngat_nut_nhan = 1;
 8003cc6:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_GPIO_EXTI_Callback+0x874>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
			flag_switch_timer3 = 2;
 8003ccc:	4b52      	ldr	r3, [pc, #328]	; (8003e18 <HAL_GPIO_EXTI_Callback+0x878>)
 8003cce:	2202      	movs	r2, #2
 8003cd0:	601a      	str	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == GPIO_PIN_4) {
 8003cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cd6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	f040 81d9 	bne.w	8004094 <HAL_GPIO_EXTI_Callback+0xaf4>
		if (state_ngat1 == 1) {
 8003ce2:	4b45      	ldr	r3, [pc, #276]	; (8003df8 <HAL_GPIO_EXTI_Callback+0x858>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	f040 81c3 	bne.w	8004072 <HAL_GPIO_EXTI_Callback+0xad2>
			currentTime = HAL_GetTick();  // Lấy th�?i gian hiện tại
 8003cec:	f001 f820 	bl	8004d30 <HAL_GetTick>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4a45      	ldr	r2, [pc, #276]	; (8003e08 <HAL_GPIO_EXTI_Callback+0x868>)
 8003cf4:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay || (flag_start_button == 1)) {
 8003cf6:	4b44      	ldr	r3, [pc, #272]	; (8003e08 <HAL_GPIO_EXTI_Callback+0x868>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b44      	ldr	r3, [pc, #272]	; (8003e0c <HAL_GPIO_EXTI_Callback+0x86c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	1ad2      	subs	r2, r2, r3
 8003d00:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <HAL_GPIO_EXTI_Callback+0x87c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d804      	bhi.n	8003d12 <HAL_GPIO_EXTI_Callback+0x772>
 8003d08:	4b45      	ldr	r3, [pc, #276]	; (8003e20 <HAL_GPIO_EXTI_Callback+0x880>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f040 81b0 	bne.w	8004072 <HAL_GPIO_EXTI_Callback+0xad2>
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0) && (flag_disable_nut_nhan == 0)) {
 8003d12:	2110      	movs	r1, #16
 8003d14:	4830      	ldr	r0, [pc, #192]	; (8003dd8 <HAL_GPIO_EXTI_Callback+0x838>)
 8003d16:	f002 fa87 	bl	8006228 <HAL_GPIO_ReadPin>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f040 81a4 	bne.w	800406a <HAL_GPIO_EXTI_Callback+0xaca>
 8003d22:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <HAL_GPIO_EXTI_Callback+0x83c>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	f083 0301 	eor.w	r3, r3, #1
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 819c 	beq.w	800406a <HAL_GPIO_EXTI_Callback+0xaca>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8003d32:	2200      	movs	r2, #0
 8003d34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d38:	4826      	ldr	r0, [pc, #152]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003d3a:	f002 fa8c 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d44:	4823      	ldr	r0, [pc, #140]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003d46:	f002 fa86 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d50:	4820      	ldr	r0, [pc, #128]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003d52:	f002 fa80 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8003d56:	2201      	movs	r2, #1
 8003d58:	2101      	movs	r1, #1
 8003d5a:	481e      	ldr	r0, [pc, #120]	; (8003dd4 <HAL_GPIO_EXTI_Callback+0x834>)
 8003d5c:	f002 fa7b 	bl	8006256 <HAL_GPIO_WritePin>
					if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0) && (flag_disable_nut_nhan == 0)) {
 8003d60:	2110      	movs	r1, #16
 8003d62:	481d      	ldr	r0, [pc, #116]	; (8003dd8 <HAL_GPIO_EXTI_Callback+0x838>)
 8003d64:	f002 fa60 	bl	8006228 <HAL_GPIO_ReadPin>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d15e      	bne.n	8003e2c <HAL_GPIO_EXTI_Callback+0x88c>
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <HAL_GPIO_EXTI_Callback+0x83c>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	f083 0301 	eor.w	r3, r3, #1
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d057      	beq.n	8003e2c <HAL_GPIO_EXTI_Callback+0x88c>
						GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
						GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003d8a:	2310      	movs	r3, #16
 8003d8c:	67bb      	str	r3, [r7, #120]	; 0x78
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d8e:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <HAL_GPIO_EXTI_Callback+0x840>)
 8003d90:	67fb      	str	r3, [r7, #124]	; 0x7c
						GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d98:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	480e      	ldr	r0, [pc, #56]	; (8003dd8 <HAL_GPIO_EXTI_Callback+0x838>)
 8003da0:	f002 f802 	bl	8005da8 <HAL_GPIO_Init>
						num7_state1 = num7;
 8003da4:	4b1f      	ldr	r3, [pc, #124]	; (8003e24 <HAL_GPIO_EXTI_Callback+0x884>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1f      	ldr	r2, [pc, #124]	; (8003e28 <HAL_GPIO_EXTI_Callback+0x888>)
 8003daa:	6013      	str	r3, [r2, #0]
						flag_number_state1 = flag_number;
 8003dac:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <HAL_GPIO_EXTI_Callback+0x84c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <HAL_GPIO_EXTI_Callback+0x850>)
 8003db2:	6013      	str	r3, [r2, #0]
						num7_state1++;
 8003db4:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <HAL_GPIO_EXTI_Callback+0x888>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <HAL_GPIO_EXTI_Callback+0x888>)
 8003dbc:	6013      	str	r3, [r2, #0]
						flag_number_state1 = 7;
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <HAL_GPIO_EXTI_Callback+0x850>)
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	601a      	str	r2, [r3, #0]
						state_ngat2 = 1;
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_GPIO_EXTI_Callback+0x854>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
						state_ngat1 = 0;
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_GPIO_EXTI_Callback+0x858>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
					if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0) && (flag_disable_nut_nhan == 0)) {
 8003dd0:	e134      	b.n	800403c <HAL_GPIO_EXTI_Callback+0xa9c>
 8003dd2:	bf00      	nop
 8003dd4:	40010c00 	.word	0x40010c00
 8003dd8:	40010800 	.word	0x40010800
 8003ddc:	20000b64 	.word	0x20000b64
 8003de0:	10110000 	.word	0x10110000
 8003de4:	20000a18 	.word	0x20000a18
 8003de8:	20000b90 	.word	0x20000b90
 8003dec:	20000afc 	.word	0x20000afc
 8003df0:	20000b74 	.word	0x20000b74
 8003df4:	20000bb4 	.word	0x20000bb4
 8003df8:	20000244 	.word	0x20000244
 8003dfc:	20000b60 	.word	0x20000b60
 8003e00:	200009f0 	.word	0x200009f0
 8003e04:	20000ba4 	.word	0x20000ba4
 8003e08:	20000a00 	.word	0x20000a00
 8003e0c:	200009fc 	.word	0x200009fc
 8003e10:	20000408 	.word	0x20000408
 8003e14:	20000bbc 	.word	0x20000bbc
 8003e18:	20000bc4 	.word	0x20000bc4
 8003e1c:	20000228 	.word	0x20000228
 8003e20:	20000240 	.word	0x20000240
 8003e24:	20000a1c 	.word	0x20000a1c
 8003e28:	20000b94 	.word	0x20000b94
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e32:	484d      	ldr	r0, [pc, #308]	; (8003f68 <HAL_GPIO_EXTI_Callback+0x9c8>)
 8003e34:	f002 fa0f 	bl	8006256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e3e:	484a      	ldr	r0, [pc, #296]	; (8003f68 <HAL_GPIO_EXTI_Callback+0x9c8>)
 8003e40:	f002 fa09 	bl	8006256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8003e44:	2201      	movs	r2, #1
 8003e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e4a:	4847      	ldr	r0, [pc, #284]	; (8003f68 <HAL_GPIO_EXTI_Callback+0x9c8>)
 8003e4c:	f002 fa03 	bl	8006256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8003e50:	2201      	movs	r2, #1
 8003e52:	2101      	movs	r1, #1
 8003e54:	4844      	ldr	r0, [pc, #272]	; (8003f68 <HAL_GPIO_EXTI_Callback+0x9c8>)
 8003e56:	f002 f9fe 	bl	8006256 <HAL_GPIO_WritePin>
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0) && (flag_disable_nut_nhan == 0)) {
 8003e5a:	2110      	movs	r1, #16
 8003e5c:	4843      	ldr	r0, [pc, #268]	; (8003f6c <HAL_GPIO_EXTI_Callback+0x9cc>)
 8003e5e:	f002 f9e3 	bl	8006228 <HAL_GPIO_ReadPin>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d130      	bne.n	8003eca <HAL_GPIO_EXTI_Callback+0x92a>
 8003e68:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <HAL_GPIO_EXTI_Callback+0x9d0>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	f083 0301 	eor.w	r3, r3, #1
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d029      	beq.n	8003eca <HAL_GPIO_EXTI_Callback+0x92a>
							GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	609a      	str	r2, [r3, #8]
 8003e82:	60da      	str	r2, [r3, #12]
							GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e84:	2310      	movs	r3, #16
 8003e86:	66bb      	str	r3, [r7, #104]	; 0x68
							GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e88:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <HAL_GPIO_EXTI_Callback+0x9d4>)
 8003e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
							GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	673b      	str	r3, [r7, #112]	; 0x70
							HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e94:	4619      	mov	r1, r3
 8003e96:	4835      	ldr	r0, [pc, #212]	; (8003f6c <HAL_GPIO_EXTI_Callback+0x9cc>)
 8003e98:	f001 ff86 	bl	8005da8 <HAL_GPIO_Init>
							num8_state1 = num8;
 8003e9c:	4b36      	ldr	r3, [pc, #216]	; (8003f78 <HAL_GPIO_EXTI_Callback+0x9d8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a36      	ldr	r2, [pc, #216]	; (8003f7c <HAL_GPIO_EXTI_Callback+0x9dc>)
 8003ea2:	6013      	str	r3, [r2, #0]
							flag_number_state1 = flag_number;
 8003ea4:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <HAL_GPIO_EXTI_Callback+0x9e0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a36      	ldr	r2, [pc, #216]	; (8003f84 <HAL_GPIO_EXTI_Callback+0x9e4>)
 8003eaa:	6013      	str	r3, [r2, #0]
							num8_state1++;
 8003eac:	4b33      	ldr	r3, [pc, #204]	; (8003f7c <HAL_GPIO_EXTI_Callback+0x9dc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	4a32      	ldr	r2, [pc, #200]	; (8003f7c <HAL_GPIO_EXTI_Callback+0x9dc>)
 8003eb4:	6013      	str	r3, [r2, #0]
							flag_number_state1 = 8;
 8003eb6:	4b33      	ldr	r3, [pc, #204]	; (8003f84 <HAL_GPIO_EXTI_Callback+0x9e4>)
 8003eb8:	2208      	movs	r2, #8
 8003eba:	601a      	str	r2, [r3, #0]
							state_ngat2 = 1;
 8003ebc:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <HAL_GPIO_EXTI_Callback+0x9e8>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
							state_ngat1 = 0;
 8003ec2:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <HAL_GPIO_EXTI_Callback+0x9ec>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0) && (flag_disable_nut_nhan == 0)) {
 8003ec8:	e0b8      	b.n	800403c <HAL_GPIO_EXTI_Callback+0xa9c>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ed0:	4825      	ldr	r0, [pc, #148]	; (8003f68 <HAL_GPIO_EXTI_Callback+0x9c8>)
 8003ed2:	f002 f9c0 	bl	8006256 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003edc:	4822      	ldr	r0, [pc, #136]	; (8003f68 <HAL_GPIO_EXTI_Callback+0x9c8>)
 8003ede:	f002 f9ba 	bl	8006256 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ee8:	481f      	ldr	r0, [pc, #124]	; (8003f68 <HAL_GPIO_EXTI_Callback+0x9c8>)
 8003eea:	f002 f9b4 	bl	8006256 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8003eee:	2201      	movs	r2, #1
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	481d      	ldr	r0, [pc, #116]	; (8003f68 <HAL_GPIO_EXTI_Callback+0x9c8>)
 8003ef4:	f002 f9af 	bl	8006256 <HAL_GPIO_WritePin>
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0) && (flag_disable_nut_nhan == 0)) {
 8003ef8:	2110      	movs	r1, #16
 8003efa:	481c      	ldr	r0, [pc, #112]	; (8003f6c <HAL_GPIO_EXTI_Callback+0x9cc>)
 8003efc:	f002 f994 	bl	8006228 <HAL_GPIO_ReadPin>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d148      	bne.n	8003f98 <HAL_GPIO_EXTI_Callback+0x9f8>
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_GPIO_EXTI_Callback+0x9d0>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	f083 0301 	eor.w	r3, r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d041      	beq.n	8003f98 <HAL_GPIO_EXTI_Callback+0x9f8>
								GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
								GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f22:	2310      	movs	r3, #16
 8003f24:	65bb      	str	r3, [r7, #88]	; 0x58
								GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f26:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <HAL_GPIO_EXTI_Callback+0x9d4>)
 8003f28:	65fb      	str	r3, [r7, #92]	; 0x5c
								GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	663b      	str	r3, [r7, #96]	; 0x60
								HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f32:	4619      	mov	r1, r3
 8003f34:	480d      	ldr	r0, [pc, #52]	; (8003f6c <HAL_GPIO_EXTI_Callback+0x9cc>)
 8003f36:	f001 ff37 	bl	8005da8 <HAL_GPIO_Init>
								num9_state1 = num9;
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <HAL_GPIO_EXTI_Callback+0x9f0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a15      	ldr	r2, [pc, #84]	; (8003f94 <HAL_GPIO_EXTI_Callback+0x9f4>)
 8003f40:	6013      	str	r3, [r2, #0]
								flag_number_state1 = flag_number;
 8003f42:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <HAL_GPIO_EXTI_Callback+0x9e0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a0f      	ldr	r2, [pc, #60]	; (8003f84 <HAL_GPIO_EXTI_Callback+0x9e4>)
 8003f48:	6013      	str	r3, [r2, #0]
								num9_state1++;
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <HAL_GPIO_EXTI_Callback+0x9f4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <HAL_GPIO_EXTI_Callback+0x9f4>)
 8003f52:	6013      	str	r3, [r2, #0]
								flag_number_state1 = 9;
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_GPIO_EXTI_Callback+0x9e4>)
 8003f56:	2209      	movs	r2, #9
 8003f58:	601a      	str	r2, [r3, #0]
								state_ngat2 = 1;
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_GPIO_EXTI_Callback+0x9e8>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
								state_ngat1 = 0;
 8003f60:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <HAL_GPIO_EXTI_Callback+0x9ec>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0) && (flag_disable_nut_nhan == 0)) {
 8003f66:	e069      	b.n	800403c <HAL_GPIO_EXTI_Callback+0xa9c>
 8003f68:	40010c00 	.word	0x40010c00
 8003f6c:	40010800 	.word	0x40010800
 8003f70:	20000b64 	.word	0x20000b64
 8003f74:	10110000 	.word	0x10110000
 8003f78:	20000a20 	.word	0x20000a20
 8003f7c:	20000b98 	.word	0x20000b98
 8003f80:	20000afc 	.word	0x20000afc
 8003f84:	20000b74 	.word	0x20000b74
 8003f88:	20000bb4 	.word	0x20000bb4
 8003f8c:	20000244 	.word	0x20000244
 8003f90:	20000a24 	.word	0x20000a24
 8003f94:	20000b9c 	.word	0x20000b9c
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f9e:	489f      	ldr	r0, [pc, #636]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 8003fa0:	f002 f959 	bl	8006256 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003faa:	489c      	ldr	r0, [pc, #624]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 8003fac:	f002 f953 	bl	8006256 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fb6:	4899      	ldr	r0, [pc, #612]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 8003fb8:	f002 f94d 	bl	8006256 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4896      	ldr	r0, [pc, #600]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 8003fc2:	f002 f948 	bl	8006256 <HAL_GPIO_WritePin>
								if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0) && (flag_disable_nut_nhan == 0)) {
 8003fc6:	2110      	movs	r1, #16
 8003fc8:	4895      	ldr	r0, [pc, #596]	; (8004220 <HAL_GPIO_EXTI_Callback+0xc80>)
 8003fca:	f002 f92d 	bl	8006228 <HAL_GPIO_ReadPin>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d133      	bne.n	800403c <HAL_GPIO_EXTI_Callback+0xa9c>
 8003fd4:	4b93      	ldr	r3, [pc, #588]	; (8004224 <HAL_GPIO_EXTI_Callback+0xc84>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	f083 0301 	eor.w	r3, r3, #1
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d02c      	beq.n	800403c <HAL_GPIO_EXTI_Callback+0xa9c>
									if (flag_di_qua_nhap_mat_khau) {
 8003fe2:	4b91      	ldr	r3, [pc, #580]	; (8004228 <HAL_GPIO_EXTI_Callback+0xc88>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d028      	beq.n	800403c <HAL_GPIO_EXTI_Callback+0xa9c>
										GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	609a      	str	r2, [r3, #8]
 8003ff6:	60da      	str	r2, [r3, #12]
										GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	64bb      	str	r3, [r7, #72]	; 0x48
										GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ffc:	4b8b      	ldr	r3, [pc, #556]	; (800422c <HAL_GPIO_EXTI_Callback+0xc8c>)
 8003ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
										GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004000:	2301      	movs	r3, #1
 8004002:	653b      	str	r3, [r7, #80]	; 0x50
										HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004004:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004008:	4619      	mov	r1, r3
 800400a:	4885      	ldr	r0, [pc, #532]	; (8004220 <HAL_GPIO_EXTI_Callback+0xc80>)
 800400c:	f001 fecc 	bl	8005da8 <HAL_GPIO_Init>
										bom_state1 = bom;
 8004010:	4b87      	ldr	r3, [pc, #540]	; (8004230 <HAL_GPIO_EXTI_Callback+0xc90>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a87      	ldr	r2, [pc, #540]	; (8004234 <HAL_GPIO_EXTI_Callback+0xc94>)
 8004016:	6013      	str	r3, [r2, #0]
										flag_number_state1 = flag_number;
 8004018:	4b87      	ldr	r3, [pc, #540]	; (8004238 <HAL_GPIO_EXTI_Callback+0xc98>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a87      	ldr	r2, [pc, #540]	; (800423c <HAL_GPIO_EXTI_Callback+0xc9c>)
 800401e:	6013      	str	r3, [r2, #0]
										bom_state1++;
 8004020:	4b84      	ldr	r3, [pc, #528]	; (8004234 <HAL_GPIO_EXTI_Callback+0xc94>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3301      	adds	r3, #1
 8004026:	4a83      	ldr	r2, [pc, #524]	; (8004234 <HAL_GPIO_EXTI_Callback+0xc94>)
 8004028:	6013      	str	r3, [r2, #0]
										flag_number_state1 = 10;
 800402a:	4b84      	ldr	r3, [pc, #528]	; (800423c <HAL_GPIO_EXTI_Callback+0xc9c>)
 800402c:	220a      	movs	r2, #10
 800402e:	601a      	str	r2, [r3, #0]
										state_ngat2 = 1;
 8004030:	4b83      	ldr	r3, [pc, #524]	; (8004240 <HAL_GPIO_EXTI_Callback+0xca0>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]
										state_ngat1 = 0;
 8004036:	4b83      	ldr	r3, [pc, #524]	; (8004244 <HAL_GPIO_EXTI_Callback+0xca4>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 800403c:	2200      	movs	r2, #0
 800403e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004042:	4876      	ldr	r0, [pc, #472]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 8004044:	f002 f907 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8004048:	2200      	movs	r2, #0
 800404a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800404e:	4873      	ldr	r0, [pc, #460]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 8004050:	f002 f901 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8004054:	2200      	movs	r2, #0
 8004056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800405a:	4870      	ldr	r0, [pc, #448]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 800405c:	f002 f8fb 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8004060:	2200      	movs	r2, #0
 8004062:	2101      	movs	r1, #1
 8004064:	486d      	ldr	r0, [pc, #436]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 8004066:	f002 f8f6 	bl	8006256 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime;  // Cập nhật th�?i gian debounce cuối cùng
 800406a:	4b77      	ldr	r3, [pc, #476]	; (8004248 <HAL_GPIO_EXTI_Callback+0xca8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a77      	ldr	r2, [pc, #476]	; (800424c <HAL_GPIO_EXTI_Callback+0xcac>)
 8004070:	6013      	str	r3, [r2, #0]
			}
		}
		if (state_ngat2 == 1) {
 8004072:	4b73      	ldr	r3, [pc, #460]	; (8004240 <HAL_GPIO_EXTI_Callback+0xca0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d10c      	bne.n	8004094 <HAL_GPIO_EXTI_Callback+0xaf4>
			//					GPIO_InitStruct.Pull = GPIO_PULLUP;
			//					HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
			//				}
			//			lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
			//			}
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 800407a:	4b75      	ldr	r3, [pc, #468]	; (8004250 <HAL_GPIO_EXTI_Callback+0xcb0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2200      	movs	r2, #0
 8004080:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim3);
 8004082:	4873      	ldr	r0, [pc, #460]	; (8004250 <HAL_GPIO_EXTI_Callback+0xcb0>)
 8004084:	f003 fb12 	bl	80076ac <HAL_TIM_Base_Start_IT>
			flag_ngat_nut_nhan = 1;
 8004088:	4b72      	ldr	r3, [pc, #456]	; (8004254 <HAL_GPIO_EXTI_Callback+0xcb4>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]
			flag_switch_timer3 = 3;
 800408e:	4b72      	ldr	r3, [pc, #456]	; (8004258 <HAL_GPIO_EXTI_Callback+0xcb8>)
 8004090:	2203      	movs	r2, #3
 8004092:	601a      	str	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == GPIO_PIN_5) {
 8004094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004098:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	2b20      	cmp	r3, #32
 80040a0:	f040 8180 	bne.w	80043a4 <HAL_GPIO_EXTI_Callback+0xe04>
		if (state_ngat1 == 1) {
 80040a4:	4b67      	ldr	r3, [pc, #412]	; (8004244 <HAL_GPIO_EXTI_Callback+0xca4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	f040 816a 	bne.w	8004382 <HAL_GPIO_EXTI_Callback+0xde2>
			currentTime = HAL_GetTick();  // Lấy th�?i gian hiện tại
 80040ae:	f000 fe3f 	bl	8004d30 <HAL_GetTick>
 80040b2:	4603      	mov	r3, r0
 80040b4:	4a64      	ldr	r2, [pc, #400]	; (8004248 <HAL_GPIO_EXTI_Callback+0xca8>)
 80040b6:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay || (flag_start_button == 1)) {
 80040b8:	4b63      	ldr	r3, [pc, #396]	; (8004248 <HAL_GPIO_EXTI_Callback+0xca8>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b63      	ldr	r3, [pc, #396]	; (800424c <HAL_GPIO_EXTI_Callback+0xcac>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	1ad2      	subs	r2, r2, r3
 80040c2:	4b66      	ldr	r3, [pc, #408]	; (800425c <HAL_GPIO_EXTI_Callback+0xcbc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d804      	bhi.n	80040d4 <HAL_GPIO_EXTI_Callback+0xb34>
 80040ca:	4b65      	ldr	r3, [pc, #404]	; (8004260 <HAL_GPIO_EXTI_Callback+0xcc0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	f040 8157 	bne.w	8004382 <HAL_GPIO_EXTI_Callback+0xde2>
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0) {
 80040d4:	2120      	movs	r1, #32
 80040d6:	4852      	ldr	r0, [pc, #328]	; (8004220 <HAL_GPIO_EXTI_Callback+0xc80>)
 80040d8:	f002 f8a6 	bl	8006228 <HAL_GPIO_ReadPin>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 814b 	bne.w	800437a <HAL_GPIO_EXTI_Callback+0xdda>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 80040e4:	2200      	movs	r2, #0
 80040e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040ea:	484c      	ldr	r0, [pc, #304]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 80040ec:	f002 f8b3 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 80040f0:	2201      	movs	r2, #1
 80040f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040f6:	4849      	ldr	r0, [pc, #292]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 80040f8:	f002 f8ad 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80040fc:	2201      	movs	r2, #1
 80040fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004102:	4846      	ldr	r0, [pc, #280]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 8004104:	f002 f8a7 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8004108:	2201      	movs	r2, #1
 800410a:	2101      	movs	r1, #1
 800410c:	4843      	ldr	r0, [pc, #268]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 800410e:	f002 f8a2 	bl	8006256 <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0) {
 8004112:	2120      	movs	r1, #32
 8004114:	4842      	ldr	r0, [pc, #264]	; (8004220 <HAL_GPIO_EXTI_Callback+0xc80>)
 8004116:	f002 f887 	bl	8006228 <HAL_GPIO_ReadPin>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d12e      	bne.n	800417e <HAL_GPIO_EXTI_Callback+0xbde>
						if (flag_di_qua_nhap_mat_khau) {
 8004120:	4b41      	ldr	r3, [pc, #260]	; (8004228 <HAL_GPIO_EXTI_Callback+0xc88>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8111 	beq.w	800434c <HAL_GPIO_EXTI_Callback+0xdac>
							//							count_state_lcd ++;
							//							flag_chuyen_lcd=1;
							//							flag_number=10;
							//							flag_ngat_keypad=1;

							GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	605a      	str	r2, [r3, #4]
 8004134:	609a      	str	r2, [r3, #8]
 8004136:	60da      	str	r2, [r3, #12]
							GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004138:	2320      	movs	r3, #32
 800413a:	63bb      	str	r3, [r7, #56]	; 0x38
							GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800413c:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_GPIO_EXTI_Callback+0xc8c>)
 800413e:	63fb      	str	r3, [r7, #60]	; 0x3c
							GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004140:	2301      	movs	r3, #1
 8004142:	643b      	str	r3, [r7, #64]	; 0x40
							HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004144:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004148:	4619      	mov	r1, r3
 800414a:	4835      	ldr	r0, [pc, #212]	; (8004220 <HAL_GPIO_EXTI_Callback+0xc80>)
 800414c:	f001 fe2c 	bl	8005da8 <HAL_GPIO_Init>
							num_sao_state1 = num_sao;
 8004150:	4b44      	ldr	r3, [pc, #272]	; (8004264 <HAL_GPIO_EXTI_Callback+0xcc4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a44      	ldr	r2, [pc, #272]	; (8004268 <HAL_GPIO_EXTI_Callback+0xcc8>)
 8004156:	6013      	str	r3, [r2, #0]
							flag_number_state1 = flag_number;
 8004158:	4b37      	ldr	r3, [pc, #220]	; (8004238 <HAL_GPIO_EXTI_Callback+0xc98>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a37      	ldr	r2, [pc, #220]	; (800423c <HAL_GPIO_EXTI_Callback+0xc9c>)
 800415e:	6013      	str	r3, [r2, #0]
							num_sao_state1++;
 8004160:	4b41      	ldr	r3, [pc, #260]	; (8004268 <HAL_GPIO_EXTI_Callback+0xcc8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3301      	adds	r3, #1
 8004166:	4a40      	ldr	r2, [pc, #256]	; (8004268 <HAL_GPIO_EXTI_Callback+0xcc8>)
 8004168:	6013      	str	r3, [r2, #0]
							flag_number_state1 = 10;
 800416a:	4b34      	ldr	r3, [pc, #208]	; (800423c <HAL_GPIO_EXTI_Callback+0xc9c>)
 800416c:	220a      	movs	r2, #10
 800416e:	601a      	str	r2, [r3, #0]
							state_ngat2 = 1;
 8004170:	4b33      	ldr	r3, [pc, #204]	; (8004240 <HAL_GPIO_EXTI_Callback+0xca0>)
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]
							state_ngat1 = 0;
 8004176:	4b33      	ldr	r3, [pc, #204]	; (8004244 <HAL_GPIO_EXTI_Callback+0xca4>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e0e6      	b.n	800434c <HAL_GPIO_EXTI_Callback+0xdac>
						}
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 800417e:	2201      	movs	r2, #1
 8004180:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004184:	4825      	ldr	r0, [pc, #148]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 8004186:	f002 f866 	bl	8006256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 800418a:	2200      	movs	r2, #0
 800418c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004190:	4822      	ldr	r0, [pc, #136]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 8004192:	f002 f860 	bl	8006256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8004196:	2201      	movs	r2, #1
 8004198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800419c:	481f      	ldr	r0, [pc, #124]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 800419e:	f002 f85a 	bl	8006256 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80041a2:	2201      	movs	r2, #1
 80041a4:	2101      	movs	r1, #1
 80041a6:	481d      	ldr	r0, [pc, #116]	; (800421c <HAL_GPIO_EXTI_Callback+0xc7c>)
 80041a8:	f002 f855 	bl	8006256 <HAL_GPIO_WritePin>
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0) && (flag_disable_nut_nhan == 0)) {
 80041ac:	2120      	movs	r1, #32
 80041ae:	481c      	ldr	r0, [pc, #112]	; (8004220 <HAL_GPIO_EXTI_Callback+0xc80>)
 80041b0:	f002 f83a 	bl	8006228 <HAL_GPIO_ReadPin>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d15c      	bne.n	8004274 <HAL_GPIO_EXTI_Callback+0xcd4>
 80041ba:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <HAL_GPIO_EXTI_Callback+0xc84>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	f083 0301 	eor.w	r3, r3, #1
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d055      	beq.n	8004274 <HAL_GPIO_EXTI_Callback+0xcd4>
							GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	60da      	str	r2, [r3, #12]
							GPIO_InitStruct.Pin = GPIO_PIN_5;
 80041d6:	2320      	movs	r3, #32
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28
							GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041da:	4b14      	ldr	r3, [pc, #80]	; (800422c <HAL_GPIO_EXTI_Callback+0xc8c>)
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
							GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041de:	2301      	movs	r3, #1
 80041e0:	633b      	str	r3, [r7, #48]	; 0x30
							HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041e6:	4619      	mov	r1, r3
 80041e8:	480d      	ldr	r0, [pc, #52]	; (8004220 <HAL_GPIO_EXTI_Callback+0xc80>)
 80041ea:	f001 fddd 	bl	8005da8 <HAL_GPIO_Init>
							num0_state1 = num0;
 80041ee:	4b1f      	ldr	r3, [pc, #124]	; (800426c <HAL_GPIO_EXTI_Callback+0xccc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1f      	ldr	r2, [pc, #124]	; (8004270 <HAL_GPIO_EXTI_Callback+0xcd0>)
 80041f4:	6013      	str	r3, [r2, #0]
							flag_number_state1 = flag_number;
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <HAL_GPIO_EXTI_Callback+0xc98>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a10      	ldr	r2, [pc, #64]	; (800423c <HAL_GPIO_EXTI_Callback+0xc9c>)
 80041fc:	6013      	str	r3, [r2, #0]
							num0_state1++;
 80041fe:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <HAL_GPIO_EXTI_Callback+0xcd0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	4a1a      	ldr	r2, [pc, #104]	; (8004270 <HAL_GPIO_EXTI_Callback+0xcd0>)
 8004206:	6013      	str	r3, [r2, #0]
							flag_number_state1 = 0;
 8004208:	4b0c      	ldr	r3, [pc, #48]	; (800423c <HAL_GPIO_EXTI_Callback+0xc9c>)
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
							state_ngat2 = 1;
 800420e:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <HAL_GPIO_EXTI_Callback+0xca0>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
							state_ngat1 = 0;
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_GPIO_EXTI_Callback+0xca4>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0) && (flag_disable_nut_nhan == 0)) {
 800421a:	e097      	b.n	800434c <HAL_GPIO_EXTI_Callback+0xdac>
 800421c:	40010c00 	.word	0x40010c00
 8004220:	40010800 	.word	0x40010800
 8004224:	20000b64 	.word	0x20000b64
 8004228:	20000b60 	.word	0x20000b60
 800422c:	10110000 	.word	0x10110000
 8004230:	200009f4 	.word	0x200009f4
 8004234:	20000ba8 	.word	0x20000ba8
 8004238:	20000afc 	.word	0x20000afc
 800423c:	20000b74 	.word	0x20000b74
 8004240:	20000bb4 	.word	0x20000bb4
 8004244:	20000244 	.word	0x20000244
 8004248:	20000a00 	.word	0x20000a00
 800424c:	200009fc 	.word	0x200009fc
 8004250:	20000408 	.word	0x20000408
 8004254:	20000bbc 	.word	0x20000bbc
 8004258:	20000bc4 	.word	0x20000bc4
 800425c:	20000228 	.word	0x20000228
 8004260:	20000240 	.word	0x20000240
 8004264:	20000a2c 	.word	0x20000a2c
 8004268:	20000bac 	.word	0x20000bac
 800426c:	20000a28 	.word	0x20000a28
 8004270:	20000ba0 	.word	0x20000ba0
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8004274:	2201      	movs	r2, #1
 8004276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800427a:	488c      	ldr	r0, [pc, #560]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 800427c:	f001 ffeb 	bl	8006256 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8004280:	2201      	movs	r2, #1
 8004282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004286:	4889      	ldr	r0, [pc, #548]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 8004288:	f001 ffe5 	bl	8006256 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004292:	4886      	ldr	r0, [pc, #536]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 8004294:	f001 ffdf 	bl	8006256 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8004298:	2201      	movs	r2, #1
 800429a:	2101      	movs	r1, #1
 800429c:	4883      	ldr	r0, [pc, #524]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 800429e:	f001 ffda 	bl	8006256 <HAL_GPIO_WritePin>
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0) && (flag_disable_nut_nhan == 0)) {
 80042a2:	2120      	movs	r1, #32
 80042a4:	4882      	ldr	r0, [pc, #520]	; (80044b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 80042a6:	f001 ffbf 	bl	8006228 <HAL_GPIO_ReadPin>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d130      	bne.n	8004312 <HAL_GPIO_EXTI_Callback+0xd72>
 80042b0:	4b80      	ldr	r3, [pc, #512]	; (80044b4 <HAL_GPIO_EXTI_Callback+0xf14>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	f083 0301 	eor.w	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d029      	beq.n	8004312 <HAL_GPIO_EXTI_Callback+0xd72>
								GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042be:	f107 0318 	add.w	r3, r7, #24
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	609a      	str	r2, [r3, #8]
 80042ca:	60da      	str	r2, [r3, #12]
								GPIO_InitStruct.Pin = GPIO_PIN_5;
 80042cc:	2320      	movs	r3, #32
 80042ce:	61bb      	str	r3, [r7, #24]
								GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80042d0:	4b79      	ldr	r3, [pc, #484]	; (80044b8 <HAL_GPIO_EXTI_Callback+0xf18>)
 80042d2:	61fb      	str	r3, [r7, #28]
								GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042d4:	2301      	movs	r3, #1
 80042d6:	623b      	str	r3, [r7, #32]
								HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d8:	f107 0318 	add.w	r3, r7, #24
 80042dc:	4619      	mov	r1, r3
 80042de:	4874      	ldr	r0, [pc, #464]	; (80044b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 80042e0:	f001 fd62 	bl	8005da8 <HAL_GPIO_Init>
								num_thang_state1 = num_thang;
 80042e4:	4b75      	ldr	r3, [pc, #468]	; (80044bc <HAL_GPIO_EXTI_Callback+0xf1c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a75      	ldr	r2, [pc, #468]	; (80044c0 <HAL_GPIO_EXTI_Callback+0xf20>)
 80042ea:	6013      	str	r3, [r2, #0]
								flag_number_state1 = flag_number;
 80042ec:	4b75      	ldr	r3, [pc, #468]	; (80044c4 <HAL_GPIO_EXTI_Callback+0xf24>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a75      	ldr	r2, [pc, #468]	; (80044c8 <HAL_GPIO_EXTI_Callback+0xf28>)
 80042f2:	6013      	str	r3, [r2, #0]
								num_thang_state1++;
 80042f4:	4b72      	ldr	r3, [pc, #456]	; (80044c0 <HAL_GPIO_EXTI_Callback+0xf20>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3301      	adds	r3, #1
 80042fa:	4a71      	ldr	r2, [pc, #452]	; (80044c0 <HAL_GPIO_EXTI_Callback+0xf20>)
 80042fc:	6013      	str	r3, [r2, #0]
								flag_number_state1 = 11;
 80042fe:	4b72      	ldr	r3, [pc, #456]	; (80044c8 <HAL_GPIO_EXTI_Callback+0xf28>)
 8004300:	220b      	movs	r2, #11
 8004302:	601a      	str	r2, [r3, #0]
								state_ngat2 = 1;
 8004304:	4b71      	ldr	r3, [pc, #452]	; (80044cc <HAL_GPIO_EXTI_Callback+0xf2c>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]
								state_ngat1 = 0;
 800430a:	4b71      	ldr	r3, [pc, #452]	; (80044d0 <HAL_GPIO_EXTI_Callback+0xf30>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0) && (flag_disable_nut_nhan == 0)) {
 8004310:	e01c      	b.n	800434c <HAL_GPIO_EXTI_Callback+0xdac>
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8004312:	2201      	movs	r2, #1
 8004314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004318:	4864      	ldr	r0, [pc, #400]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 800431a:	f001 ff9c 	bl	8006256 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 800431e:	2201      	movs	r2, #1
 8004320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004324:	4861      	ldr	r0, [pc, #388]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 8004326:	f001 ff96 	bl	8006256 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800432a:	2201      	movs	r2, #1
 800432c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004330:	485e      	ldr	r0, [pc, #376]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 8004332:	f001 ff90 	bl	8006256 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8004336:	2200      	movs	r2, #0
 8004338:	2101      	movs	r1, #1
 800433a:	485c      	ldr	r0, [pc, #368]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 800433c:	f001 ff8b 	bl	8006256 <HAL_GPIO_WritePin>
								if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0) {
 8004340:	2120      	movs	r1, #32
 8004342:	485b      	ldr	r0, [pc, #364]	; (80044b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8004344:	f001 ff70 	bl	8006228 <HAL_GPIO_ReadPin>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 800434c:	2200      	movs	r2, #0
 800434e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004352:	4856      	ldr	r0, [pc, #344]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 8004354:	f001 ff7f 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8004358:	2200      	movs	r2, #0
 800435a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800435e:	4853      	ldr	r0, [pc, #332]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 8004360:	f001 ff79 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8004364:	2200      	movs	r2, #0
 8004366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800436a:	4850      	ldr	r0, [pc, #320]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 800436c:	f001 ff73 	bl	8006256 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8004370:	2200      	movs	r2, #0
 8004372:	2101      	movs	r1, #1
 8004374:	484d      	ldr	r0, [pc, #308]	; (80044ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 8004376:	f001 ff6e 	bl	8006256 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime;  // Cập nhật th�?i gian debounce cuối cùng
 800437a:	4b56      	ldr	r3, [pc, #344]	; (80044d4 <HAL_GPIO_EXTI_Callback+0xf34>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a56      	ldr	r2, [pc, #344]	; (80044d8 <HAL_GPIO_EXTI_Callback+0xf38>)
 8004380:	6013      	str	r3, [r2, #0]
			}
		}
		if (state_ngat2 == 1) {
 8004382:	4b52      	ldr	r3, [pc, #328]	; (80044cc <HAL_GPIO_EXTI_Callback+0xf2c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d10c      	bne.n	80043a4 <HAL_GPIO_EXTI_Callback+0xe04>
			//				GPIO_InitStruct.Pull = GPIO_PULLUP;
			//				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
			//			}
			//		lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
			//		}
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 800438a:	4b54      	ldr	r3, [pc, #336]	; (80044dc <HAL_GPIO_EXTI_Callback+0xf3c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2200      	movs	r2, #0
 8004390:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim3);
 8004392:	4852      	ldr	r0, [pc, #328]	; (80044dc <HAL_GPIO_EXTI_Callback+0xf3c>)
 8004394:	f003 f98a 	bl	80076ac <HAL_TIM_Base_Start_IT>
			flag_ngat_nut_nhan = 1;
 8004398:	4b51      	ldr	r3, [pc, #324]	; (80044e0 <HAL_GPIO_EXTI_Callback+0xf40>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
			flag_switch_timer3 = 4;
 800439e:	4b51      	ldr	r3, [pc, #324]	; (80044e4 <HAL_GPIO_EXTI_Callback+0xf44>)
 80043a0:	2204      	movs	r2, #4
 80043a2:	601a      	str	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == GPIO_PIN_1) {
 80043a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043a8:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d14d      	bne.n	800444e <HAL_GPIO_EXTI_Callback+0xeae>
		tick_hien_tai = __HAL_TIM_GET_COUNTER(&htim2);
 80043b2:	4b4d      	ldr	r3, [pc, #308]	; (80044e8 <HAL_GPIO_EXTI_Callback+0xf48>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	4a4c      	ldr	r2, [pc, #304]	; (80044ec <HAL_GPIO_EXTI_Callback+0xf4c>)
 80043ba:	6013      	str	r3, [r2, #0]
		thoi_gian_tick = tick_hien_tai - tick_lan_truoc;
 80043bc:	4b4b      	ldr	r3, [pc, #300]	; (80044ec <HAL_GPIO_EXTI_Callback+0xf4c>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b4b      	ldr	r3, [pc, #300]	; (80044f0 <HAL_GPIO_EXTI_Callback+0xf50>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	4a4b      	ldr	r2, [pc, #300]	; (80044f4 <HAL_GPIO_EXTI_Callback+0xf54>)
 80043c8:	6013      	str	r3, [r2, #0]
		tick_lan_truoc = tick_hien_tai;
 80043ca:	4b48      	ldr	r3, [pc, #288]	; (80044ec <HAL_GPIO_EXTI_Callback+0xf4c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a48      	ldr	r2, [pc, #288]	; (80044f0 <HAL_GPIO_EXTI_Callback+0xf50>)
 80043d0:	6013      	str	r3, [r2, #0]
		tick[count_tick] = thoi_gian_tick;
 80043d2:	4b48      	ldr	r3, [pc, #288]	; (80044f4 <HAL_GPIO_EXTI_Callback+0xf54>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b48      	ldr	r3, [pc, #288]	; (80044f8 <HAL_GPIO_EXTI_Callback+0xf58>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	b2d1      	uxtb	r1, r2
 80043dc:	4a47      	ldr	r2, [pc, #284]	; (80044fc <HAL_GPIO_EXTI_Callback+0xf5c>)
 80043de:	54d1      	strb	r1, [r2, r3]
		count_tick++;
 80043e0:	4b45      	ldr	r3, [pc, #276]	; (80044f8 <HAL_GPIO_EXTI_Callback+0xf58>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	4a44      	ldr	r2, [pc, #272]	; (80044f8 <HAL_GPIO_EXTI_Callback+0xf58>)
 80043e8:	6013      	str	r3, [r2, #0]
		if (count_tick > 84) {
 80043ea:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <HAL_GPIO_EXTI_Callback+0xf58>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b54      	cmp	r3, #84	; 0x54
 80043f0:	dd2d      	ble.n	800444e <HAL_GPIO_EXTI_Callback+0xeae>
			HAL_TIM_Base_Stop_IT(&htim2);
 80043f2:	483d      	ldr	r0, [pc, #244]	; (80044e8 <HAL_GPIO_EXTI_Callback+0xf48>)
 80043f4:	f003 f9ac 	bl	8007750 <HAL_TIM_Base_Stop_IT>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80043f8:	2007      	movs	r0, #7
 80043fa:	f001 fa18 	bl	800582e <HAL_NVIC_DisableIRQ>
			GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004402:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004406:	461a      	mov	r2, r3
 8004408:	2300      	movs	r3, #0
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	6053      	str	r3, [r2, #4]
 800440e:	6093      	str	r3, [r2, #8]
 8004410:	60d3      	str	r3, [r2, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004416:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800441a:	2200      	movs	r2, #0
 800441c:	609a      	str	r2, [r3, #8]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800441e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004422:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004426:	2201      	movs	r2, #1
 8004428:	605a      	str	r2, [r3, #4]
			GPIO_InitStruct.Pin = GPIO_PIN_1;
 800442a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800442e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004432:	2202      	movs	r2, #2
 8004434:	601a      	str	r2, [r3, #0]
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800443a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800443e:	2202      	movs	r2, #2
 8004440:	60da      	str	r2, [r3, #12]
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004442:	f107 0308 	add.w	r3, r7, #8
 8004446:	4619      	mov	r1, r3
 8004448:	4819      	ldr	r0, [pc, #100]	; (80044b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 800444a:	f001 fcad 	bl	8005da8 <HAL_GPIO_Init>
		}
	}
	if (GPIO_Pin == GPIO_PIN_8) {
 800444e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004452:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445c:	d10c      	bne.n	8004478 <HAL_GPIO_EXTI_Callback+0xed8>
		//					mode =1;
		//				}
		//			}
		//		lastDebounceTime = currentTime;
		//		}
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 800445e:	4b1f      	ldr	r3, [pc, #124]	; (80044dc <HAL_GPIO_EXTI_Callback+0xf3c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim3);
 8004466:	481d      	ldr	r0, [pc, #116]	; (80044dc <HAL_GPIO_EXTI_Callback+0xf3c>)
 8004468:	f003 f920 	bl	80076ac <HAL_TIM_Base_Start_IT>
		flag_ngat_nut_nhan = 1;
 800446c:	4b1c      	ldr	r3, [pc, #112]	; (80044e0 <HAL_GPIO_EXTI_Callback+0xf40>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]
		flag_switch_timer3 = 5;
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <HAL_GPIO_EXTI_Callback+0xf44>)
 8004474:	2205      	movs	r2, #5
 8004476:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_11) {
 8004478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800447c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004486:	d10c      	bne.n	80044a2 <HAL_GPIO_EXTI_Callback+0xf02>
		//					mode =0;
		//				}
		//			}
		//		lastDebounceTime = currentTime;
		//		}
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <HAL_GPIO_EXTI_Callback+0xf3c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2200      	movs	r2, #0
 800448e:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim3);
 8004490:	4812      	ldr	r0, [pc, #72]	; (80044dc <HAL_GPIO_EXTI_Callback+0xf3c>)
 8004492:	f003 f90b 	bl	80076ac <HAL_TIM_Base_Start_IT>
		flag_ngat_nut_nhan = 1;
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <HAL_GPIO_EXTI_Callback+0xf40>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
		flag_switch_timer3 = 6;
 800449c:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <HAL_GPIO_EXTI_Callback+0xf44>)
 800449e:	2206      	movs	r2, #6
 80044a0:	601a      	str	r2, [r3, #0]
	}
}
 80044a2:	bf00      	nop
 80044a4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40010c00 	.word	0x40010c00
 80044b0:	40010800 	.word	0x40010800
 80044b4:	20000b64 	.word	0x20000b64
 80044b8:	10110000 	.word	0x10110000
 80044bc:	20000a30 	.word	0x20000a30
 80044c0:	20000bb0 	.word	0x20000bb0
 80044c4:	20000afc 	.word	0x20000afc
 80044c8:	20000b74 	.word	0x20000b74
 80044cc:	20000bb4 	.word	0x20000bb4
 80044d0:	20000244 	.word	0x20000244
 80044d4:	20000a00 	.word	0x20000a00
 80044d8:	200009fc 	.word	0x200009fc
 80044dc:	20000408 	.word	0x20000408
 80044e0:	20000bbc 	.word	0x20000bbc
 80044e4:	20000bc4 	.word	0x20000bc4
 80044e8:	200003c0 	.word	0x200003c0
 80044ec:	20000a48 	.word	0x20000a48
 80044f0:	20000a44 	.word	0x20000a44
 80044f4:	20000a4c 	.word	0x20000a4c
 80044f8:	20000ab8 	.word	0x20000ab8
 80044fc:	20000a50 	.word	0x20000a50

08004500 <xu_ly_tick_dht11>:

void xu_ly_tick_dht11(uint8_t *tick, uint8_t *data_dht11)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 800450a:	4828      	ldr	r0, [pc, #160]	; (80045ac <xu_ly_tick_dht11+0xac>)
 800450c:	f003 f920 	bl	8007750 <HAL_TIM_Base_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8004510:	2007      	movs	r0, #7
 8004512:	f001 f98c 	bl	800582e <HAL_NVIC_DisableIRQ>
	int count_data_dht11 = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
	for (int i = 4; i <= 82; i += 2) {
 800451a:	2304      	movs	r3, #4
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	e03d      	b.n	800459c <xu_ly_tick_dht11+0x9c>
		data_dht11[count_data_dht11 / 8] <<= 1;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	da00      	bge.n	8004528 <xu_ly_tick_dht11+0x28>
 8004526:	3307      	adds	r3, #7
 8004528:	10db      	asrs	r3, r3, #3
 800452a:	4619      	mov	r1, r3
 800452c:	460a      	mov	r2, r1
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	4413      	add	r3, r2
 8004532:	781a      	ldrb	r2, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	440b      	add	r3, r1
 8004538:	0052      	lsls	r2, r2, #1
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]
		if (tick[i] > tick[i + 1]) {
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	4413      	add	r3, r2
 8004544:	781a      	ldrb	r2, [r3, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	3301      	adds	r3, #1
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	440b      	add	r3, r1
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d90d      	bls.n	8004570 <xu_ly_tick_dht11+0x70>
			data_dht11[count_data_dht11 / 8] |= 0;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	da00      	bge.n	800455c <xu_ly_tick_dht11+0x5c>
 800455a:	3307      	adds	r3, #7
 800455c:	10db      	asrs	r3, r3, #3
 800455e:	4619      	mov	r1, r3
 8004560:	460a      	mov	r2, r1
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	441a      	add	r2, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	440b      	add	r3, r1
 800456a:	7812      	ldrb	r2, [r2, #0]
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	e00f      	b.n	8004590 <xu_ly_tick_dht11+0x90>
		} else {
			data_dht11[count_data_dht11 / 8] |= 1;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	da00      	bge.n	8004578 <xu_ly_tick_dht11+0x78>
 8004576:	3307      	adds	r3, #7
 8004578:	10db      	asrs	r3, r3, #3
 800457a:	4619      	mov	r1, r3
 800457c:	460a      	mov	r2, r1
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	4413      	add	r3, r2
 8004582:	781a      	ldrb	r2, [r3, #0]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	440b      	add	r3, r1
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]
		}
		count_data_dht11++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3301      	adds	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]
	for (int i = 4; i <= 82; i += 2) {
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3302      	adds	r3, #2
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b52      	cmp	r3, #82	; 0x52
 80045a0:	ddbe      	ble.n	8004520 <xu_ly_tick_dht11+0x20>
	}
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	200003c0 	.word	0x200003c0

080045b0 <doc_dht11>:

void doc_dht11(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80045b6:	4828      	ldr	r0, [pc, #160]	; (8004658 <doc_dht11+0xa8>)
 80045b8:	f003 f878 	bl	80076ac <HAL_TIM_Base_Start_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80045bc:	2007      	movs	r0, #7
 80045be:	f001 f936 	bl	800582e <HAL_NVIC_DisableIRQ>
	count_tick = 0;
 80045c2:	4b26      	ldr	r3, [pc, #152]	; (800465c <doc_dht11+0xac>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c8:	463b      	mov	r3, r7
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	609a      	str	r2, [r3, #8]
 80045d2:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045d4:	2301      	movs	r3, #1
 80045d6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045d8:	2300      	movs	r3, #0
 80045da:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80045dc:	2302      	movs	r3, #2
 80045de:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e0:	2302      	movs	r3, #2
 80045e2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e4:	463b      	mov	r3, r7
 80045e6:	4619      	mov	r1, r3
 80045e8:	481d      	ldr	r0, [pc, #116]	; (8004660 <doc_dht11+0xb0>)
 80045ea:	f001 fbdd 	bl	8005da8 <HAL_GPIO_Init>

	HAL_Delay(1);
 80045ee:	2001      	movs	r0, #1
 80045f0:	f000 fba8 	bl	8004d44 <HAL_Delay>

	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045f8:	2301      	movs	r3, #1
 80045fa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80045fc:	2302      	movs	r3, #2
 80045fe:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004600:	2302      	movs	r3, #2
 8004602:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004604:	463b      	mov	r3, r7
 8004606:	4619      	mov	r1, r3
 8004608:	4815      	ldr	r0, [pc, #84]	; (8004660 <doc_dht11+0xb0>)
 800460a:	f001 fbcd 	bl	8005da8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800460e:	2200      	movs	r2, #0
 8004610:	2102      	movs	r1, #2
 8004612:	4813      	ldr	r0, [pc, #76]	; (8004660 <doc_dht11+0xb0>)
 8004614:	f001 fe1f 	bl	8006256 <HAL_GPIO_WritePin>

	HAL_Delay(20);
 8004618:	2014      	movs	r0, #20
 800461a:	f000 fb93 	bl	8004d44 <HAL_Delay>
	if (count_tick == 0) {
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <doc_dht11+0xac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <doc_dht11+0x84>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8004626:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <doc_dht11+0xa8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2200      	movs	r2, #0
 800462c:	625a      	str	r2, [r3, #36]	; 0x24
		tick_lan_truoc = 0;
 800462e:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <doc_dht11+0xb4>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
	}
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004634:	2302      	movs	r3, #2
 8004636:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <doc_dht11+0xb8>)
 800463a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800463c:	2301      	movs	r3, #1
 800463e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004640:	463b      	mov	r3, r7
 8004642:	4619      	mov	r1, r3
 8004644:	4806      	ldr	r0, [pc, #24]	; (8004660 <doc_dht11+0xb0>)
 8004646:	f001 fbaf 	bl	8005da8 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800464a:	2007      	movs	r0, #7
 800464c:	f001 f8e1 	bl	8005812 <HAL_NVIC_EnableIRQ>
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	200003c0 	.word	0x200003c0
 800465c:	20000ab8 	.word	0x20000ab8
 8004660:	40010800 	.word	0x40010800
 8004664:	20000a44 	.word	0x20000a44
 8004668:	10310000 	.word	0x10310000

0800466c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004670:	b672      	cpsid	i
}
 8004672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004674:	e7fe      	b.n	8004674 <Error_Handler+0x8>
	...

08004678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800467e:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <HAL_MspInit+0x40>)
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	4a0d      	ldr	r2, [pc, #52]	; (80046b8 <HAL_MspInit+0x40>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6193      	str	r3, [r2, #24]
 800468a:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_MspInit+0x40>)
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	607b      	str	r3, [r7, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004696:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <HAL_MspInit+0x40>)
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <HAL_MspInit+0x40>)
 800469c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a0:	61d3      	str	r3, [r2, #28]
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <HAL_MspInit+0x40>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	40021000 	.word	0x40021000

080046bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08a      	sub	sp, #40	; 0x28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c4:	f107 0318 	add.w	r3, r7, #24
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	605a      	str	r2, [r3, #4]
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a30      	ldr	r2, [pc, #192]	; (8004798 <HAL_ADC_MspInit+0xdc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d12a      	bne.n	8004732 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80046dc:	4b2f      	ldr	r3, [pc, #188]	; (800479c <HAL_ADC_MspInit+0xe0>)
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	4a2e      	ldr	r2, [pc, #184]	; (800479c <HAL_ADC_MspInit+0xe0>)
 80046e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046e6:	6193      	str	r3, [r2, #24]
 80046e8:	4b2c      	ldr	r3, [pc, #176]	; (800479c <HAL_ADC_MspInit+0xe0>)
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f4:	4b29      	ldr	r3, [pc, #164]	; (800479c <HAL_ADC_MspInit+0xe0>)
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	4a28      	ldr	r2, [pc, #160]	; (800479c <HAL_ADC_MspInit+0xe0>)
 80046fa:	f043 0304 	orr.w	r3, r3, #4
 80046fe:	6193      	str	r3, [r2, #24]
 8004700:	4b26      	ldr	r3, [pc, #152]	; (800479c <HAL_ADC_MspInit+0xe0>)
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800470c:	2340      	movs	r3, #64	; 0x40
 800470e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004710:	2303      	movs	r3, #3
 8004712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004714:	f107 0318 	add.w	r3, r7, #24
 8004718:	4619      	mov	r1, r3
 800471a:	4821      	ldr	r0, [pc, #132]	; (80047a0 <HAL_ADC_MspInit+0xe4>)
 800471c:	f001 fb44 	bl	8005da8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 15, 0);
 8004720:	2200      	movs	r2, #0
 8004722:	210f      	movs	r1, #15
 8004724:	2012      	movs	r0, #18
 8004726:	f001 f858 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800472a:	2012      	movs	r0, #18
 800472c:	f001 f871 	bl	8005812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004730:	e02e      	b.n	8004790 <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1b      	ldr	r2, [pc, #108]	; (80047a4 <HAL_ADC_MspInit+0xe8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d129      	bne.n	8004790 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800473c:	4b17      	ldr	r3, [pc, #92]	; (800479c <HAL_ADC_MspInit+0xe0>)
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	4a16      	ldr	r2, [pc, #88]	; (800479c <HAL_ADC_MspInit+0xe0>)
 8004742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004746:	6193      	str	r3, [r2, #24]
 8004748:	4b14      	ldr	r3, [pc, #80]	; (800479c <HAL_ADC_MspInit+0xe0>)
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <HAL_ADC_MspInit+0xe0>)
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	4a10      	ldr	r2, [pc, #64]	; (800479c <HAL_ADC_MspInit+0xe0>)
 800475a:	f043 0304 	orr.w	r3, r3, #4
 800475e:	6193      	str	r3, [r2, #24]
 8004760:	4b0e      	ldr	r3, [pc, #56]	; (800479c <HAL_ADC_MspInit+0xe0>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004770:	2303      	movs	r3, #3
 8004772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004774:	f107 0318 	add.w	r3, r7, #24
 8004778:	4619      	mov	r1, r3
 800477a:	4809      	ldr	r0, [pc, #36]	; (80047a0 <HAL_ADC_MspInit+0xe4>)
 800477c:	f001 fb14 	bl	8005da8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 15, 0);
 8004780:	2200      	movs	r2, #0
 8004782:	210f      	movs	r1, #15
 8004784:	2012      	movs	r0, #18
 8004786:	f001 f828 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800478a:	2012      	movs	r0, #18
 800478c:	f001 f841 	bl	8005812 <HAL_NVIC_EnableIRQ>
}
 8004790:	bf00      	nop
 8004792:	3728      	adds	r7, #40	; 0x28
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40012400 	.word	0x40012400
 800479c:	40021000 	.word	0x40021000
 80047a0:	40010800 	.word	0x40010800
 80047a4:	40012800 	.word	0x40012800

080047a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b0:	f107 0310 	add.w	r3, r7, #16
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a15      	ldr	r2, [pc, #84]	; (8004818 <HAL_I2C_MspInit+0x70>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d123      	bne.n	8004810 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <HAL_I2C_MspInit+0x74>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	4a13      	ldr	r2, [pc, #76]	; (800481c <HAL_I2C_MspInit+0x74>)
 80047ce:	f043 0308 	orr.w	r3, r3, #8
 80047d2:	6193      	str	r3, [r2, #24]
 80047d4:	4b11      	ldr	r3, [pc, #68]	; (800481c <HAL_I2C_MspInit+0x74>)
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047e0:	23c0      	movs	r3, #192	; 0xc0
 80047e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047e4:	2312      	movs	r3, #18
 80047e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047e8:	2303      	movs	r3, #3
 80047ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ec:	f107 0310 	add.w	r3, r7, #16
 80047f0:	4619      	mov	r1, r3
 80047f2:	480b      	ldr	r0, [pc, #44]	; (8004820 <HAL_I2C_MspInit+0x78>)
 80047f4:	f001 fad8 	bl	8005da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <HAL_I2C_MspInit+0x74>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4a07      	ldr	r2, [pc, #28]	; (800481c <HAL_I2C_MspInit+0x74>)
 80047fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004802:	61d3      	str	r3, [r2, #28]
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_I2C_MspInit+0x74>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004810:	bf00      	nop
 8004812:	3720      	adds	r7, #32
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40005400 	.word	0x40005400
 800481c:	40021000 	.word	0x40021000
 8004820:	40010c00 	.word	0x40010c00

08004824 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a0a      	ldr	r2, [pc, #40]	; (800485c <HAL_I2C_MspDeInit+0x38>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d10d      	bne.n	8004852 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004836:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <HAL_I2C_MspDeInit+0x3c>)
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <HAL_I2C_MspDeInit+0x3c>)
 800483c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004840:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004842:	2140      	movs	r1, #64	; 0x40
 8004844:	4807      	ldr	r0, [pc, #28]	; (8004864 <HAL_I2C_MspDeInit+0x40>)
 8004846:	f001 fc33 	bl	80060b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800484a:	2180      	movs	r1, #128	; 0x80
 800484c:	4805      	ldr	r0, [pc, #20]	; (8004864 <HAL_I2C_MspDeInit+0x40>)
 800484e:	f001 fc2f 	bl	80060b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40005400 	.word	0x40005400
 8004860:	40021000 	.word	0x40021000
 8004864:	40010c00 	.word	0x40010c00

08004868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a38      	ldr	r2, [pc, #224]	; (8004958 <HAL_TIM_Base_MspInit+0xf0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d11c      	bne.n	80048b4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800487a:	4b38      	ldr	r3, [pc, #224]	; (800495c <HAL_TIM_Base_MspInit+0xf4>)
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	4a37      	ldr	r2, [pc, #220]	; (800495c <HAL_TIM_Base_MspInit+0xf4>)
 8004880:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004884:	6193      	str	r3, [r2, #24]
 8004886:	4b35      	ldr	r3, [pc, #212]	; (800495c <HAL_TIM_Base_MspInit+0xf4>)
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 15, 0);
 8004892:	2200      	movs	r2, #0
 8004894:	210f      	movs	r1, #15
 8004896:	2018      	movs	r0, #24
 8004898:	f000 ff9f 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800489c:	2018      	movs	r0, #24
 800489e:	f000 ffb8 	bl	8005812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 15, 0);
 80048a2:	2200      	movs	r2, #0
 80048a4:	210f      	movs	r1, #15
 80048a6:	2019      	movs	r0, #25
 80048a8:	f000 ff97 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80048ac:	2019      	movs	r0, #25
 80048ae:	f000 ffb0 	bl	8005812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80048b2:	e04c      	b.n	800494e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048bc:	d114      	bne.n	80048e8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048be:	4b27      	ldr	r3, [pc, #156]	; (800495c <HAL_TIM_Base_MspInit+0xf4>)
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	4a26      	ldr	r2, [pc, #152]	; (800495c <HAL_TIM_Base_MspInit+0xf4>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	61d3      	str	r3, [r2, #28]
 80048ca:	4b24      	ldr	r3, [pc, #144]	; (800495c <HAL_TIM_Base_MspInit+0xf4>)
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80048d6:	2200      	movs	r2, #0
 80048d8:	2103      	movs	r1, #3
 80048da:	201c      	movs	r0, #28
 80048dc:	f000 ff7d 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048e0:	201c      	movs	r0, #28
 80048e2:	f000 ff96 	bl	8005812 <HAL_NVIC_EnableIRQ>
}
 80048e6:	e032      	b.n	800494e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <HAL_TIM_Base_MspInit+0xf8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d114      	bne.n	800491c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048f2:	4b1a      	ldr	r3, [pc, #104]	; (800495c <HAL_TIM_Base_MspInit+0xf4>)
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	4a19      	ldr	r2, [pc, #100]	; (800495c <HAL_TIM_Base_MspInit+0xf4>)
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	61d3      	str	r3, [r2, #28]
 80048fe:	4b17      	ldr	r3, [pc, #92]	; (800495c <HAL_TIM_Base_MspInit+0xf4>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 8, 0);
 800490a:	2200      	movs	r2, #0
 800490c:	2108      	movs	r1, #8
 800490e:	201d      	movs	r0, #29
 8004910:	f000 ff63 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004914:	201d      	movs	r0, #29
 8004916:	f000 ff7c 	bl	8005812 <HAL_NVIC_EnableIRQ>
}
 800491a:	e018      	b.n	800494e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a10      	ldr	r2, [pc, #64]	; (8004964 <HAL_TIM_Base_MspInit+0xfc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d113      	bne.n	800494e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004926:	4b0d      	ldr	r3, [pc, #52]	; (800495c <HAL_TIM_Base_MspInit+0xf4>)
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	4a0c      	ldr	r2, [pc, #48]	; (800495c <HAL_TIM_Base_MspInit+0xf4>)
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	61d3      	str	r3, [r2, #28]
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <HAL_TIM_Base_MspInit+0xf4>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 14, 0);
 800493e:	2200      	movs	r2, #0
 8004940:	210e      	movs	r1, #14
 8004942:	201e      	movs	r0, #30
 8004944:	f000 ff49 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004948:	201e      	movs	r0, #30
 800494a:	f000 ff62 	bl	8005812 <HAL_NVIC_EnableIRQ>
}
 800494e:	bf00      	nop
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40021000 	.word	0x40021000
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800

08004968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004970:	f107 0310 	add.w	r3, r7, #16
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a33      	ldr	r2, [pc, #204]	; (8004a50 <HAL_UART_MspInit+0xe8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d15f      	bne.n	8004a48 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004988:	4b32      	ldr	r3, [pc, #200]	; (8004a54 <HAL_UART_MspInit+0xec>)
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	4a31      	ldr	r2, [pc, #196]	; (8004a54 <HAL_UART_MspInit+0xec>)
 800498e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004992:	6193      	str	r3, [r2, #24]
 8004994:	4b2f      	ldr	r3, [pc, #188]	; (8004a54 <HAL_UART_MspInit+0xec>)
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049a0:	4b2c      	ldr	r3, [pc, #176]	; (8004a54 <HAL_UART_MspInit+0xec>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	4a2b      	ldr	r2, [pc, #172]	; (8004a54 <HAL_UART_MspInit+0xec>)
 80049a6:	f043 0304 	orr.w	r3, r3, #4
 80049aa:	6193      	str	r3, [r2, #24]
 80049ac:	4b29      	ldr	r3, [pc, #164]	; (8004a54 <HAL_UART_MspInit+0xec>)
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80049b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049be:	2302      	movs	r3, #2
 80049c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049c2:	2303      	movs	r3, #3
 80049c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c6:	f107 0310 	add.w	r3, r7, #16
 80049ca:	4619      	mov	r1, r3
 80049cc:	4822      	ldr	r0, [pc, #136]	; (8004a58 <HAL_UART_MspInit+0xf0>)
 80049ce:	f001 f9eb 	bl	8005da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80049d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e0:	f107 0310 	add.w	r3, r7, #16
 80049e4:	4619      	mov	r1, r3
 80049e6:	481c      	ldr	r0, [pc, #112]	; (8004a58 <HAL_UART_MspInit+0xf0>)
 80049e8:	f001 f9de 	bl	8005da8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <HAL_UART_MspInit+0xf4>)
 80049ee:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <HAL_UART_MspInit+0xf8>)
 80049f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049f2:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <HAL_UART_MspInit+0xf4>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049f8:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <HAL_UART_MspInit+0xf4>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049fe:	4b17      	ldr	r3, [pc, #92]	; (8004a5c <HAL_UART_MspInit+0xf4>)
 8004a00:	2280      	movs	r2, #128	; 0x80
 8004a02:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a04:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <HAL_UART_MspInit+0xf4>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a0a:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <HAL_UART_MspInit+0xf4>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004a10:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <HAL_UART_MspInit+0xf4>)
 8004a12:	2220      	movs	r2, #32
 8004a14:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a16:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <HAL_UART_MspInit+0xf4>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a1c:	480f      	ldr	r0, [pc, #60]	; (8004a5c <HAL_UART_MspInit+0xf4>)
 8004a1e:	f000 ff21 	bl	8005864 <HAL_DMA_Init>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8004a28:	f7ff fe20 	bl	800466c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a0b      	ldr	r2, [pc, #44]	; (8004a5c <HAL_UART_MspInit+0xf4>)
 8004a30:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a32:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <HAL_UART_MspInit+0xf4>)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	2025      	movs	r0, #37	; 0x25
 8004a3e:	f000 fecc 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a42:	2025      	movs	r0, #37	; 0x25
 8004a44:	f000 fee5 	bl	8005812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a48:	bf00      	nop
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40013800 	.word	0x40013800
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40010800 	.word	0x40010800
 8004a5c:	200004e0 	.word	0x200004e0
 8004a60:	40020058 	.word	0x40020058

08004a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a68:	e7fe      	b.n	8004a68 <NMI_Handler+0x4>

08004a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a6e:	e7fe      	b.n	8004a6e <HardFault_Handler+0x4>

08004a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a74:	e7fe      	b.n	8004a74 <MemManage_Handler+0x4>

08004a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a76:	b480      	push	{r7}
 8004a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a7a:	e7fe      	b.n	8004a7a <BusFault_Handler+0x4>

08004a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a80:	e7fe      	b.n	8004a80 <UsageFault_Handler+0x4>

08004a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a82:	b480      	push	{r7}
 8004a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr

08004a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr

08004a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004aaa:	f000 f92f 	bl	8004d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004ab6:	2002      	movs	r0, #2
 8004ab8:	f001 fbfe 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004abc:	bf00      	nop
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004ac4:	2004      	movs	r0, #4
 8004ac6:	f001 fbf7 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}

08004ace <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004ad2:	2008      	movs	r0, #8
 8004ad4:	f001 fbf0 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004ad8:	bf00      	nop
 8004ada:	bd80      	pop	{r7, pc}

08004adc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004ae0:	2010      	movs	r0, #16
 8004ae2:	f001 fbe9 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004af0:	4802      	ldr	r0, [pc, #8]	; (8004afc <DMA1_Channel5_IRQHandler+0x10>)
 8004af2:	f001 f825 	bl	8005b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	200004e0 	.word	0x200004e0

08004b00 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004b04:	4803      	ldr	r0, [pc, #12]	; (8004b14 <ADC1_2_IRQHandler+0x14>)
 8004b06:	f000 faff 	bl	8005108 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004b0a:	4803      	ldr	r0, [pc, #12]	; (8004b18 <ADC1_2_IRQHandler+0x18>)
 8004b0c:	f000 fafc 	bl	8005108 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004b10:	bf00      	nop
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	200002c4 	.word	0x200002c4
 8004b18:	200002f4 	.word	0x200002f4

08004b1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004b20:	2020      	movs	r0, #32
 8004b22:	f001 fbc9 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004b26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004b2a:	f001 fbc5 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b38:	4802      	ldr	r0, [pc, #8]	; (8004b44 <TIM1_BRK_IRQHandler+0x10>)
 8004b3a:	f002 fe37 	bl	80077ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004b3e:	bf00      	nop
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000378 	.word	0x20000378

08004b48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b4c:	4802      	ldr	r0, [pc, #8]	; (8004b58 <TIM1_UP_IRQHandler+0x10>)
 8004b4e:	f002 fe2d 	bl	80077ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004b52:	bf00      	nop
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000378 	.word	0x20000378

08004b5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b60:	4802      	ldr	r0, [pc, #8]	; (8004b6c <TIM2_IRQHandler+0x10>)
 8004b62:	f002 fe23 	bl	80077ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b66:	bf00      	nop
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	200003c0 	.word	0x200003c0

08004b70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004b74:	4802      	ldr	r0, [pc, #8]	; (8004b80 <TIM3_IRQHandler+0x10>)
 8004b76:	f002 fe19 	bl	80077ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004b7a:	bf00      	nop
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000408 	.word	0x20000408

08004b84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004b88:	4802      	ldr	r0, [pc, #8]	; (8004b94 <TIM4_IRQHandler+0x10>)
 8004b8a:	f002 fe0f 	bl	80077ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000450 	.word	0x20000450

08004b98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b9c:	4802      	ldr	r0, [pc, #8]	; (8004ba8 <USART1_IRQHandler+0x10>)
 8004b9e:	f003 fad9 	bl	8008154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000498 	.word	0x20000498

08004bac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004bb0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004bb4:	f001 fb80 	bl	80062b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bc4:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <_sbrk+0x5c>)
 8004bc6:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <_sbrk+0x60>)
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bd0:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <_sbrk+0x64>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bd8:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <_sbrk+0x64>)
 8004bda:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <_sbrk+0x68>)
 8004bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bde:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <_sbrk+0x64>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4413      	add	r3, r2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d207      	bcs.n	8004bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bec:	f004 fbe0 	bl	80093b0 <__errno>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	220c      	movs	r2, #12
 8004bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfa:	e009      	b.n	8004c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bfc:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <_sbrk+0x64>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <_sbrk+0x64>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4413      	add	r3, r2
 8004c0a:	4a05      	ldr	r2, [pc, #20]	; (8004c20 <_sbrk+0x64>)
 8004c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20005000 	.word	0x20005000
 8004c1c:	00000c00 	.word	0x00000c00
 8004c20:	20000c00 	.word	0x20000c00
 8004c24:	20000d50 	.word	0x20000d50

08004c28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004c34:	f7ff fff8 	bl	8004c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c38:	480b      	ldr	r0, [pc, #44]	; (8004c68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004c3a:	490c      	ldr	r1, [pc, #48]	; (8004c6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004c3c:	4a0c      	ldr	r2, [pc, #48]	; (8004c70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c40:	e002      	b.n	8004c48 <LoopCopyDataInit>

08004c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c46:	3304      	adds	r3, #4

08004c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c4c:	d3f9      	bcc.n	8004c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c4e:	4a09      	ldr	r2, [pc, #36]	; (8004c74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004c50:	4c09      	ldr	r4, [pc, #36]	; (8004c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c54:	e001      	b.n	8004c5a <LoopFillZerobss>

08004c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c58:	3204      	adds	r2, #4

08004c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c5c:	d3fb      	bcc.n	8004c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c5e:	f004 fbad 	bl	80093bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c62:	f7fc fec3 	bl	80019ec <main>
  bx lr
 8004c66:	4770      	bx	lr
  ldr r0, =_sdata
 8004c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c6c:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 8004c70:	0800a99c 	.word	0x0800a99c
  ldr r2, =_sbss
 8004c74:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8004c78:	20000d50 	.word	0x20000d50

08004c7c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c7c:	e7fe      	b.n	8004c7c <CAN1_RX1_IRQHandler>
	...

08004c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c84:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <HAL_Init+0x28>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a07      	ldr	r2, [pc, #28]	; (8004ca8 <HAL_Init+0x28>)
 8004c8a:	f043 0310 	orr.w	r3, r3, #16
 8004c8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c90:	2003      	movs	r0, #3
 8004c92:	f000 fd97 	bl	80057c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c96:	200f      	movs	r0, #15
 8004c98:	f000 f808 	bl	8004cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c9c:	f7ff fcec 	bl	8004678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40022000 	.word	0x40022000

08004cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cb4:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <HAL_InitTick+0x54>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <HAL_InitTick+0x58>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fdbd 	bl	800584a <HAL_SYSTICK_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e00e      	b.n	8004cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b0f      	cmp	r3, #15
 8004cde:	d80a      	bhi.n	8004cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	f000 fd77 	bl	80057da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cec:	4a06      	ldr	r2, [pc, #24]	; (8004d08 <HAL_InitTick+0x5c>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e000      	b.n	8004cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000248 	.word	0x20000248
 8004d04:	20000250 	.word	0x20000250
 8004d08:	2000024c 	.word	0x2000024c

08004d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <HAL_IncTick+0x1c>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_IncTick+0x20>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	4a03      	ldr	r2, [pc, #12]	; (8004d2c <HAL_IncTick+0x20>)
 8004d1e:	6013      	str	r3, [r2, #0]
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr
 8004d28:	20000250 	.word	0x20000250
 8004d2c:	20000c04 	.word	0x20000c04

08004d30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return uwTick;
 8004d34:	4b02      	ldr	r3, [pc, #8]	; (8004d40 <HAL_GetTick+0x10>)
 8004d36:	681b      	ldr	r3, [r3, #0]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	20000c04 	.word	0x20000c04

08004d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d4c:	f7ff fff0 	bl	8004d30 <HAL_GetTick>
 8004d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5c:	d005      	beq.n	8004d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <HAL_Delay+0x44>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d6a:	bf00      	nop
 8004d6c:	f7ff ffe0 	bl	8004d30 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d8f7      	bhi.n	8004d6c <HAL_Delay+0x28>
  {
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000250 	.word	0x20000250

08004d8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e0be      	b.n	8004f2c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff fc76 	bl	80046bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fbbd 	bl	8005550 <ADC_ConversionStop_Disable>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f040 8099 	bne.w	8004f1a <HAL_ADC_Init+0x18e>
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f040 8095 	bne.w	8004f1a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004df8:	f023 0302 	bic.w	r3, r3, #2
 8004dfc:	f043 0202 	orr.w	r2, r3, #2
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	7b1b      	ldrb	r3, [r3, #12]
 8004e12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004e14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e24:	d003      	beq.n	8004e2e <HAL_ADC_Init+0xa2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d102      	bne.n	8004e34 <HAL_ADC_Init+0xa8>
 8004e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e32:	e000      	b.n	8004e36 <HAL_ADC_Init+0xaa>
 8004e34:	2300      	movs	r3, #0
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	7d1b      	ldrb	r3, [r3, #20]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d119      	bne.n	8004e78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	7b1b      	ldrb	r3, [r3, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d109      	bne.n	8004e60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	035a      	lsls	r2, r3, #13
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	e00b      	b.n	8004e78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	f043 0201 	orr.w	r2, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <HAL_ADC_Init+0x1a8>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea8:	d003      	beq.n	8004eb2 <HAL_ADC_Init+0x126>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d104      	bne.n	8004ebc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	051b      	lsls	r3, r3, #20
 8004eba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <HAL_ADC_Init+0x1ac>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d10b      	bne.n	8004ef8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	f023 0303 	bic.w	r3, r3, #3
 8004eee:	f043 0201 	orr.w	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004ef6:	e018      	b.n	8004f2a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	f023 0312 	bic.w	r3, r3, #18
 8004f00:	f043 0210 	orr.w	r2, r3, #16
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	f043 0201 	orr.w	r2, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004f18:	e007      	b.n	8004f2a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	f043 0210 	orr.w	r2, r3, #16
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	ffe1f7fd 	.word	0xffe1f7fd
 8004f38:	ff1f0efe 	.word	0xff1f0efe

08004f3c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_ADC_Start+0x1a>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e098      	b.n	8005088 <HAL_ADC_Start+0x14c>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa9c 	bl	800549c <ADC_Enable>
 8004f64:	4603      	mov	r3, r0
 8004f66:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f040 8087 	bne.w	800507e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f78:	f023 0301 	bic.w	r3, r3, #1
 8004f7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a41      	ldr	r2, [pc, #260]	; (8005090 <HAL_ADC_Start+0x154>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d105      	bne.n	8004f9a <HAL_ADC_Start+0x5e>
 8004f8e:	4b41      	ldr	r3, [pc, #260]	; (8005094 <HAL_ADC_Start+0x158>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d115      	bne.n	8004fc6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d026      	beq.n	8005002 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004fc4:	e01d      	b.n	8005002 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2f      	ldr	r2, [pc, #188]	; (8005094 <HAL_ADC_Start+0x158>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <HAL_ADC_Start+0xaa>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a2b      	ldr	r2, [pc, #172]	; (8005090 <HAL_ADC_Start+0x154>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d10d      	bne.n	8005002 <HAL_ADC_Start+0xc6>
 8004fe6:	4b2b      	ldr	r3, [pc, #172]	; (8005094 <HAL_ADC_Start+0x158>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d007      	beq.n	8005002 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ffa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d006      	beq.n	800501c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	f023 0206 	bic.w	r2, r3, #6
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	62da      	str	r2, [r3, #44]	; 0x2c
 800501a:	e002      	b.n	8005022 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f06f 0202 	mvn.w	r2, #2
 8005032:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800503e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005042:	d113      	bne.n	800506c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005048:	4a11      	ldr	r2, [pc, #68]	; (8005090 <HAL_ADC_Start+0x154>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d105      	bne.n	800505a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800504e:	4b11      	ldr	r3, [pc, #68]	; (8005094 <HAL_ADC_Start+0x158>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005056:	2b00      	cmp	r3, #0
 8005058:	d108      	bne.n	800506c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005068:	609a      	str	r2, [r3, #8]
 800506a:	e00c      	b.n	8005086 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	e003      	b.n	8005086 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8005086:	7bfb      	ldrb	r3, [r7, #15]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40012800 	.word	0x40012800
 8005094:	40012400 	.word	0x40012400

08005098 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_ADC_Stop+0x1a>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e01a      	b.n	80050e8 <HAL_ADC_Stop+0x50>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa48 	bl	8005550 <ADC_ConversionStop_Disable>
 80050c0:	4603      	mov	r3, r0
 80050c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	f043 0201 	orr.w	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr

08005108 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d03e      	beq.n	80051a8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d039      	beq.n	80051a8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d105      	bne.n	800514c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005156:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800515a:	d11d      	bne.n	8005198 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005160:	2b00      	cmp	r3, #0
 8005162:	d119      	bne.n	8005198 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0220 	bic.w	r2, r2, #32
 8005172:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	f043 0201 	orr.w	r2, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f874 	bl	8005286 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f06f 0212 	mvn.w	r2, #18
 80051a6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d04d      	beq.n	800524e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d048      	beq.n	800524e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80051de:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80051e2:	d012      	beq.n	800520a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d125      	bne.n	800523e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80051fc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005200:	d11d      	bne.n	800523e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005206:	2b00      	cmp	r3, #0
 8005208:	d119      	bne.n	800523e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005218:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d105      	bne.n	800523e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	f043 0201 	orr.w	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9c7 	bl	80055d2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 020c 	mvn.w	r2, #12
 800524c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d012      	beq.n	800527e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00d      	beq.n	800527e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f812 	bl	8005298 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0201 	mvn.w	r2, #1
 800527c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800527e:	bf00      	nop
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr
	...

080052ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x20>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e0dc      	b.n	8005486 <HAL_ADC_ConfigChannel+0x1da>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b06      	cmp	r3, #6
 80052da:	d81c      	bhi.n	8005316 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	3b05      	subs	r3, #5
 80052ee:	221f      	movs	r2, #31
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	43db      	mvns	r3, r3
 80052f6:	4019      	ands	r1, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	3b05      	subs	r3, #5
 8005308:	fa00 f203 	lsl.w	r2, r0, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	635a      	str	r2, [r3, #52]	; 0x34
 8005314:	e03c      	b.n	8005390 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b0c      	cmp	r3, #12
 800531c:	d81c      	bhi.n	8005358 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	3b23      	subs	r3, #35	; 0x23
 8005330:	221f      	movs	r2, #31
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43db      	mvns	r3, r3
 8005338:	4019      	ands	r1, r3
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	3b23      	subs	r3, #35	; 0x23
 800534a:	fa00 f203 	lsl.w	r2, r0, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
 8005356:	e01b      	b.n	8005390 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	3b41      	subs	r3, #65	; 0x41
 800536a:	221f      	movs	r2, #31
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	43db      	mvns	r3, r3
 8005372:	4019      	ands	r1, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	3b41      	subs	r3, #65	; 0x41
 8005384:	fa00 f203 	lsl.w	r2, r0, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b09      	cmp	r3, #9
 8005396:	d91c      	bls.n	80053d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68d9      	ldr	r1, [r3, #12]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4613      	mov	r3, r2
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	4413      	add	r3, r2
 80053a8:	3b1e      	subs	r3, #30
 80053aa:	2207      	movs	r2, #7
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	43db      	mvns	r3, r3
 80053b2:	4019      	ands	r1, r3
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	6898      	ldr	r0, [r3, #8]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	4413      	add	r3, r2
 80053c2:	3b1e      	subs	r3, #30
 80053c4:	fa00 f203 	lsl.w	r2, r0, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	60da      	str	r2, [r3, #12]
 80053d0:	e019      	b.n	8005406 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6919      	ldr	r1, [r3, #16]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	4413      	add	r3, r2
 80053e2:	2207      	movs	r2, #7
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	4019      	ands	r1, r3
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6898      	ldr	r0, [r3, #8]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4413      	add	r3, r2
 80053fa:	fa00 f203 	lsl.w	r2, r0, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b10      	cmp	r3, #16
 800540c:	d003      	beq.n	8005416 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005412:	2b11      	cmp	r3, #17
 8005414:	d132      	bne.n	800547c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1d      	ldr	r2, [pc, #116]	; (8005490 <HAL_ADC_ConfigChannel+0x1e4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d125      	bne.n	800546c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d126      	bne.n	800547c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800543c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b10      	cmp	r3, #16
 8005444:	d11a      	bne.n	800547c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005446:	4b13      	ldr	r3, [pc, #76]	; (8005494 <HAL_ADC_ConfigChannel+0x1e8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a13      	ldr	r2, [pc, #76]	; (8005498 <HAL_ADC_ConfigChannel+0x1ec>)
 800544c:	fba2 2303 	umull	r2, r3, r2, r3
 8005450:	0c9a      	lsrs	r2, r3, #18
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800545c:	e002      	b.n	8005464 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	3b01      	subs	r3, #1
 8005462:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f9      	bne.n	800545e <HAL_ADC_ConfigChannel+0x1b2>
 800546a:	e007      	b.n	800547c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	f043 0220 	orr.w	r2, r3, #32
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr
 8005490:	40012400 	.word	0x40012400
 8005494:	20000248 	.word	0x20000248
 8005498:	431bde83 	.word	0x431bde83

0800549c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d040      	beq.n	800553c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80054ca:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <ADC_Enable+0xac>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1f      	ldr	r2, [pc, #124]	; (800554c <ADC_Enable+0xb0>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	0c9b      	lsrs	r3, r3, #18
 80054d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80054d8:	e002      	b.n	80054e0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	3b01      	subs	r3, #1
 80054de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f9      	bne.n	80054da <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80054e6:	f7ff fc23 	bl	8004d30 <HAL_GetTick>
 80054ea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80054ec:	e01f      	b.n	800552e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80054ee:	f7ff fc1f 	bl	8004d30 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d918      	bls.n	800552e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b01      	cmp	r3, #1
 8005508:	d011      	beq.n	800552e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	f043 0210 	orr.w	r2, r3, #16
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	f043 0201 	orr.w	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e007      	b.n	800553e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b01      	cmp	r3, #1
 800553a:	d1d8      	bne.n	80054ee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000248 	.word	0x20000248
 800554c:	431bde83 	.word	0x431bde83

08005550 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b01      	cmp	r3, #1
 8005568:	d12e      	bne.n	80055c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0201 	bic.w	r2, r2, #1
 8005578:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800557a:	f7ff fbd9 	bl	8004d30 <HAL_GetTick>
 800557e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005580:	e01b      	b.n	80055ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005582:	f7ff fbd5 	bl	8004d30 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d914      	bls.n	80055ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b01      	cmp	r3, #1
 800559c:	d10d      	bne.n	80055ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	f043 0210 	orr.w	r2, r3, #16
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	f043 0201 	orr.w	r2, r3, #1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e007      	b.n	80055ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d0dc      	beq.n	8005582 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055f4:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <__NVIC_SetPriorityGrouping+0x44>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005600:	4013      	ands	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800560c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005616:	4a04      	ldr	r2, [pc, #16]	; (8005628 <__NVIC_SetPriorityGrouping+0x44>)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	60d3      	str	r3, [r2, #12]
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	e000ed00 	.word	0xe000ed00

0800562c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005630:	4b04      	ldr	r3, [pc, #16]	; (8005644 <__NVIC_GetPriorityGrouping+0x18>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	0a1b      	lsrs	r3, r3, #8
 8005636:	f003 0307 	and.w	r3, r3, #7
}
 800563a:	4618      	mov	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	e000ed00 	.word	0xe000ed00

08005648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005656:	2b00      	cmp	r3, #0
 8005658:	db0b      	blt.n	8005672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	f003 021f 	and.w	r2, r3, #31
 8005660:	4906      	ldr	r1, [pc, #24]	; (800567c <__NVIC_EnableIRQ+0x34>)
 8005662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	2001      	movs	r0, #1
 800566a:	fa00 f202 	lsl.w	r2, r0, r2
 800566e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr
 800567c:	e000e100 	.word	0xe000e100

08005680 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800568a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568e:	2b00      	cmp	r3, #0
 8005690:	db12      	blt.n	80056b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	f003 021f 	and.w	r2, r3, #31
 8005698:	490a      	ldr	r1, [pc, #40]	; (80056c4 <__NVIC_DisableIRQ+0x44>)
 800569a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	2001      	movs	r0, #1
 80056a2:	fa00 f202 	lsl.w	r2, r0, r2
 80056a6:	3320      	adds	r3, #32
 80056a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80056ac:	f3bf 8f4f 	dsb	sy
}
 80056b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056b2:	f3bf 8f6f 	isb	sy
}
 80056b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	e000e100 	.word	0xe000e100

080056c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	6039      	str	r1, [r7, #0]
 80056d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	db0a      	blt.n	80056f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	490c      	ldr	r1, [pc, #48]	; (8005714 <__NVIC_SetPriority+0x4c>)
 80056e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e6:	0112      	lsls	r2, r2, #4
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	440b      	add	r3, r1
 80056ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056f0:	e00a      	b.n	8005708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	4908      	ldr	r1, [pc, #32]	; (8005718 <__NVIC_SetPriority+0x50>)
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	3b04      	subs	r3, #4
 8005700:	0112      	lsls	r2, r2, #4
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	440b      	add	r3, r1
 8005706:	761a      	strb	r2, [r3, #24]
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	e000e100 	.word	0xe000e100
 8005718:	e000ed00 	.word	0xe000ed00

0800571c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800571c:	b480      	push	{r7}
 800571e:	b089      	sub	sp, #36	; 0x24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f1c3 0307 	rsb	r3, r3, #7
 8005736:	2b04      	cmp	r3, #4
 8005738:	bf28      	it	cs
 800573a:	2304      	movcs	r3, #4
 800573c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3304      	adds	r3, #4
 8005742:	2b06      	cmp	r3, #6
 8005744:	d902      	bls.n	800574c <NVIC_EncodePriority+0x30>
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	3b03      	subs	r3, #3
 800574a:	e000      	b.n	800574e <NVIC_EncodePriority+0x32>
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005750:	f04f 32ff 	mov.w	r2, #4294967295
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43da      	mvns	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	401a      	ands	r2, r3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005764:	f04f 31ff 	mov.w	r1, #4294967295
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	43d9      	mvns	r1, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005774:	4313      	orrs	r3, r2
         );
}
 8005776:	4618      	mov	r0, r3
 8005778:	3724      	adds	r7, #36	; 0x24
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3b01      	subs	r3, #1
 800578c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005790:	d301      	bcc.n	8005796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005792:	2301      	movs	r3, #1
 8005794:	e00f      	b.n	80057b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005796:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <SysTick_Config+0x40>)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3b01      	subs	r3, #1
 800579c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800579e:	210f      	movs	r1, #15
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295
 80057a4:	f7ff ff90 	bl	80056c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <SysTick_Config+0x40>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ae:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <SysTick_Config+0x40>)
 80057b0:	2207      	movs	r2, #7
 80057b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	e000e010 	.word	0xe000e010

080057c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff ff09 	bl	80055e4 <__NVIC_SetPriorityGrouping>
}
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057da:	b580      	push	{r7, lr}
 80057dc:	b086      	sub	sp, #24
 80057de:	af00      	add	r7, sp, #0
 80057e0:	4603      	mov	r3, r0
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
 80057e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057ec:	f7ff ff1e 	bl	800562c <__NVIC_GetPriorityGrouping>
 80057f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	6978      	ldr	r0, [r7, #20]
 80057f8:	f7ff ff90 	bl	800571c <NVIC_EncodePriority>
 80057fc:	4602      	mov	r2, r0
 80057fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005802:	4611      	mov	r1, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff ff5f 	bl	80056c8 <__NVIC_SetPriority>
}
 800580a:	bf00      	nop
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	4603      	mov	r3, r0
 800581a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800581c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff ff11 	bl	8005648 <__NVIC_EnableIRQ>
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b082      	sub	sp, #8
 8005832:	af00      	add	r7, sp, #0
 8005834:	4603      	mov	r3, r0
 8005836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff ff1f 	bl	8005680 <__NVIC_DisableIRQ>
}
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff ff94 	bl	8005780 <SysTick_Config>
 8005858:	4603      	mov	r3, r0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e043      	b.n	8005902 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	4b22      	ldr	r3, [pc, #136]	; (800590c <HAL_DMA_Init+0xa8>)
 8005882:	4413      	add	r3, r2
 8005884:	4a22      	ldr	r2, [pc, #136]	; (8005910 <HAL_DMA_Init+0xac>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	091b      	lsrs	r3, r3, #4
 800588c:	009a      	lsls	r2, r3, #2
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <HAL_DMA_Init+0xb0>)
 8005896:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80058b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80058bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr
 800590c:	bffdfff8 	.word	0xbffdfff8
 8005910:	cccccccd 	.word	0xcccccccd
 8005914:	40020000 	.word	0x40020000

08005918 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_DMA_Start_IT+0x20>
 8005934:	2302      	movs	r3, #2
 8005936:	e04b      	b.n	80059d0 <HAL_DMA_Start_IT+0xb8>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d13a      	bne.n	80059c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0201 	bic.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f9eb 	bl	8005d4c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d008      	beq.n	8005990 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 020e 	orr.w	r2, r2, #14
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e00f      	b.n	80059b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0204 	bic.w	r2, r2, #4
 800599e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 020a 	orr.w	r2, r2, #10
 80059ae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	e005      	b.n	80059ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80059ca:	2302      	movs	r3, #2
 80059cc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d008      	beq.n	8005a02 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2204      	movs	r2, #4
 80059f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e020      	b.n	8005a44 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 020e 	bic.w	r2, r2, #14
 8005a10:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a30:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr
	...

08005a50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d005      	beq.n	8005a74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	73fb      	strb	r3, [r7, #15]
 8005a72:	e051      	b.n	8005b18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 020e 	bic.w	r2, r2, #14
 8005a82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0201 	bic.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a22      	ldr	r2, [pc, #136]	; (8005b24 <HAL_DMA_Abort_IT+0xd4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d029      	beq.n	8005af2 <HAL_DMA_Abort_IT+0xa2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a21      	ldr	r2, [pc, #132]	; (8005b28 <HAL_DMA_Abort_IT+0xd8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d022      	beq.n	8005aee <HAL_DMA_Abort_IT+0x9e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1f      	ldr	r2, [pc, #124]	; (8005b2c <HAL_DMA_Abort_IT+0xdc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d01a      	beq.n	8005ae8 <HAL_DMA_Abort_IT+0x98>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1e      	ldr	r2, [pc, #120]	; (8005b30 <HAL_DMA_Abort_IT+0xe0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d012      	beq.n	8005ae2 <HAL_DMA_Abort_IT+0x92>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1c      	ldr	r2, [pc, #112]	; (8005b34 <HAL_DMA_Abort_IT+0xe4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00a      	beq.n	8005adc <HAL_DMA_Abort_IT+0x8c>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1b      	ldr	r2, [pc, #108]	; (8005b38 <HAL_DMA_Abort_IT+0xe8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d102      	bne.n	8005ad6 <HAL_DMA_Abort_IT+0x86>
 8005ad0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ad4:	e00e      	b.n	8005af4 <HAL_DMA_Abort_IT+0xa4>
 8005ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ada:	e00b      	b.n	8005af4 <HAL_DMA_Abort_IT+0xa4>
 8005adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ae0:	e008      	b.n	8005af4 <HAL_DMA_Abort_IT+0xa4>
 8005ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ae6:	e005      	b.n	8005af4 <HAL_DMA_Abort_IT+0xa4>
 8005ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aec:	e002      	b.n	8005af4 <HAL_DMA_Abort_IT+0xa4>
 8005aee:	2310      	movs	r3, #16
 8005af0:	e000      	b.n	8005af4 <HAL_DMA_Abort_IT+0xa4>
 8005af2:	2301      	movs	r3, #1
 8005af4:	4a11      	ldr	r2, [pc, #68]	; (8005b3c <HAL_DMA_Abort_IT+0xec>)
 8005af6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	4798      	blx	r3
    } 
  }
  return status;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40020008 	.word	0x40020008
 8005b28:	4002001c 	.word	0x4002001c
 8005b2c:	40020030 	.word	0x40020030
 8005b30:	40020044 	.word	0x40020044
 8005b34:	40020058 	.word	0x40020058
 8005b38:	4002006c 	.word	0x4002006c
 8005b3c:	40020000 	.word	0x40020000

08005b40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	409a      	lsls	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d04f      	beq.n	8005c08 <HAL_DMA_IRQHandler+0xc8>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d04a      	beq.n	8005c08 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d107      	bne.n	8005b90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0204 	bic.w	r2, r2, #4
 8005b8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a66      	ldr	r2, [pc, #408]	; (8005d30 <HAL_DMA_IRQHandler+0x1f0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d029      	beq.n	8005bee <HAL_DMA_IRQHandler+0xae>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a65      	ldr	r2, [pc, #404]	; (8005d34 <HAL_DMA_IRQHandler+0x1f4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d022      	beq.n	8005bea <HAL_DMA_IRQHandler+0xaa>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a63      	ldr	r2, [pc, #396]	; (8005d38 <HAL_DMA_IRQHandler+0x1f8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d01a      	beq.n	8005be4 <HAL_DMA_IRQHandler+0xa4>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a62      	ldr	r2, [pc, #392]	; (8005d3c <HAL_DMA_IRQHandler+0x1fc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d012      	beq.n	8005bde <HAL_DMA_IRQHandler+0x9e>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a60      	ldr	r2, [pc, #384]	; (8005d40 <HAL_DMA_IRQHandler+0x200>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00a      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x98>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a5f      	ldr	r2, [pc, #380]	; (8005d44 <HAL_DMA_IRQHandler+0x204>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d102      	bne.n	8005bd2 <HAL_DMA_IRQHandler+0x92>
 8005bcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bd0:	e00e      	b.n	8005bf0 <HAL_DMA_IRQHandler+0xb0>
 8005bd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005bd6:	e00b      	b.n	8005bf0 <HAL_DMA_IRQHandler+0xb0>
 8005bd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005bdc:	e008      	b.n	8005bf0 <HAL_DMA_IRQHandler+0xb0>
 8005bde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005be2:	e005      	b.n	8005bf0 <HAL_DMA_IRQHandler+0xb0>
 8005be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005be8:	e002      	b.n	8005bf0 <HAL_DMA_IRQHandler+0xb0>
 8005bea:	2340      	movs	r3, #64	; 0x40
 8005bec:	e000      	b.n	8005bf0 <HAL_DMA_IRQHandler+0xb0>
 8005bee:	2304      	movs	r3, #4
 8005bf0:	4a55      	ldr	r2, [pc, #340]	; (8005d48 <HAL_DMA_IRQHandler+0x208>)
 8005bf2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8094 	beq.w	8005d26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005c06:	e08e      	b.n	8005d26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	409a      	lsls	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4013      	ands	r3, r2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d056      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x186>
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d051      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10b      	bne.n	8005c48 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 020a 	bic.w	r2, r2, #10
 8005c3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a38      	ldr	r2, [pc, #224]	; (8005d30 <HAL_DMA_IRQHandler+0x1f0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d029      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0x166>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a37      	ldr	r2, [pc, #220]	; (8005d34 <HAL_DMA_IRQHandler+0x1f4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d022      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x162>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a35      	ldr	r2, [pc, #212]	; (8005d38 <HAL_DMA_IRQHandler+0x1f8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01a      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x15c>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a34      	ldr	r2, [pc, #208]	; (8005d3c <HAL_DMA_IRQHandler+0x1fc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d012      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x156>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a32      	ldr	r2, [pc, #200]	; (8005d40 <HAL_DMA_IRQHandler+0x200>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00a      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x150>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a31      	ldr	r2, [pc, #196]	; (8005d44 <HAL_DMA_IRQHandler+0x204>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d102      	bne.n	8005c8a <HAL_DMA_IRQHandler+0x14a>
 8005c84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c88:	e00e      	b.n	8005ca8 <HAL_DMA_IRQHandler+0x168>
 8005c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c8e:	e00b      	b.n	8005ca8 <HAL_DMA_IRQHandler+0x168>
 8005c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c94:	e008      	b.n	8005ca8 <HAL_DMA_IRQHandler+0x168>
 8005c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c9a:	e005      	b.n	8005ca8 <HAL_DMA_IRQHandler+0x168>
 8005c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca0:	e002      	b.n	8005ca8 <HAL_DMA_IRQHandler+0x168>
 8005ca2:	2320      	movs	r3, #32
 8005ca4:	e000      	b.n	8005ca8 <HAL_DMA_IRQHandler+0x168>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	4a27      	ldr	r2, [pc, #156]	; (8005d48 <HAL_DMA_IRQHandler+0x208>)
 8005caa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d034      	beq.n	8005d26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005cc4:	e02f      	b.n	8005d26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	2208      	movs	r2, #8
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d028      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x1e8>
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d023      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 020e 	bic.w	r2, r2, #14
 8005cee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8005cfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d004      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	4798      	blx	r3
    }
  }
  return;
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
}
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40020008 	.word	0x40020008
 8005d34:	4002001c 	.word	0x4002001c
 8005d38:	40020030 	.word	0x40020030
 8005d3c:	40020044 	.word	0x40020044
 8005d40:	40020058 	.word	0x40020058
 8005d44:	4002006c 	.word	0x4002006c
 8005d48:	40020000 	.word	0x40020000

08005d4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d62:	2101      	movs	r1, #1
 8005d64:	fa01 f202 	lsl.w	r2, r1, r2
 8005d68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d108      	bne.n	8005d8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d8a:	e007      	b.n	8005d9c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	60da      	str	r2, [r3, #12]
}
 8005d9c:	bf00      	nop
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr
	...

08005da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b08b      	sub	sp, #44	; 0x2c
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005db2:	2300      	movs	r3, #0
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005db6:	2300      	movs	r3, #0
 8005db8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dba:	e169      	b.n	8006090 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	f040 8158 	bne.w	800608a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	4a9a      	ldr	r2, [pc, #616]	; (8006048 <HAL_GPIO_Init+0x2a0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d05e      	beq.n	8005ea2 <HAL_GPIO_Init+0xfa>
 8005de4:	4a98      	ldr	r2, [pc, #608]	; (8006048 <HAL_GPIO_Init+0x2a0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d875      	bhi.n	8005ed6 <HAL_GPIO_Init+0x12e>
 8005dea:	4a98      	ldr	r2, [pc, #608]	; (800604c <HAL_GPIO_Init+0x2a4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d058      	beq.n	8005ea2 <HAL_GPIO_Init+0xfa>
 8005df0:	4a96      	ldr	r2, [pc, #600]	; (800604c <HAL_GPIO_Init+0x2a4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d86f      	bhi.n	8005ed6 <HAL_GPIO_Init+0x12e>
 8005df6:	4a96      	ldr	r2, [pc, #600]	; (8006050 <HAL_GPIO_Init+0x2a8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d052      	beq.n	8005ea2 <HAL_GPIO_Init+0xfa>
 8005dfc:	4a94      	ldr	r2, [pc, #592]	; (8006050 <HAL_GPIO_Init+0x2a8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d869      	bhi.n	8005ed6 <HAL_GPIO_Init+0x12e>
 8005e02:	4a94      	ldr	r2, [pc, #592]	; (8006054 <HAL_GPIO_Init+0x2ac>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d04c      	beq.n	8005ea2 <HAL_GPIO_Init+0xfa>
 8005e08:	4a92      	ldr	r2, [pc, #584]	; (8006054 <HAL_GPIO_Init+0x2ac>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d863      	bhi.n	8005ed6 <HAL_GPIO_Init+0x12e>
 8005e0e:	4a92      	ldr	r2, [pc, #584]	; (8006058 <HAL_GPIO_Init+0x2b0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d046      	beq.n	8005ea2 <HAL_GPIO_Init+0xfa>
 8005e14:	4a90      	ldr	r2, [pc, #576]	; (8006058 <HAL_GPIO_Init+0x2b0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d85d      	bhi.n	8005ed6 <HAL_GPIO_Init+0x12e>
 8005e1a:	2b12      	cmp	r3, #18
 8005e1c:	d82a      	bhi.n	8005e74 <HAL_GPIO_Init+0xcc>
 8005e1e:	2b12      	cmp	r3, #18
 8005e20:	d859      	bhi.n	8005ed6 <HAL_GPIO_Init+0x12e>
 8005e22:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <HAL_GPIO_Init+0x80>)
 8005e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e28:	08005ea3 	.word	0x08005ea3
 8005e2c:	08005e7d 	.word	0x08005e7d
 8005e30:	08005e8f 	.word	0x08005e8f
 8005e34:	08005ed1 	.word	0x08005ed1
 8005e38:	08005ed7 	.word	0x08005ed7
 8005e3c:	08005ed7 	.word	0x08005ed7
 8005e40:	08005ed7 	.word	0x08005ed7
 8005e44:	08005ed7 	.word	0x08005ed7
 8005e48:	08005ed7 	.word	0x08005ed7
 8005e4c:	08005ed7 	.word	0x08005ed7
 8005e50:	08005ed7 	.word	0x08005ed7
 8005e54:	08005ed7 	.word	0x08005ed7
 8005e58:	08005ed7 	.word	0x08005ed7
 8005e5c:	08005ed7 	.word	0x08005ed7
 8005e60:	08005ed7 	.word	0x08005ed7
 8005e64:	08005ed7 	.word	0x08005ed7
 8005e68:	08005ed7 	.word	0x08005ed7
 8005e6c:	08005e85 	.word	0x08005e85
 8005e70:	08005e99 	.word	0x08005e99
 8005e74:	4a79      	ldr	r2, [pc, #484]	; (800605c <HAL_GPIO_Init+0x2b4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005e7a:	e02c      	b.n	8005ed6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	623b      	str	r3, [r7, #32]
          break;
 8005e82:	e029      	b.n	8005ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	623b      	str	r3, [r7, #32]
          break;
 8005e8c:	e024      	b.n	8005ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	3308      	adds	r3, #8
 8005e94:	623b      	str	r3, [r7, #32]
          break;
 8005e96:	e01f      	b.n	8005ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	623b      	str	r3, [r7, #32]
          break;
 8005ea0:	e01a      	b.n	8005ed8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005eaa:	2304      	movs	r3, #4
 8005eac:	623b      	str	r3, [r7, #32]
          break;
 8005eae:	e013      	b.n	8005ed8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d105      	bne.n	8005ec4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005eb8:	2308      	movs	r3, #8
 8005eba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	611a      	str	r2, [r3, #16]
          break;
 8005ec2:	e009      	b.n	8005ed8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	615a      	str	r2, [r3, #20]
          break;
 8005ece:	e003      	b.n	8005ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	623b      	str	r3, [r7, #32]
          break;
 8005ed4:	e000      	b.n	8005ed8 <HAL_GPIO_Init+0x130>
          break;
 8005ed6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	2bff      	cmp	r3, #255	; 0xff
 8005edc:	d801      	bhi.n	8005ee2 <HAL_GPIO_Init+0x13a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	e001      	b.n	8005ee6 <HAL_GPIO_Init+0x13e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2bff      	cmp	r3, #255	; 0xff
 8005eec:	d802      	bhi.n	8005ef4 <HAL_GPIO_Init+0x14c>
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	e002      	b.n	8005efa <HAL_GPIO_Init+0x152>
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	3b08      	subs	r3, #8
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	210f      	movs	r1, #15
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	6a39      	ldr	r1, [r7, #32]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	fa01 f303 	lsl.w	r3, r1, r3
 8005f14:	431a      	orrs	r2, r3
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80b1 	beq.w	800608a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f28:	4b4d      	ldr	r3, [pc, #308]	; (8006060 <HAL_GPIO_Init+0x2b8>)
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	4a4c      	ldr	r2, [pc, #304]	; (8006060 <HAL_GPIO_Init+0x2b8>)
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	6193      	str	r3, [r2, #24]
 8005f34:	4b4a      	ldr	r3, [pc, #296]	; (8006060 <HAL_GPIO_Init+0x2b8>)
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	60bb      	str	r3, [r7, #8]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005f40:	4a48      	ldr	r2, [pc, #288]	; (8006064 <HAL_GPIO_Init+0x2bc>)
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	089b      	lsrs	r3, r3, #2
 8005f46:	3302      	adds	r3, #2
 8005f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	220f      	movs	r2, #15
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4013      	ands	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a40      	ldr	r2, [pc, #256]	; (8006068 <HAL_GPIO_Init+0x2c0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d013      	beq.n	8005f94 <HAL_GPIO_Init+0x1ec>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a3f      	ldr	r2, [pc, #252]	; (800606c <HAL_GPIO_Init+0x2c4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d00d      	beq.n	8005f90 <HAL_GPIO_Init+0x1e8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a3e      	ldr	r2, [pc, #248]	; (8006070 <HAL_GPIO_Init+0x2c8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d007      	beq.n	8005f8c <HAL_GPIO_Init+0x1e4>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a3d      	ldr	r2, [pc, #244]	; (8006074 <HAL_GPIO_Init+0x2cc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d101      	bne.n	8005f88 <HAL_GPIO_Init+0x1e0>
 8005f84:	2303      	movs	r3, #3
 8005f86:	e006      	b.n	8005f96 <HAL_GPIO_Init+0x1ee>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	e004      	b.n	8005f96 <HAL_GPIO_Init+0x1ee>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e002      	b.n	8005f96 <HAL_GPIO_Init+0x1ee>
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <HAL_GPIO_Init+0x1ee>
 8005f94:	2300      	movs	r3, #0
 8005f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f98:	f002 0203 	and.w	r2, r2, #3
 8005f9c:	0092      	lsls	r2, r2, #2
 8005f9e:	4093      	lsls	r3, r2
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005fa6:	492f      	ldr	r1, [pc, #188]	; (8006064 <HAL_GPIO_Init+0x2bc>)
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	089b      	lsrs	r3, r3, #2
 8005fac:	3302      	adds	r3, #2
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d006      	beq.n	8005fce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005fc0:	4b2d      	ldr	r3, [pc, #180]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	492c      	ldr	r1, [pc, #176]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	608b      	str	r3, [r1, #8]
 8005fcc:	e006      	b.n	8005fdc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005fce:	4b2a      	ldr	r3, [pc, #168]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	4928      	ldr	r1, [pc, #160]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d006      	beq.n	8005ff6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005fe8:	4b23      	ldr	r3, [pc, #140]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	4922      	ldr	r1, [pc, #136]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60cb      	str	r3, [r1, #12]
 8005ff4:	e006      	b.n	8006004 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005ff6:	4b20      	ldr	r3, [pc, #128]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	491e      	ldr	r1, [pc, #120]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 8006000:	4013      	ands	r3, r2
 8006002:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d006      	beq.n	800601e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006010:	4b19      	ldr	r3, [pc, #100]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	4918      	ldr	r1, [pc, #96]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	4313      	orrs	r3, r2
 800601a:	604b      	str	r3, [r1, #4]
 800601c:	e006      	b.n	800602c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800601e:	4b16      	ldr	r3, [pc, #88]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	43db      	mvns	r3, r3
 8006026:	4914      	ldr	r1, [pc, #80]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 8006028:	4013      	ands	r3, r2
 800602a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d021      	beq.n	800607c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006038:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	490e      	ldr	r1, [pc, #56]	; (8006078 <HAL_GPIO_Init+0x2d0>)
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	4313      	orrs	r3, r2
 8006042:	600b      	str	r3, [r1, #0]
 8006044:	e021      	b.n	800608a <HAL_GPIO_Init+0x2e2>
 8006046:	bf00      	nop
 8006048:	10320000 	.word	0x10320000
 800604c:	10310000 	.word	0x10310000
 8006050:	10220000 	.word	0x10220000
 8006054:	10210000 	.word	0x10210000
 8006058:	10120000 	.word	0x10120000
 800605c:	10110000 	.word	0x10110000
 8006060:	40021000 	.word	0x40021000
 8006064:	40010000 	.word	0x40010000
 8006068:	40010800 	.word	0x40010800
 800606c:	40010c00 	.word	0x40010c00
 8006070:	40011000 	.word	0x40011000
 8006074:	40011400 	.word	0x40011400
 8006078:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800607c:	4b0b      	ldr	r3, [pc, #44]	; (80060ac <HAL_GPIO_Init+0x304>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	43db      	mvns	r3, r3
 8006084:	4909      	ldr	r1, [pc, #36]	; (80060ac <HAL_GPIO_Init+0x304>)
 8006086:	4013      	ands	r3, r2
 8006088:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	3301      	adds	r3, #1
 800608e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	fa22 f303 	lsr.w	r3, r2, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	f47f ae8e 	bne.w	8005dbc <HAL_GPIO_Init+0x14>
  }
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	372c      	adds	r7, #44	; 0x2c
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bc80      	pop	{r7}
 80060aa:	4770      	bx	lr
 80060ac:	40010400 	.word	0x40010400

080060b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b089      	sub	sp, #36	; 0x24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80060be:	e09a      	b.n	80061f6 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80060c0:	2201      	movs	r2, #1
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	4013      	ands	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 808d 	beq.w	80061f0 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80060d6:	4a4e      	ldr	r2, [pc, #312]	; (8006210 <HAL_GPIO_DeInit+0x160>)
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	089b      	lsrs	r3, r3, #2
 80060dc:	3302      	adds	r3, #2
 80060de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	220f      	movs	r2, #15
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4013      	ands	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a46      	ldr	r2, [pc, #280]	; (8006214 <HAL_GPIO_DeInit+0x164>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d013      	beq.n	8006128 <HAL_GPIO_DeInit+0x78>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a45      	ldr	r2, [pc, #276]	; (8006218 <HAL_GPIO_DeInit+0x168>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00d      	beq.n	8006124 <HAL_GPIO_DeInit+0x74>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a44      	ldr	r2, [pc, #272]	; (800621c <HAL_GPIO_DeInit+0x16c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d007      	beq.n	8006120 <HAL_GPIO_DeInit+0x70>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a43      	ldr	r2, [pc, #268]	; (8006220 <HAL_GPIO_DeInit+0x170>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d101      	bne.n	800611c <HAL_GPIO_DeInit+0x6c>
 8006118:	2303      	movs	r3, #3
 800611a:	e006      	b.n	800612a <HAL_GPIO_DeInit+0x7a>
 800611c:	2304      	movs	r3, #4
 800611e:	e004      	b.n	800612a <HAL_GPIO_DeInit+0x7a>
 8006120:	2302      	movs	r3, #2
 8006122:	e002      	b.n	800612a <HAL_GPIO_DeInit+0x7a>
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <HAL_GPIO_DeInit+0x7a>
 8006128:	2300      	movs	r3, #0
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	f002 0203 	and.w	r2, r2, #3
 8006130:	0092      	lsls	r2, r2, #2
 8006132:	4093      	lsls	r3, r2
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	429a      	cmp	r2, r3
 8006138:	d132      	bne.n	80061a0 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800613a:	4b3a      	ldr	r3, [pc, #232]	; (8006224 <HAL_GPIO_DeInit+0x174>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	43db      	mvns	r3, r3
 8006142:	4938      	ldr	r1, [pc, #224]	; (8006224 <HAL_GPIO_DeInit+0x174>)
 8006144:	4013      	ands	r3, r2
 8006146:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006148:	4b36      	ldr	r3, [pc, #216]	; (8006224 <HAL_GPIO_DeInit+0x174>)
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	43db      	mvns	r3, r3
 8006150:	4934      	ldr	r1, [pc, #208]	; (8006224 <HAL_GPIO_DeInit+0x174>)
 8006152:	4013      	ands	r3, r2
 8006154:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006156:	4b33      	ldr	r3, [pc, #204]	; (8006224 <HAL_GPIO_DeInit+0x174>)
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	43db      	mvns	r3, r3
 800615e:	4931      	ldr	r1, [pc, #196]	; (8006224 <HAL_GPIO_DeInit+0x174>)
 8006160:	4013      	ands	r3, r2
 8006162:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006164:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <HAL_GPIO_DeInit+0x174>)
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	43db      	mvns	r3, r3
 800616c:	492d      	ldr	r1, [pc, #180]	; (8006224 <HAL_GPIO_DeInit+0x174>)
 800616e:	4013      	ands	r3, r2
 8006170:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	f003 0303 	and.w	r3, r3, #3
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	220f      	movs	r2, #15
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8006182:	4a23      	ldr	r2, [pc, #140]	; (8006210 <HAL_GPIO_DeInit+0x160>)
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	3302      	adds	r3, #2
 800618a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	43da      	mvns	r2, r3
 8006192:	481f      	ldr	r0, [pc, #124]	; (8006210 <HAL_GPIO_DeInit+0x160>)
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	089b      	lsrs	r3, r3, #2
 8006198:	400a      	ands	r2, r1
 800619a:	3302      	adds	r3, #2
 800619c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2bff      	cmp	r3, #255	; 0xff
 80061a4:	d801      	bhi.n	80061aa <HAL_GPIO_DeInit+0xfa>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	e001      	b.n	80061ae <HAL_GPIO_DeInit+0xfe>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3304      	adds	r3, #4
 80061ae:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2bff      	cmp	r3, #255	; 0xff
 80061b4:	d802      	bhi.n	80061bc <HAL_GPIO_DeInit+0x10c>
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	e002      	b.n	80061c2 <HAL_GPIO_DeInit+0x112>
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	3b08      	subs	r3, #8
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	210f      	movs	r1, #15
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	fa01 f303 	lsl.w	r3, r1, r3
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	2104      	movs	r1, #4
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	fa01 f303 	lsl.w	r3, r1, r3
 80061dc:	431a      	orrs	r2, r3
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	43db      	mvns	r3, r3
 80061ea:	401a      	ands	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	60da      	str	r2, [r3, #12]
    }

    position++;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	3301      	adds	r3, #1
 80061f4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	fa22 f303 	lsr.w	r3, r2, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f47f af5e 	bne.w	80060c0 <HAL_GPIO_DeInit+0x10>
  }
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	3724      	adds	r7, #36	; 0x24
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr
 8006210:	40010000 	.word	0x40010000
 8006214:	40010800 	.word	0x40010800
 8006218:	40010c00 	.word	0x40010c00
 800621c:	40011000 	.word	0x40011000
 8006220:	40011400 	.word	0x40011400
 8006224:	40010400 	.word	0x40010400

08006228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	887b      	ldrh	r3, [r7, #2]
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006240:	2301      	movs	r3, #1
 8006242:	73fb      	strb	r3, [r7, #15]
 8006244:	e001      	b.n	800624a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr

08006256 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	807b      	strh	r3, [r7, #2]
 8006262:	4613      	mov	r3, r2
 8006264:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006266:	787b      	ldrb	r3, [r7, #1]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800626c:	887a      	ldrh	r2, [r7, #2]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006272:	e003      	b.n	800627c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006274:	887b      	ldrh	r3, [r7, #2]
 8006276:	041a      	lsls	r2, r3, #16
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	611a      	str	r2, [r3, #16]
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr

08006286 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006298:	887a      	ldrh	r2, [r7, #2]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4013      	ands	r3, r2
 800629e:	041a      	lsls	r2, r3, #16
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	43d9      	mvns	r1, r3
 80062a4:	887b      	ldrh	r3, [r7, #2]
 80062a6:	400b      	ands	r3, r1
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	611a      	str	r2, [r3, #16]
}
 80062ae:	bf00      	nop
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr

080062b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80062c2:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062c4:	695a      	ldr	r2, [r3, #20]
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	4013      	ands	r3, r2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d006      	beq.n	80062dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062ce:	4a05      	ldr	r2, [pc, #20]	; (80062e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062d0:	88fb      	ldrh	r3, [r7, #6]
 80062d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fd f962 	bl	80035a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40010400 	.word	0x40010400

080062e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e12b      	b.n	8006552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fe fa4a 	bl	80047a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2224      	movs	r2, #36	; 0x24
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800633a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800634a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800634c:	f001 f862 	bl	8007414 <HAL_RCC_GetPCLK1Freq>
 8006350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	4a81      	ldr	r2, [pc, #516]	; (800655c <HAL_I2C_Init+0x274>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d807      	bhi.n	800636c <HAL_I2C_Init+0x84>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a80      	ldr	r2, [pc, #512]	; (8006560 <HAL_I2C_Init+0x278>)
 8006360:	4293      	cmp	r3, r2
 8006362:	bf94      	ite	ls
 8006364:	2301      	movls	r3, #1
 8006366:	2300      	movhi	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	e006      	b.n	800637a <HAL_I2C_Init+0x92>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4a7d      	ldr	r2, [pc, #500]	; (8006564 <HAL_I2C_Init+0x27c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	bf94      	ite	ls
 8006374:	2301      	movls	r3, #1
 8006376:	2300      	movhi	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e0e7      	b.n	8006552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4a78      	ldr	r2, [pc, #480]	; (8006568 <HAL_I2C_Init+0x280>)
 8006386:	fba2 2303 	umull	r2, r3, r2, r3
 800638a:	0c9b      	lsrs	r3, r3, #18
 800638c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	4a6a      	ldr	r2, [pc, #424]	; (800655c <HAL_I2C_Init+0x274>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d802      	bhi.n	80063bc <HAL_I2C_Init+0xd4>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	3301      	adds	r3, #1
 80063ba:	e009      	b.n	80063d0 <HAL_I2C_Init+0xe8>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063c2:	fb02 f303 	mul.w	r3, r2, r3
 80063c6:	4a69      	ldr	r2, [pc, #420]	; (800656c <HAL_I2C_Init+0x284>)
 80063c8:	fba2 2303 	umull	r2, r3, r2, r3
 80063cc:	099b      	lsrs	r3, r3, #6
 80063ce:	3301      	adds	r3, #1
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	430b      	orrs	r3, r1
 80063d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80063e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	495c      	ldr	r1, [pc, #368]	; (800655c <HAL_I2C_Init+0x274>)
 80063ec:	428b      	cmp	r3, r1
 80063ee:	d819      	bhi.n	8006424 <HAL_I2C_Init+0x13c>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1e59      	subs	r1, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80063fe:	1c59      	adds	r1, r3, #1
 8006400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006404:	400b      	ands	r3, r1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <HAL_I2C_Init+0x138>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	1e59      	subs	r1, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	fbb1 f3f3 	udiv	r3, r1, r3
 8006418:	3301      	adds	r3, #1
 800641a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800641e:	e051      	b.n	80064c4 <HAL_I2C_Init+0x1dc>
 8006420:	2304      	movs	r3, #4
 8006422:	e04f      	b.n	80064c4 <HAL_I2C_Init+0x1dc>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d111      	bne.n	8006450 <HAL_I2C_Init+0x168>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	1e58      	subs	r0, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6859      	ldr	r1, [r3, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	440b      	add	r3, r1
 800643a:	fbb0 f3f3 	udiv	r3, r0, r3
 800643e:	3301      	adds	r3, #1
 8006440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006444:	2b00      	cmp	r3, #0
 8006446:	bf0c      	ite	eq
 8006448:	2301      	moveq	r3, #1
 800644a:	2300      	movne	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	e012      	b.n	8006476 <HAL_I2C_Init+0x18e>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	1e58      	subs	r0, r3, #1
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6859      	ldr	r1, [r3, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	0099      	lsls	r1, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	fbb0 f3f3 	udiv	r3, r0, r3
 8006466:	3301      	adds	r3, #1
 8006468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf0c      	ite	eq
 8006470:	2301      	moveq	r3, #1
 8006472:	2300      	movne	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <HAL_I2C_Init+0x196>
 800647a:	2301      	movs	r3, #1
 800647c:	e022      	b.n	80064c4 <HAL_I2C_Init+0x1dc>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10e      	bne.n	80064a4 <HAL_I2C_Init+0x1bc>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	1e58      	subs	r0, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6859      	ldr	r1, [r3, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	440b      	add	r3, r1
 8006494:	fbb0 f3f3 	udiv	r3, r0, r3
 8006498:	3301      	adds	r3, #1
 800649a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800649e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a2:	e00f      	b.n	80064c4 <HAL_I2C_Init+0x1dc>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	1e58      	subs	r0, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6859      	ldr	r1, [r3, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	440b      	add	r3, r1
 80064b2:	0099      	lsls	r1, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ba:	3301      	adds	r3, #1
 80064bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	6809      	ldr	r1, [r1, #0]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	69da      	ldr	r2, [r3, #28]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80064f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6911      	ldr	r1, [r2, #16]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68d2      	ldr	r2, [r2, #12]
 80064fe:	4311      	orrs	r1, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	430b      	orrs	r3, r1
 8006506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695a      	ldr	r2, [r3, #20]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	000186a0 	.word	0x000186a0
 8006560:	001e847f 	.word	0x001e847f
 8006564:	003d08ff 	.word	0x003d08ff
 8006568:	431bde83 	.word	0x431bde83
 800656c:	10624dd3 	.word	0x10624dd3

08006570 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e021      	b.n	80065c6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2224      	movs	r2, #36	; 0x24
 8006586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0201 	bic.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fe f942 	bl	8004824 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	461a      	mov	r2, r3
 80065dc:	460b      	mov	r3, r1
 80065de:	817b      	strh	r3, [r7, #10]
 80065e0:	4613      	mov	r3, r2
 80065e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065e4:	f7fe fba4 	bl	8004d30 <HAL_GetTick>
 80065e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	f040 80e0 	bne.w	80067b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	2319      	movs	r3, #25
 80065fe:	2201      	movs	r2, #1
 8006600:	4970      	ldr	r1, [pc, #448]	; (80067c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f964 	bl	80068d0 <I2C_WaitOnFlagUntilTimeout>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800660e:	2302      	movs	r3, #2
 8006610:	e0d3      	b.n	80067ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_I2C_Master_Transmit+0x50>
 800661c:	2302      	movs	r3, #2
 800661e:	e0cc      	b.n	80067ba <HAL_I2C_Master_Transmit+0x1ea>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	d007      	beq.n	8006646 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f042 0201 	orr.w	r2, r2, #1
 8006644:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006654:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2221      	movs	r2, #33	; 0x21
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2210      	movs	r2, #16
 8006662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	893a      	ldrh	r2, [r7, #8]
 8006676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4a50      	ldr	r2, [pc, #320]	; (80067c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006688:	8979      	ldrh	r1, [r7, #10]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f89c 	bl	80067cc <I2C_MasterRequestWrite>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e08d      	b.n	80067ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80066b4:	e066      	b.n	8006784 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	6a39      	ldr	r1, [r7, #32]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fa22 	bl	8006b04 <I2C_WaitOnTXEFlagUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00d      	beq.n	80066e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d107      	bne.n	80066de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e06b      	b.n	80067ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	781a      	ldrb	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	3b01      	subs	r3, #1
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b04      	cmp	r3, #4
 800671e:	d11b      	bne.n	8006758 <HAL_I2C_Master_Transmit+0x188>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006724:	2b00      	cmp	r3, #0
 8006726:	d017      	beq.n	8006758 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	781a      	ldrb	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	6a39      	ldr	r1, [r7, #32]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 fa19 	bl	8006b94 <I2C_WaitOnBTFFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00d      	beq.n	8006784 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	2b04      	cmp	r3, #4
 800676e:	d107      	bne.n	8006780 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e01a      	b.n	80067ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006788:	2b00      	cmp	r3, #0
 800678a:	d194      	bne.n	80066b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800679a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e000      	b.n	80067ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80067b8:	2302      	movs	r3, #2
  }
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	00100002 	.word	0x00100002
 80067c8:	ffff0000 	.word	0xffff0000

080067cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af02      	add	r7, sp, #8
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	607a      	str	r2, [r7, #4]
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	460b      	mov	r3, r1
 80067da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d006      	beq.n	80067f6 <I2C_MasterRequestWrite+0x2a>
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d003      	beq.n	80067f6 <I2C_MasterRequestWrite+0x2a>
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067f4:	d108      	bne.n	8006808 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e00b      	b.n	8006820 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	2b12      	cmp	r3, #18
 800680e:	d107      	bne.n	8006820 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800681e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 f84f 	bl	80068d0 <I2C_WaitOnFlagUntilTimeout>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00d      	beq.n	8006854 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006846:	d103      	bne.n	8006850 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800684e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e035      	b.n	80068c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800685c:	d108      	bne.n	8006870 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800685e:	897b      	ldrh	r3, [r7, #10]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	461a      	mov	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800686c:	611a      	str	r2, [r3, #16]
 800686e:	e01b      	b.n	80068a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006870:	897b      	ldrh	r3, [r7, #10]
 8006872:	11db      	asrs	r3, r3, #7
 8006874:	b2db      	uxtb	r3, r3
 8006876:	f003 0306 	and.w	r3, r3, #6
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f063 030f 	orn	r3, r3, #15
 8006880:	b2da      	uxtb	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	490e      	ldr	r1, [pc, #56]	; (80068c8 <I2C_MasterRequestWrite+0xfc>)
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f898 	bl	80069c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e010      	b.n	80068c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800689e:	897b      	ldrh	r3, [r7, #10]
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	4907      	ldr	r1, [pc, #28]	; (80068cc <I2C_MasterRequestWrite+0x100>)
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 f888 	bl	80069c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	00010008 	.word	0x00010008
 80068cc:	00010002 	.word	0x00010002

080068d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	4613      	mov	r3, r2
 80068de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068e0:	e048      	b.n	8006974 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e8:	d044      	beq.n	8006974 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ea:	f7fe fa21 	bl	8004d30 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d302      	bcc.n	8006900 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d139      	bne.n	8006974 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	0c1b      	lsrs	r3, r3, #16
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	d10d      	bne.n	8006926 <I2C_WaitOnFlagUntilTimeout+0x56>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	43da      	mvns	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	4013      	ands	r3, r2
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	bf0c      	ite	eq
 800691c:	2301      	moveq	r3, #1
 800691e:	2300      	movne	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	e00c      	b.n	8006940 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	43da      	mvns	r2, r3
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	4013      	ands	r3, r2
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	bf0c      	ite	eq
 8006938:	2301      	moveq	r3, #1
 800693a:	2300      	movne	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	429a      	cmp	r2, r3
 8006944:	d116      	bne.n	8006974 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	f043 0220 	orr.w	r2, r3, #32
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e023      	b.n	80069bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	0c1b      	lsrs	r3, r3, #16
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b01      	cmp	r3, #1
 800697c:	d10d      	bne.n	800699a <I2C_WaitOnFlagUntilTimeout+0xca>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	43da      	mvns	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	4013      	ands	r3, r2
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	bf0c      	ite	eq
 8006990:	2301      	moveq	r3, #1
 8006992:	2300      	movne	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	e00c      	b.n	80069b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	43da      	mvns	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	4013      	ands	r3, r2
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	bf0c      	ite	eq
 80069ac:	2301      	moveq	r3, #1
 80069ae:	2300      	movne	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d093      	beq.n	80068e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069d2:	e071      	b.n	8006ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e2:	d123      	bne.n	8006a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	f043 0204 	orr.w	r2, r3, #4
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e067      	b.n	8006afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a32:	d041      	beq.n	8006ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a34:	f7fe f97c 	bl	8004d30 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d302      	bcc.n	8006a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d136      	bne.n	8006ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	0c1b      	lsrs	r3, r3, #16
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d10c      	bne.n	8006a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	43da      	mvns	r2, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	bf14      	ite	ne
 8006a66:	2301      	movne	r3, #1
 8006a68:	2300      	moveq	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	e00b      	b.n	8006a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	43da      	mvns	r2, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	bf14      	ite	ne
 8006a80:	2301      	movne	r3, #1
 8006a82:	2300      	moveq	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d016      	beq.n	8006ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	f043 0220 	orr.w	r2, r3, #32
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e021      	b.n	8006afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	0c1b      	lsrs	r3, r3, #16
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d10c      	bne.n	8006adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	43da      	mvns	r2, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4013      	ands	r3, r2
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bf14      	ite	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	2300      	moveq	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	e00b      	b.n	8006af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	43da      	mvns	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	bf14      	ite	ne
 8006aee:	2301      	movne	r3, #1
 8006af0:	2300      	moveq	r3, #0
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f47f af6d 	bne.w	80069d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b10:	e034      	b.n	8006b7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f886 	bl	8006c24 <I2C_IsAcknowledgeFailed>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e034      	b.n	8006b8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b28:	d028      	beq.n	8006b7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2a:	f7fe f901 	bl	8004d30 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d302      	bcc.n	8006b40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11d      	bne.n	8006b7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4a:	2b80      	cmp	r3, #128	; 0x80
 8006b4c:	d016      	beq.n	8006b7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b68:	f043 0220 	orr.w	r2, r3, #32
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e007      	b.n	8006b8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b86:	2b80      	cmp	r3, #128	; 0x80
 8006b88:	d1c3      	bne.n	8006b12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ba0:	e034      	b.n	8006c0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 f83e 	bl	8006c24 <I2C_IsAcknowledgeFailed>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e034      	b.n	8006c1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d028      	beq.n	8006c0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bba:	f7fe f8b9 	bl	8004d30 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d302      	bcc.n	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d11d      	bne.n	8006c0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d016      	beq.n	8006c0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	f043 0220 	orr.w	r2, r3, #32
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e007      	b.n	8006c1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d1c3      	bne.n	8006ba2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c3a:	d11b      	bne.n	8006c74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	f043 0204 	orr.w	r2, r3, #4
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr

08006c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e272      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 8087 	beq.w	8006dae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ca0:	4b92      	ldr	r3, [pc, #584]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f003 030c 	and.w	r3, r3, #12
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d00c      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006cac:	4b8f      	ldr	r3, [pc, #572]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f003 030c 	and.w	r3, r3, #12
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d112      	bne.n	8006cde <HAL_RCC_OscConfig+0x5e>
 8006cb8:	4b8c      	ldr	r3, [pc, #560]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc4:	d10b      	bne.n	8006cde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cc6:	4b89      	ldr	r3, [pc, #548]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d06c      	beq.n	8006dac <HAL_RCC_OscConfig+0x12c>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d168      	bne.n	8006dac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e24c      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce6:	d106      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x76>
 8006ce8:	4b80      	ldr	r3, [pc, #512]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a7f      	ldr	r2, [pc, #508]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	e02e      	b.n	8006d54 <HAL_RCC_OscConfig+0xd4>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10c      	bne.n	8006d18 <HAL_RCC_OscConfig+0x98>
 8006cfe:	4b7b      	ldr	r3, [pc, #492]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a7a      	ldr	r2, [pc, #488]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	4b78      	ldr	r3, [pc, #480]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a77      	ldr	r2, [pc, #476]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	e01d      	b.n	8006d54 <HAL_RCC_OscConfig+0xd4>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d20:	d10c      	bne.n	8006d3c <HAL_RCC_OscConfig+0xbc>
 8006d22:	4b72      	ldr	r3, [pc, #456]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a71      	ldr	r2, [pc, #452]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	4b6f      	ldr	r3, [pc, #444]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a6e      	ldr	r2, [pc, #440]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	e00b      	b.n	8006d54 <HAL_RCC_OscConfig+0xd4>
 8006d3c:	4b6b      	ldr	r3, [pc, #428]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a6a      	ldr	r2, [pc, #424]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	4b68      	ldr	r3, [pc, #416]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a67      	ldr	r2, [pc, #412]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d013      	beq.n	8006d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5c:	f7fd ffe8 	bl	8004d30 <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d64:	f7fd ffe4 	bl	8004d30 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b64      	cmp	r3, #100	; 0x64
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e200      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d76:	4b5d      	ldr	r3, [pc, #372]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0f0      	beq.n	8006d64 <HAL_RCC_OscConfig+0xe4>
 8006d82:	e014      	b.n	8006dae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d84:	f7fd ffd4 	bl	8004d30 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d8c:	f7fd ffd0 	bl	8004d30 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b64      	cmp	r3, #100	; 0x64
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e1ec      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d9e:	4b53      	ldr	r3, [pc, #332]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1f0      	bne.n	8006d8c <HAL_RCC_OscConfig+0x10c>
 8006daa:	e000      	b.n	8006dae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d063      	beq.n	8006e82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006dba:	4b4c      	ldr	r3, [pc, #304]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f003 030c 	and.w	r3, r3, #12
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00b      	beq.n	8006dde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006dc6:	4b49      	ldr	r3, [pc, #292]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	2b08      	cmp	r3, #8
 8006dd0:	d11c      	bne.n	8006e0c <HAL_RCC_OscConfig+0x18c>
 8006dd2:	4b46      	ldr	r3, [pc, #280]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d116      	bne.n	8006e0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dde:	4b43      	ldr	r3, [pc, #268]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d005      	beq.n	8006df6 <HAL_RCC_OscConfig+0x176>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d001      	beq.n	8006df6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e1c0      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006df6:	4b3d      	ldr	r3, [pc, #244]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	4939      	ldr	r1, [pc, #228]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e0a:	e03a      	b.n	8006e82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d020      	beq.n	8006e56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e14:	4b36      	ldr	r3, [pc, #216]	; (8006ef0 <HAL_RCC_OscConfig+0x270>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e1a:	f7fd ff89 	bl	8004d30 <HAL_GetTick>
 8006e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e20:	e008      	b.n	8006e34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e22:	f7fd ff85 	bl	8004d30 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e1a1      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e34:	4b2d      	ldr	r3, [pc, #180]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0f0      	beq.n	8006e22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e40:	4b2a      	ldr	r3, [pc, #168]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	4927      	ldr	r1, [pc, #156]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	600b      	str	r3, [r1, #0]
 8006e54:	e015      	b.n	8006e82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e56:	4b26      	ldr	r3, [pc, #152]	; (8006ef0 <HAL_RCC_OscConfig+0x270>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e5c:	f7fd ff68 	bl	8004d30 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e64:	f7fd ff64 	bl	8004d30 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e180      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e76:	4b1d      	ldr	r3, [pc, #116]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f0      	bne.n	8006e64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0308 	and.w	r3, r3, #8
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d03a      	beq.n	8006f04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d019      	beq.n	8006eca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e96:	4b17      	ldr	r3, [pc, #92]	; (8006ef4 <HAL_RCC_OscConfig+0x274>)
 8006e98:	2201      	movs	r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e9c:	f7fd ff48 	bl	8004d30 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ea4:	f7fd ff44 	bl	8004d30 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e160      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <HAL_RCC_OscConfig+0x26c>)
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f0      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006ec2:	2001      	movs	r0, #1
 8006ec4:	f000 face 	bl	8007464 <RCC_Delay>
 8006ec8:	e01c      	b.n	8006f04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006eca:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <HAL_RCC_OscConfig+0x274>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ed0:	f7fd ff2e 	bl	8004d30 <HAL_GetTick>
 8006ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ed6:	e00f      	b.n	8006ef8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ed8:	f7fd ff2a 	bl	8004d30 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d908      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e146      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
 8006eea:	bf00      	nop
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	42420000 	.word	0x42420000
 8006ef4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ef8:	4b92      	ldr	r3, [pc, #584]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e9      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 80a6 	beq.w	800705e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f16:	4b8b      	ldr	r3, [pc, #556]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10d      	bne.n	8006f3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f22:	4b88      	ldr	r3, [pc, #544]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	4a87      	ldr	r2, [pc, #540]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f2c:	61d3      	str	r3, [r2, #28]
 8006f2e:	4b85      	ldr	r3, [pc, #532]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f36:	60bb      	str	r3, [r7, #8]
 8006f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f3e:	4b82      	ldr	r3, [pc, #520]	; (8007148 <HAL_RCC_OscConfig+0x4c8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d118      	bne.n	8006f7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f4a:	4b7f      	ldr	r3, [pc, #508]	; (8007148 <HAL_RCC_OscConfig+0x4c8>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a7e      	ldr	r2, [pc, #504]	; (8007148 <HAL_RCC_OscConfig+0x4c8>)
 8006f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f56:	f7fd feeb 	bl	8004d30 <HAL_GetTick>
 8006f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f5c:	e008      	b.n	8006f70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f5e:	f7fd fee7 	bl	8004d30 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b64      	cmp	r3, #100	; 0x64
 8006f6a:	d901      	bls.n	8006f70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e103      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f70:	4b75      	ldr	r3, [pc, #468]	; (8007148 <HAL_RCC_OscConfig+0x4c8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0f0      	beq.n	8006f5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d106      	bne.n	8006f92 <HAL_RCC_OscConfig+0x312>
 8006f84:	4b6f      	ldr	r3, [pc, #444]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	4a6e      	ldr	r2, [pc, #440]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006f8a:	f043 0301 	orr.w	r3, r3, #1
 8006f8e:	6213      	str	r3, [r2, #32]
 8006f90:	e02d      	b.n	8006fee <HAL_RCC_OscConfig+0x36e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10c      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x334>
 8006f9a:	4b6a      	ldr	r3, [pc, #424]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	4a69      	ldr	r2, [pc, #420]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006fa0:	f023 0301 	bic.w	r3, r3, #1
 8006fa4:	6213      	str	r3, [r2, #32]
 8006fa6:	4b67      	ldr	r3, [pc, #412]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	4a66      	ldr	r2, [pc, #408]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006fac:	f023 0304 	bic.w	r3, r3, #4
 8006fb0:	6213      	str	r3, [r2, #32]
 8006fb2:	e01c      	b.n	8006fee <HAL_RCC_OscConfig+0x36e>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b05      	cmp	r3, #5
 8006fba:	d10c      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x356>
 8006fbc:	4b61      	ldr	r3, [pc, #388]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	4a60      	ldr	r2, [pc, #384]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006fc2:	f043 0304 	orr.w	r3, r3, #4
 8006fc6:	6213      	str	r3, [r2, #32]
 8006fc8:	4b5e      	ldr	r3, [pc, #376]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	4a5d      	ldr	r2, [pc, #372]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006fce:	f043 0301 	orr.w	r3, r3, #1
 8006fd2:	6213      	str	r3, [r2, #32]
 8006fd4:	e00b      	b.n	8006fee <HAL_RCC_OscConfig+0x36e>
 8006fd6:	4b5b      	ldr	r3, [pc, #364]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	4a5a      	ldr	r2, [pc, #360]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	6213      	str	r3, [r2, #32]
 8006fe2:	4b58      	ldr	r3, [pc, #352]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	4a57      	ldr	r2, [pc, #348]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8006fe8:	f023 0304 	bic.w	r3, r3, #4
 8006fec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d015      	beq.n	8007022 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff6:	f7fd fe9b 	bl	8004d30 <HAL_GetTick>
 8006ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ffc:	e00a      	b.n	8007014 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ffe:	f7fd fe97 	bl	8004d30 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	f241 3288 	movw	r2, #5000	; 0x1388
 800700c:	4293      	cmp	r3, r2
 800700e:	d901      	bls.n	8007014 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e0b1      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007014:	4b4b      	ldr	r3, [pc, #300]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0ee      	beq.n	8006ffe <HAL_RCC_OscConfig+0x37e>
 8007020:	e014      	b.n	800704c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007022:	f7fd fe85 	bl	8004d30 <HAL_GetTick>
 8007026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007028:	e00a      	b.n	8007040 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800702a:	f7fd fe81 	bl	8004d30 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	f241 3288 	movw	r2, #5000	; 0x1388
 8007038:	4293      	cmp	r3, r2
 800703a:	d901      	bls.n	8007040 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e09b      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007040:	4b40      	ldr	r3, [pc, #256]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1ee      	bne.n	800702a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d105      	bne.n	800705e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007052:	4b3c      	ldr	r3, [pc, #240]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	4a3b      	ldr	r2, [pc, #236]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 8007058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800705c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 8087 	beq.w	8007176 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007068:	4b36      	ldr	r3, [pc, #216]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f003 030c 	and.w	r3, r3, #12
 8007070:	2b08      	cmp	r3, #8
 8007072:	d061      	beq.n	8007138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d146      	bne.n	800710a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800707c:	4b33      	ldr	r3, [pc, #204]	; (800714c <HAL_RCC_OscConfig+0x4cc>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007082:	f7fd fe55 	bl	8004d30 <HAL_GetTick>
 8007086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007088:	e008      	b.n	800709c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800708a:	f7fd fe51 	bl	8004d30 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e06d      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800709c:	4b29      	ldr	r3, [pc, #164]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1f0      	bne.n	800708a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b0:	d108      	bne.n	80070c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80070b2:	4b24      	ldr	r3, [pc, #144]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	4921      	ldr	r1, [pc, #132]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070c4:	4b1f      	ldr	r3, [pc, #124]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a19      	ldr	r1, [r3, #32]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	430b      	orrs	r3, r1
 80070d6:	491b      	ldr	r1, [pc, #108]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070dc:	4b1b      	ldr	r3, [pc, #108]	; (800714c <HAL_RCC_OscConfig+0x4cc>)
 80070de:	2201      	movs	r2, #1
 80070e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e2:	f7fd fe25 	bl	8004d30 <HAL_GetTick>
 80070e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070e8:	e008      	b.n	80070fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ea:	f7fd fe21 	bl	8004d30 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e03d      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070fc:	4b11      	ldr	r3, [pc, #68]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0f0      	beq.n	80070ea <HAL_RCC_OscConfig+0x46a>
 8007108:	e035      	b.n	8007176 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800710a:	4b10      	ldr	r3, [pc, #64]	; (800714c <HAL_RCC_OscConfig+0x4cc>)
 800710c:	2200      	movs	r2, #0
 800710e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007110:	f7fd fe0e 	bl	8004d30 <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007118:	f7fd fe0a 	bl	8004d30 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e026      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800712a:	4b06      	ldr	r3, [pc, #24]	; (8007144 <HAL_RCC_OscConfig+0x4c4>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f0      	bne.n	8007118 <HAL_RCC_OscConfig+0x498>
 8007136:	e01e      	b.n	8007176 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d107      	bne.n	8007150 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e019      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
 8007144:	40021000 	.word	0x40021000
 8007148:	40007000 	.word	0x40007000
 800714c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <HAL_RCC_OscConfig+0x500>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	429a      	cmp	r2, r3
 8007162:	d106      	bne.n	8007172 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800716e:	429a      	cmp	r2, r3
 8007170:	d001      	beq.n	8007176 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3718      	adds	r7, #24
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40021000 	.word	0x40021000

08007184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e0d0      	b.n	800733a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007198:	4b6a      	ldr	r3, [pc, #424]	; (8007344 <HAL_RCC_ClockConfig+0x1c0>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0307 	and.w	r3, r3, #7
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d910      	bls.n	80071c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071a6:	4b67      	ldr	r3, [pc, #412]	; (8007344 <HAL_RCC_ClockConfig+0x1c0>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f023 0207 	bic.w	r2, r3, #7
 80071ae:	4965      	ldr	r1, [pc, #404]	; (8007344 <HAL_RCC_ClockConfig+0x1c0>)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071b6:	4b63      	ldr	r3, [pc, #396]	; (8007344 <HAL_RCC_ClockConfig+0x1c0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d001      	beq.n	80071c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e0b8      	b.n	800733a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d020      	beq.n	8007216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071e0:	4b59      	ldr	r3, [pc, #356]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	4a58      	ldr	r2, [pc, #352]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 80071e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80071ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0308 	and.w	r3, r3, #8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071f8:	4b53      	ldr	r3, [pc, #332]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	4a52      	ldr	r2, [pc, #328]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 80071fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007204:	4b50      	ldr	r3, [pc, #320]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	494d      	ldr	r1, [pc, #308]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 8007212:	4313      	orrs	r3, r2
 8007214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d040      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d107      	bne.n	800723a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800722a:	4b47      	ldr	r3, [pc, #284]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d115      	bne.n	8007262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e07f      	b.n	800733a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d107      	bne.n	8007252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007242:	4b41      	ldr	r3, [pc, #260]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e073      	b.n	800733a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007252:	4b3d      	ldr	r3, [pc, #244]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e06b      	b.n	800733a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007262:	4b39      	ldr	r3, [pc, #228]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f023 0203 	bic.w	r2, r3, #3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	4936      	ldr	r1, [pc, #216]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 8007270:	4313      	orrs	r3, r2
 8007272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007274:	f7fd fd5c 	bl	8004d30 <HAL_GetTick>
 8007278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800727a:	e00a      	b.n	8007292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800727c:	f7fd fd58 	bl	8004d30 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	f241 3288 	movw	r2, #5000	; 0x1388
 800728a:	4293      	cmp	r3, r2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e053      	b.n	800733a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007292:	4b2d      	ldr	r3, [pc, #180]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f003 020c 	and.w	r2, r3, #12
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d1eb      	bne.n	800727c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072a4:	4b27      	ldr	r3, [pc, #156]	; (8007344 <HAL_RCC_ClockConfig+0x1c0>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0307 	and.w	r3, r3, #7
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d210      	bcs.n	80072d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072b2:	4b24      	ldr	r3, [pc, #144]	; (8007344 <HAL_RCC_ClockConfig+0x1c0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f023 0207 	bic.w	r2, r3, #7
 80072ba:	4922      	ldr	r1, [pc, #136]	; (8007344 <HAL_RCC_ClockConfig+0x1c0>)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	4313      	orrs	r3, r2
 80072c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072c2:	4b20      	ldr	r3, [pc, #128]	; (8007344 <HAL_RCC_ClockConfig+0x1c0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0307 	and.w	r3, r3, #7
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d001      	beq.n	80072d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e032      	b.n	800733a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072e0:	4b19      	ldr	r3, [pc, #100]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	4916      	ldr	r1, [pc, #88]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0308 	and.w	r3, r3, #8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072fe:	4b12      	ldr	r3, [pc, #72]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	490e      	ldr	r1, [pc, #56]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 800730e:	4313      	orrs	r3, r2
 8007310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007312:	f000 f821 	bl	8007358 <HAL_RCC_GetSysClockFreq>
 8007316:	4602      	mov	r2, r0
 8007318:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <HAL_RCC_ClockConfig+0x1c4>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	091b      	lsrs	r3, r3, #4
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	490a      	ldr	r1, [pc, #40]	; (800734c <HAL_RCC_ClockConfig+0x1c8>)
 8007324:	5ccb      	ldrb	r3, [r1, r3]
 8007326:	fa22 f303 	lsr.w	r3, r2, r3
 800732a:	4a09      	ldr	r2, [pc, #36]	; (8007350 <HAL_RCC_ClockConfig+0x1cc>)
 800732c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800732e:	4b09      	ldr	r3, [pc, #36]	; (8007354 <HAL_RCC_ClockConfig+0x1d0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f7fd fcba 	bl	8004cac <HAL_InitTick>

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	40022000 	.word	0x40022000
 8007348:	40021000 	.word	0x40021000
 800734c:	0800a818 	.word	0x0800a818
 8007350:	20000248 	.word	0x20000248
 8007354:	2000024c 	.word	0x2000024c

08007358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	2300      	movs	r3, #0
 8007364:	60bb      	str	r3, [r7, #8]
 8007366:	2300      	movs	r3, #0
 8007368:	617b      	str	r3, [r7, #20]
 800736a:	2300      	movs	r3, #0
 800736c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007372:	4b1e      	ldr	r3, [pc, #120]	; (80073ec <HAL_RCC_GetSysClockFreq+0x94>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f003 030c 	and.w	r3, r3, #12
 800737e:	2b04      	cmp	r3, #4
 8007380:	d002      	beq.n	8007388 <HAL_RCC_GetSysClockFreq+0x30>
 8007382:	2b08      	cmp	r3, #8
 8007384:	d003      	beq.n	800738e <HAL_RCC_GetSysClockFreq+0x36>
 8007386:	e027      	b.n	80073d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007388:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800738a:	613b      	str	r3, [r7, #16]
      break;
 800738c:	e027      	b.n	80073de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	0c9b      	lsrs	r3, r3, #18
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	4a17      	ldr	r2, [pc, #92]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007398:	5cd3      	ldrb	r3, [r2, r3]
 800739a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d010      	beq.n	80073c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80073a6:	4b11      	ldr	r3, [pc, #68]	; (80073ec <HAL_RCC_GetSysClockFreq+0x94>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	0c5b      	lsrs	r3, r3, #17
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	4a11      	ldr	r2, [pc, #68]	; (80073f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80073b2:	5cd3      	ldrb	r3, [r2, r3]
 80073b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a0d      	ldr	r2, [pc, #52]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80073ba:	fb03 f202 	mul.w	r2, r3, r2
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	e004      	b.n	80073d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a0c      	ldr	r2, [pc, #48]	; (80073fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80073cc:	fb02 f303 	mul.w	r3, r2, r3
 80073d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	613b      	str	r3, [r7, #16]
      break;
 80073d6:	e002      	b.n	80073de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80073da:	613b      	str	r3, [r7, #16]
      break;
 80073dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073de:	693b      	ldr	r3, [r7, #16]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	371c      	adds	r7, #28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40021000 	.word	0x40021000
 80073f0:	007a1200 	.word	0x007a1200
 80073f4:	0800a830 	.word	0x0800a830
 80073f8:	0800a840 	.word	0x0800a840
 80073fc:	003d0900 	.word	0x003d0900

08007400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007404:	4b02      	ldr	r3, [pc, #8]	; (8007410 <HAL_RCC_GetHCLKFreq+0x10>)
 8007406:	681b      	ldr	r3, [r3, #0]
}
 8007408:	4618      	mov	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	bc80      	pop	{r7}
 800740e:	4770      	bx	lr
 8007410:	20000248 	.word	0x20000248

08007414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007418:	f7ff fff2 	bl	8007400 <HAL_RCC_GetHCLKFreq>
 800741c:	4602      	mov	r2, r0
 800741e:	4b05      	ldr	r3, [pc, #20]	; (8007434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	0a1b      	lsrs	r3, r3, #8
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	4903      	ldr	r1, [pc, #12]	; (8007438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800742a:	5ccb      	ldrb	r3, [r1, r3]
 800742c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007430:	4618      	mov	r0, r3
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40021000 	.word	0x40021000
 8007438:	0800a828 	.word	0x0800a828

0800743c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007440:	f7ff ffde 	bl	8007400 <HAL_RCC_GetHCLKFreq>
 8007444:	4602      	mov	r2, r0
 8007446:	4b05      	ldr	r3, [pc, #20]	; (800745c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	0adb      	lsrs	r3, r3, #11
 800744c:	f003 0307 	and.w	r3, r3, #7
 8007450:	4903      	ldr	r1, [pc, #12]	; (8007460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007452:	5ccb      	ldrb	r3, [r1, r3]
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007458:	4618      	mov	r0, r3
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40021000 	.word	0x40021000
 8007460:	0800a828 	.word	0x0800a828

08007464 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <RCC_Delay+0x34>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a0a      	ldr	r2, [pc, #40]	; (800749c <RCC_Delay+0x38>)
 8007472:	fba2 2303 	umull	r2, r3, r2, r3
 8007476:	0a5b      	lsrs	r3, r3, #9
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	fb02 f303 	mul.w	r3, r2, r3
 800747e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007480:	bf00      	nop
  }
  while (Delay --);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	1e5a      	subs	r2, r3, #1
 8007486:	60fa      	str	r2, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f9      	bne.n	8007480 <RCC_Delay+0x1c>
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	bc80      	pop	{r7}
 8007496:	4770      	bx	lr
 8007498:	20000248 	.word	0x20000248
 800749c:	10624dd3 	.word	0x10624dd3

080074a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	613b      	str	r3, [r7, #16]
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d07d      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80074bc:	2300      	movs	r3, #0
 80074be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074c0:	4b4f      	ldr	r3, [pc, #316]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10d      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074cc:	4b4c      	ldr	r3, [pc, #304]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	4a4b      	ldr	r2, [pc, #300]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074d6:	61d3      	str	r3, [r2, #28]
 80074d8:	4b49      	ldr	r3, [pc, #292]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074e0:	60bb      	str	r3, [r7, #8]
 80074e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074e4:	2301      	movs	r3, #1
 80074e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e8:	4b46      	ldr	r3, [pc, #280]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d118      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074f4:	4b43      	ldr	r3, [pc, #268]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a42      	ldr	r2, [pc, #264]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007500:	f7fd fc16 	bl	8004d30 <HAL_GetTick>
 8007504:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007506:	e008      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007508:	f7fd fc12 	bl	8004d30 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b64      	cmp	r3, #100	; 0x64
 8007514:	d901      	bls.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e06d      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800751a:	4b3a      	ldr	r3, [pc, #232]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007522:	2b00      	cmp	r3, #0
 8007524:	d0f0      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007526:	4b36      	ldr	r3, [pc, #216]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800752e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d02e      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	429a      	cmp	r2, r3
 8007542:	d027      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007544:	4b2e      	ldr	r3, [pc, #184]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800754c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800754e:	4b2e      	ldr	r3, [pc, #184]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007550:	2201      	movs	r2, #1
 8007552:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007554:	4b2c      	ldr	r3, [pc, #176]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007556:	2200      	movs	r2, #0
 8007558:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800755a:	4a29      	ldr	r2, [pc, #164]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d014      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800756a:	f7fd fbe1 	bl	8004d30 <HAL_GetTick>
 800756e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007570:	e00a      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007572:	f7fd fbdd 	bl	8004d30 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007580:	4293      	cmp	r3, r2
 8007582:	d901      	bls.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e036      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007588:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0ee      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007594:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	4917      	ldr	r1, [pc, #92]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d105      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ac:	4b14      	ldr	r3, [pc, #80]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	4a13      	ldr	r2, [pc, #76]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d008      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075c4:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	490b      	ldr	r1, [pc, #44]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0310 	and.w	r3, r3, #16
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d008      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075e2:	4b07      	ldr	r3, [pc, #28]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	4904      	ldr	r1, [pc, #16]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40021000 	.word	0x40021000
 8007604:	40007000 	.word	0x40007000
 8007608:	42420440 	.word	0x42420440

0800760c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e041      	b.n	80076a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fd f918 	bl	8004868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3304      	adds	r3, #4
 8007648:	4619      	mov	r1, r3
 800764a:	4610      	mov	r0, r2
 800764c:	f000 faa2 	bl	8007b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d001      	beq.n	80076c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e03a      	b.n	800773a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0201 	orr.w	r2, r2, #1
 80076da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a18      	ldr	r2, [pc, #96]	; (8007744 <HAL_TIM_Base_Start_IT+0x98>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00e      	beq.n	8007704 <HAL_TIM_Base_Start_IT+0x58>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ee:	d009      	beq.n	8007704 <HAL_TIM_Base_Start_IT+0x58>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a14      	ldr	r2, [pc, #80]	; (8007748 <HAL_TIM_Base_Start_IT+0x9c>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d004      	beq.n	8007704 <HAL_TIM_Base_Start_IT+0x58>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a13      	ldr	r2, [pc, #76]	; (800774c <HAL_TIM_Base_Start_IT+0xa0>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d111      	bne.n	8007728 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b06      	cmp	r3, #6
 8007714:	d010      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f042 0201 	orr.w	r2, r2, #1
 8007724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007726:	e007      	b.n	8007738 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	bc80      	pop	{r7}
 8007742:	4770      	bx	lr
 8007744:	40012c00 	.word	0x40012c00
 8007748:	40000400 	.word	0x40000400
 800774c:	40000800 	.word	0x40000800

08007750 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0201 	bic.w	r2, r2, #1
 8007766:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6a1a      	ldr	r2, [r3, #32]
 800776e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007772:	4013      	ands	r3, r2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10f      	bne.n	8007798 <HAL_TIM_Base_Stop_IT+0x48>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6a1a      	ldr	r2, [r3, #32]
 800777e:	f240 4344 	movw	r3, #1092	; 0x444
 8007782:	4013      	ands	r3, r2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d107      	bne.n	8007798 <HAL_TIM_Base_Stop_IT+0x48>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0201 	bic.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr

080077ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d122      	bne.n	8007808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d11b      	bne.n	8007808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f06f 0202 	mvn.w	r2, #2
 80077d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f9b4 	bl	8007b5c <HAL_TIM_IC_CaptureCallback>
 80077f4:	e005      	b.n	8007802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9a7 	bl	8007b4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f9b6 	bl	8007b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	2b04      	cmp	r3, #4
 8007814:	d122      	bne.n	800785c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b04      	cmp	r3, #4
 8007822:	d11b      	bne.n	800785c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f06f 0204 	mvn.w	r2, #4
 800782c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2202      	movs	r2, #2
 8007832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f98a 	bl	8007b5c <HAL_TIM_IC_CaptureCallback>
 8007848:	e005      	b.n	8007856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f97d 	bl	8007b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f98c 	bl	8007b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0308 	and.w	r3, r3, #8
 8007866:	2b08      	cmp	r3, #8
 8007868:	d122      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b08      	cmp	r3, #8
 8007876:	d11b      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f06f 0208 	mvn.w	r2, #8
 8007880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2204      	movs	r2, #4
 8007886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f003 0303 	and.w	r3, r3, #3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f960 	bl	8007b5c <HAL_TIM_IC_CaptureCallback>
 800789c:	e005      	b.n	80078aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f953 	bl	8007b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f962 	bl	8007b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	f003 0310 	and.w	r3, r3, #16
 80078ba:	2b10      	cmp	r3, #16
 80078bc:	d122      	bne.n	8007904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f003 0310 	and.w	r3, r3, #16
 80078c8:	2b10      	cmp	r3, #16
 80078ca:	d11b      	bne.n	8007904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f06f 0210 	mvn.w	r2, #16
 80078d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2208      	movs	r2, #8
 80078da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f936 	bl	8007b5c <HAL_TIM_IC_CaptureCallback>
 80078f0:	e005      	b.n	80078fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f929 	bl	8007b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f938 	bl	8007b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b01      	cmp	r3, #1
 8007910:	d10e      	bne.n	8007930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b01      	cmp	r3, #1
 800791e:	d107      	bne.n	8007930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f06f 0201 	mvn.w	r2, #1
 8007928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fa fcaa 	bl	8002284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793a:	2b80      	cmp	r3, #128	; 0x80
 800793c:	d10e      	bne.n	800795c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007948:	2b80      	cmp	r3, #128	; 0x80
 800794a:	d107      	bne.n	800795c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fa7b 	bl	8007e52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d10e      	bne.n	8007988 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007974:	2b40      	cmp	r3, #64	; 0x40
 8007976:	d107      	bne.n	8007988 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8fc 	bl	8007b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b20      	cmp	r3, #32
 8007994:	d10e      	bne.n	80079b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b20      	cmp	r3, #32
 80079a2:	d107      	bne.n	80079b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f06f 0220 	mvn.w	r2, #32
 80079ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa46 	bl	8007e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_TIM_ConfigClockSource+0x1c>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e0b4      	b.n	8007b42 <HAL_TIM_ConfigClockSource+0x186>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a10:	d03e      	beq.n	8007a90 <HAL_TIM_ConfigClockSource+0xd4>
 8007a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a16:	f200 8087 	bhi.w	8007b28 <HAL_TIM_ConfigClockSource+0x16c>
 8007a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a1e:	f000 8086 	beq.w	8007b2e <HAL_TIM_ConfigClockSource+0x172>
 8007a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a26:	d87f      	bhi.n	8007b28 <HAL_TIM_ConfigClockSource+0x16c>
 8007a28:	2b70      	cmp	r3, #112	; 0x70
 8007a2a:	d01a      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0xa6>
 8007a2c:	2b70      	cmp	r3, #112	; 0x70
 8007a2e:	d87b      	bhi.n	8007b28 <HAL_TIM_ConfigClockSource+0x16c>
 8007a30:	2b60      	cmp	r3, #96	; 0x60
 8007a32:	d050      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x11a>
 8007a34:	2b60      	cmp	r3, #96	; 0x60
 8007a36:	d877      	bhi.n	8007b28 <HAL_TIM_ConfigClockSource+0x16c>
 8007a38:	2b50      	cmp	r3, #80	; 0x50
 8007a3a:	d03c      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0xfa>
 8007a3c:	2b50      	cmp	r3, #80	; 0x50
 8007a3e:	d873      	bhi.n	8007b28 <HAL_TIM_ConfigClockSource+0x16c>
 8007a40:	2b40      	cmp	r3, #64	; 0x40
 8007a42:	d058      	beq.n	8007af6 <HAL_TIM_ConfigClockSource+0x13a>
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d86f      	bhi.n	8007b28 <HAL_TIM_ConfigClockSource+0x16c>
 8007a48:	2b30      	cmp	r3, #48	; 0x30
 8007a4a:	d064      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0x15a>
 8007a4c:	2b30      	cmp	r3, #48	; 0x30
 8007a4e:	d86b      	bhi.n	8007b28 <HAL_TIM_ConfigClockSource+0x16c>
 8007a50:	2b20      	cmp	r3, #32
 8007a52:	d060      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0x15a>
 8007a54:	2b20      	cmp	r3, #32
 8007a56:	d867      	bhi.n	8007b28 <HAL_TIM_ConfigClockSource+0x16c>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d05c      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0x15a>
 8007a5c:	2b10      	cmp	r3, #16
 8007a5e:	d05a      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0x15a>
 8007a60:	e062      	b.n	8007b28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a72:	f000 f968 	bl	8007d46 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	609a      	str	r2, [r3, #8]
      break;
 8007a8e:	e04f      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007aa0:	f000 f951 	bl	8007d46 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689a      	ldr	r2, [r3, #8]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ab2:	609a      	str	r2, [r3, #8]
      break;
 8007ab4:	e03c      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f000 f8c8 	bl	8007c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2150      	movs	r1, #80	; 0x50
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 f91f 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 8007ad4:	e02c      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f000 f8e6 	bl	8007cb4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2160      	movs	r1, #96	; 0x60
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 f90f 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 8007af4:	e01c      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b02:	461a      	mov	r2, r3
 8007b04:	f000 f8a8 	bl	8007c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2140      	movs	r1, #64	; 0x40
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 f8ff 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 8007b14:	e00c      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f000 f8f6 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 8007b26:	e003      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b2c:	e000      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bc80      	pop	{r7}
 8007b5a:	4770      	bx	lr

08007b5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bc80      	pop	{r7}
 8007b6c:	4770      	bx	lr

08007b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b083      	sub	sp, #12
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr

08007b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bc80      	pop	{r7}
 8007b90:	4770      	bx	lr
	...

08007b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a29      	ldr	r2, [pc, #164]	; (8007c4c <TIM_Base_SetConfig+0xb8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00b      	beq.n	8007bc4 <TIM_Base_SetConfig+0x30>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb2:	d007      	beq.n	8007bc4 <TIM_Base_SetConfig+0x30>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a26      	ldr	r2, [pc, #152]	; (8007c50 <TIM_Base_SetConfig+0xbc>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d003      	beq.n	8007bc4 <TIM_Base_SetConfig+0x30>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a25      	ldr	r2, [pc, #148]	; (8007c54 <TIM_Base_SetConfig+0xc0>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d108      	bne.n	8007bd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a1c      	ldr	r2, [pc, #112]	; (8007c4c <TIM_Base_SetConfig+0xb8>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00b      	beq.n	8007bf6 <TIM_Base_SetConfig+0x62>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be4:	d007      	beq.n	8007bf6 <TIM_Base_SetConfig+0x62>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a19      	ldr	r2, [pc, #100]	; (8007c50 <TIM_Base_SetConfig+0xbc>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d003      	beq.n	8007bf6 <TIM_Base_SetConfig+0x62>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a18      	ldr	r2, [pc, #96]	; (8007c54 <TIM_Base_SetConfig+0xc0>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d108      	bne.n	8007c08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a07      	ldr	r2, [pc, #28]	; (8007c4c <TIM_Base_SetConfig+0xb8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d103      	bne.n	8007c3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	615a      	str	r2, [r3, #20]
}
 8007c42:	bf00      	nop
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bc80      	pop	{r7}
 8007c4a:	4770      	bx	lr
 8007c4c:	40012c00 	.word	0x40012c00
 8007c50:	40000400 	.word	0x40000400
 8007c54:	40000800 	.word	0x40000800

08007c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	f023 0201 	bic.w	r2, r3, #1
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f023 030a 	bic.w	r3, r3, #10
 8007c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	621a      	str	r2, [r3, #32]
}
 8007caa:	bf00      	nop
 8007cac:	371c      	adds	r7, #28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr

08007cb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	f023 0210 	bic.w	r2, r3, #16
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	031b      	lsls	r3, r3, #12
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	621a      	str	r2, [r3, #32]
}
 8007d08:	bf00      	nop
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr

08007d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b085      	sub	sp, #20
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f043 0307 	orr.w	r3, r3, #7
 8007d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	609a      	str	r2, [r3, #8]
}
 8007d3c:	bf00      	nop
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bc80      	pop	{r7}
 8007d44:	4770      	bx	lr

08007d46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b087      	sub	sp, #28
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	021a      	lsls	r2, r3, #8
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	609a      	str	r2, [r3, #8]
}
 8007d7a:	bf00      	nop
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc80      	pop	{r7}
 8007d82:	4770      	bx	lr

08007d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e046      	b.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a16      	ldr	r2, [pc, #88]	; (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d00e      	beq.n	8007dfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de8:	d009      	beq.n	8007dfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a12      	ldr	r2, [pc, #72]	; (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d004      	beq.n	8007dfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a10      	ldr	r2, [pc, #64]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d10c      	bne.n	8007e18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bc80      	pop	{r7}
 8007e32:	4770      	bx	lr
 8007e34:	40012c00 	.word	0x40012c00
 8007e38:	40000400 	.word	0x40000400
 8007e3c:	40000800 	.word	0x40000800

08007e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bc80      	pop	{r7}
 8007e50:	4770      	bx	lr

08007e52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e5a:	bf00      	nop
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bc80      	pop	{r7}
 8007e62:	4770      	bx	lr

08007e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e042      	b.n	8007efc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fc fd6c 	bl	8004968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2224      	movs	r2, #36	; 0x24
 8007e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 ffdd 	bl	8008e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	695a      	ldr	r2, [r3, #20]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08a      	sub	sp, #40	; 0x28
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	4613      	mov	r3, r2
 8007f12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	d16d      	bne.n	8008000 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <HAL_UART_Transmit+0x2c>
 8007f2a:	88fb      	ldrh	r3, [r7, #6]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e066      	b.n	8008002 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2221      	movs	r2, #33	; 0x21
 8007f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f42:	f7fc fef5 	bl	8004d30 <HAL_GetTick>
 8007f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	88fa      	ldrh	r2, [r7, #6]
 8007f4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	88fa      	ldrh	r2, [r7, #6]
 8007f52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5c:	d108      	bne.n	8007f70 <HAL_UART_Transmit+0x6c>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d104      	bne.n	8007f70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	61bb      	str	r3, [r7, #24]
 8007f6e:	e003      	b.n	8007f78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f78:	e02a      	b.n	8007fd0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2200      	movs	r2, #0
 8007f82:	2180      	movs	r1, #128	; 0x80
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 fca4 	bl	80088d2 <UART_WaitOnFlagUntilTimeout>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e036      	b.n	8008002 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	3302      	adds	r3, #2
 8007fae:	61bb      	str	r3, [r7, #24]
 8007fb0:	e007      	b.n	8007fc2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	781a      	ldrb	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1cf      	bne.n	8007f7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2140      	movs	r1, #64	; 0x40
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 fc74 	bl	80088d2 <UART_WaitOnFlagUntilTimeout>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e006      	b.n	8008002 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e000      	b.n	8008002 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008000:	2302      	movs	r3, #2
  }
}
 8008002:	4618      	mov	r0, r3
 8008004:	3720      	adds	r7, #32
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	4613      	mov	r3, r2
 8008016:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b20      	cmp	r3, #32
 8008022:	d112      	bne.n	800804a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <HAL_UART_Receive_DMA+0x26>
 800802a:	88fb      	ldrh	r3, [r7, #6]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e00b      	b.n	800804c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	461a      	mov	r2, r3
 800803e:	68b9      	ldr	r1, [r7, #8]
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 fcb5 	bl	80089b0 <UART_Start_Receive_DMA>
 8008046:	4603      	mov	r3, r0
 8008048:	e000      	b.n	800804c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800804a:	2302      	movs	r3, #2
  }
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b090      	sub	sp, #64	; 0x40
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800805c:	2300      	movs	r3, #0
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806a:	2b00      	cmp	r3, #0
 800806c:	bf14      	ite	ne
 800806e:	2301      	movne	r3, #1
 8008070:	2300      	moveq	r3, #0
 8008072:	b2db      	uxtb	r3, r3
 8008074:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b21      	cmp	r3, #33	; 0x21
 8008080:	d128      	bne.n	80080d4 <HAL_UART_DMAStop+0x80>
 8008082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d025      	beq.n	80080d4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3314      	adds	r3, #20
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	623b      	str	r3, [r7, #32]
   return(result);
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800809e:	63bb      	str	r3, [r7, #56]	; 0x38
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3314      	adds	r3, #20
 80080a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080a8:	633a      	str	r2, [r7, #48]	; 0x30
 80080aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e5      	bne.n	8008088 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d004      	beq.n	80080ce <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fd fc85 	bl	80059d8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fd08 	bl	8008ae4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	bf14      	ite	ne
 80080e2:	2301      	movne	r3, #1
 80080e4:	2300      	moveq	r3, #0
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b22      	cmp	r3, #34	; 0x22
 80080f4:	d128      	bne.n	8008148 <HAL_UART_DMAStop+0xf4>
 80080f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d025      	beq.n	8008148 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3314      	adds	r3, #20
 8008102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	60fb      	str	r3, [r7, #12]
   return(result);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008112:	637b      	str	r3, [r7, #52]	; 0x34
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3314      	adds	r3, #20
 800811a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800811c:	61fa      	str	r2, [r7, #28]
 800811e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	69b9      	ldr	r1, [r7, #24]
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	e841 2300 	strex	r3, r2, [r1]
 8008128:	617b      	str	r3, [r7, #20]
   return(result);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e5      	bne.n	80080fc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008134:	2b00      	cmp	r3, #0
 8008136:	d004      	beq.n	8008142 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813c:	4618      	mov	r0, r3
 800813e:	f7fd fc4b 	bl	80059d8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fcf5 	bl	8008b32 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3740      	adds	r7, #64	; 0x40
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b0ba      	sub	sp, #232	; 0xe8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800817a:	2300      	movs	r3, #0
 800817c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008180:	2300      	movs	r3, #0
 8008182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10f      	bne.n	80081ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800819a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d009      	beq.n	80081ba <HAL_UART_IRQHandler+0x66>
 80081a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fd9a 	bl	8008cec <UART_Receive_IT>
      return;
 80081b8:	e25b      	b.n	8008672 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 80de 	beq.w	8008380 <HAL_UART_IRQHandler+0x22c>
 80081c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d106      	bne.n	80081de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 80d1 	beq.w	8008380 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <HAL_UART_IRQHandler+0xae>
 80081ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fa:	f043 0201 	orr.w	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00b      	beq.n	8008226 <HAL_UART_IRQHandler+0xd2>
 800820e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d005      	beq.n	8008226 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821e:	f043 0202 	orr.w	r2, r3, #2
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00b      	beq.n	800824a <HAL_UART_IRQHandler+0xf6>
 8008232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008242:	f043 0204 	orr.w	r2, r3, #4
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800824a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824e:	f003 0308 	and.w	r3, r3, #8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d011      	beq.n	800827a <HAL_UART_IRQHandler+0x126>
 8008256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b00      	cmp	r3, #0
 8008260:	d105      	bne.n	800826e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008272:	f043 0208 	orr.w	r2, r3, #8
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827e:	2b00      	cmp	r3, #0
 8008280:	f000 81f2 	beq.w	8008668 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008288:	f003 0320 	and.w	r3, r3, #32
 800828c:	2b00      	cmp	r3, #0
 800828e:	d008      	beq.n	80082a2 <HAL_UART_IRQHandler+0x14e>
 8008290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008294:	f003 0320 	and.w	r3, r3, #32
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fd25 	bl	8008cec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	bf14      	ite	ne
 80082b0:	2301      	movne	r3, #1
 80082b2:	2300      	moveq	r3, #0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082be:	f003 0308 	and.w	r3, r3, #8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d103      	bne.n	80082ce <HAL_UART_IRQHandler+0x17a>
 80082c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d04f      	beq.n	800836e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fc2f 	bl	8008b32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d041      	beq.n	8008366 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3314      	adds	r3, #20
 80082e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3314      	adds	r3, #20
 800830a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800830e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800831a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1d9      	bne.n	80082e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d013      	beq.n	800835e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833a:	4a7e      	ldr	r2, [pc, #504]	; (8008534 <HAL_UART_IRQHandler+0x3e0>)
 800833c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008342:	4618      	mov	r0, r3
 8008344:	f7fd fb84 	bl	8005a50 <HAL_DMA_Abort_IT>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d016      	beq.n	800837c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800835c:	e00e      	b.n	800837c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f9a5 	bl	80086ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008364:	e00a      	b.n	800837c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f9a1 	bl	80086ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836c:	e006      	b.n	800837c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f99d 	bl	80086ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800837a:	e175      	b.n	8008668 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800837c:	bf00      	nop
    return;
 800837e:	e173      	b.n	8008668 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008384:	2b01      	cmp	r3, #1
 8008386:	f040 814f 	bne.w	8008628 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800838a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838e:	f003 0310 	and.w	r3, r3, #16
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 8148 	beq.w	8008628 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 8141 	beq.w	8008628 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083a6:	2300      	movs	r3, #0
 80083a8:	60bb      	str	r3, [r7, #8]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60bb      	str	r3, [r7, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	60bb      	str	r3, [r7, #8]
 80083ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 80b6 	beq.w	8008538 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 8145 	beq.w	800866c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083ea:	429a      	cmp	r2, r3
 80083ec:	f080 813e 	bcs.w	800866c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	2b20      	cmp	r3, #32
 8008400:	f000 8088 	beq.w	8008514 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	330c      	adds	r3, #12
 800840a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008412:	e853 3f00 	ldrex	r3, [r3]
 8008416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800841a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800841e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008422:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	330c      	adds	r3, #12
 800842c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008430:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008434:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008438:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800843c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1d9      	bne.n	8008404 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3314      	adds	r3, #20
 8008456:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800845a:	e853 3f00 	ldrex	r3, [r3]
 800845e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008462:	f023 0301 	bic.w	r3, r3, #1
 8008466:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3314      	adds	r3, #20
 8008470:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008474:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008478:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800847c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008480:	e841 2300 	strex	r3, r2, [r1]
 8008484:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e1      	bne.n	8008450 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3314      	adds	r3, #20
 8008492:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008496:	e853 3f00 	ldrex	r3, [r3]
 800849a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800849c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800849e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3314      	adds	r3, #20
 80084ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e3      	bne.n	800848c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	330c      	adds	r3, #12
 80084d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084e4:	f023 0310 	bic.w	r3, r3, #16
 80084e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	330c      	adds	r3, #12
 80084f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80084f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80084f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e3      	bne.n	80084d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850e:	4618      	mov	r0, r3
 8008510:	f7fd fa62 	bl	80059d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2202      	movs	r2, #2
 8008518:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008522:	b29b      	uxth	r3, r3
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	b29b      	uxth	r3, r3
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f8c8 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008530:	e09c      	b.n	800866c <HAL_UART_IRQHandler+0x518>
 8008532:	bf00      	nop
 8008534:	08008bf7 	.word	0x08008bf7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008540:	b29b      	uxth	r3, r3
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800854c:	b29b      	uxth	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 808e 	beq.w	8008670 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 8089 	beq.w	8008670 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	330c      	adds	r3, #12
 8008564:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800856e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008570:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	330c      	adds	r3, #12
 800857e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008582:	647a      	str	r2, [r7, #68]	; 0x44
 8008584:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008586:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008588:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800858a:	e841 2300 	strex	r3, r2, [r1]
 800858e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e3      	bne.n	800855e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3314      	adds	r3, #20
 800859c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	623b      	str	r3, [r7, #32]
   return(result);
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	f023 0301 	bic.w	r3, r3, #1
 80085ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3314      	adds	r3, #20
 80085b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085ba:	633a      	str	r2, [r7, #48]	; 0x30
 80085bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e3      	bne.n	8008596 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	330c      	adds	r3, #12
 80085e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 0310 	bic.w	r3, r3, #16
 80085f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	330c      	adds	r3, #12
 80085fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008600:	61fa      	str	r2, [r7, #28]
 8008602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	69b9      	ldr	r1, [r7, #24]
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	e841 2300 	strex	r3, r2, [r1]
 800860c:	617b      	str	r3, [r7, #20]
   return(result);
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e3      	bne.n	80085dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800861a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f84d 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008626:	e023      	b.n	8008670 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800862c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008630:	2b00      	cmp	r3, #0
 8008632:	d009      	beq.n	8008648 <HAL_UART_IRQHandler+0x4f4>
 8008634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 faec 	bl	8008c1e <UART_Transmit_IT>
    return;
 8008646:	e014      	b.n	8008672 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00e      	beq.n	8008672 <HAL_UART_IRQHandler+0x51e>
 8008654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d008      	beq.n	8008672 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fb2b 	bl	8008cbc <UART_EndTransmit_IT>
    return;
 8008666:	e004      	b.n	8008672 <HAL_UART_IRQHandler+0x51e>
    return;
 8008668:	bf00      	nop
 800866a:	e002      	b.n	8008672 <HAL_UART_IRQHandler+0x51e>
      return;
 800866c:	bf00      	nop
 800866e:	e000      	b.n	8008672 <HAL_UART_IRQHandler+0x51e>
      return;
 8008670:	bf00      	nop
  }
}
 8008672:	37e8      	adds	r7, #232	; 0xe8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	bc80      	pop	{r7}
 8008688:	4770      	bx	lr

0800868a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800868a:	b480      	push	{r7}
 800868c:	b083      	sub	sp, #12
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008692:	bf00      	nop
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr

0800869c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr

080086ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bc80      	pop	{r7}
 80086d4:	4770      	bx	lr

080086d6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b09c      	sub	sp, #112	; 0x70
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0320 	and.w	r3, r3, #32
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d172      	bne.n	80087d8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80086f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f4:	2200      	movs	r2, #0
 80086f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	330c      	adds	r3, #12
 80086fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800870a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800870e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	330c      	adds	r3, #12
 8008716:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008718:	65ba      	str	r2, [r7, #88]	; 0x58
 800871a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800871e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e5      	bne.n	80086f8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800872c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3314      	adds	r3, #20
 8008732:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873e:	f023 0301 	bic.w	r3, r3, #1
 8008742:	667b      	str	r3, [r7, #100]	; 0x64
 8008744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3314      	adds	r3, #20
 800874a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800874c:	647a      	str	r2, [r7, #68]	; 0x44
 800874e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800875a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e5      	bne.n	800872c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3314      	adds	r3, #20
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	623b      	str	r3, [r7, #32]
   return(result);
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008776:	663b      	str	r3, [r7, #96]	; 0x60
 8008778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3314      	adds	r3, #20
 800877e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008780:	633a      	str	r2, [r7, #48]	; 0x30
 8008782:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e5      	bne.n	8008760 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008796:	2220      	movs	r2, #32
 8008798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800879c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d119      	bne.n	80087d8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0310 	bic.w	r3, r3, #16
 80087ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	330c      	adds	r3, #12
 80087c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087c4:	61fa      	str	r2, [r7, #28]
 80087c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	69b9      	ldr	r1, [r7, #24]
 80087ca:	69fa      	ldr	r2, [r7, #28]
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	617b      	str	r3, [r7, #20]
   return(result);
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e5      	bne.n	80087a4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087da:	2200      	movs	r2, #0
 80087dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d106      	bne.n	80087f4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087ea:	4619      	mov	r1, r3
 80087ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087ee:	f7ff ff67 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087f2:	e002      	b.n	80087fa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80087f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087f6:	f7ff ff48 	bl	800868a <HAL_UART_RxCpltCallback>
}
 80087fa:	bf00      	nop
 80087fc:	3770      	adds	r7, #112	; 0x70
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2201      	movs	r2, #1
 8008814:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881a:	2b01      	cmp	r3, #1
 800881c:	d108      	bne.n	8008830 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008822:	085b      	lsrs	r3, r3, #1
 8008824:	b29b      	uxth	r3, r3
 8008826:	4619      	mov	r1, r3
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7ff ff49 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800882e:	e002      	b.n	8008836 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f7ff ff33 	bl	800869c <HAL_UART_RxHalfCpltCallback>
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008846:	2300      	movs	r3, #0
 8008848:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885a:	2b00      	cmp	r3, #0
 800885c:	bf14      	ite	ne
 800885e:	2301      	movne	r3, #1
 8008860:	2300      	moveq	r3, #0
 8008862:	b2db      	uxtb	r3, r3
 8008864:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b21      	cmp	r3, #33	; 0x21
 8008870:	d108      	bne.n	8008884 <UART_DMAError+0x46>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d005      	beq.n	8008884 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2200      	movs	r2, #0
 800887c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800887e:	68b8      	ldr	r0, [r7, #8]
 8008880:	f000 f930 	bl	8008ae4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888e:	2b00      	cmp	r3, #0
 8008890:	bf14      	ite	ne
 8008892:	2301      	movne	r3, #1
 8008894:	2300      	moveq	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b22      	cmp	r3, #34	; 0x22
 80088a4:	d108      	bne.n	80088b8 <UART_DMAError+0x7a>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d005      	beq.n	80088b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2200      	movs	r2, #0
 80088b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80088b2:	68b8      	ldr	r0, [r7, #8]
 80088b4:	f000 f93d 	bl	8008b32 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088bc:	f043 0210 	orr.w	r2, r3, #16
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088c4:	68b8      	ldr	r0, [r7, #8]
 80088c6:	f7ff fef2 	bl	80086ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ca:	bf00      	nop
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b090      	sub	sp, #64	; 0x40
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	603b      	str	r3, [r7, #0]
 80088de:	4613      	mov	r3, r2
 80088e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088e2:	e050      	b.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ea:	d04c      	beq.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d007      	beq.n	8008902 <UART_WaitOnFlagUntilTimeout+0x30>
 80088f2:	f7fc fa1d 	bl	8004d30 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088fe:	429a      	cmp	r2, r3
 8008900:	d241      	bcs.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	330c      	adds	r3, #12
 8008908:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	330c      	adds	r3, #12
 8008920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008922:	637a      	str	r2, [r7, #52]	; 0x34
 8008924:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e5      	bne.n	8008902 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3314      	adds	r3, #20
 800893c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	613b      	str	r3, [r7, #16]
   return(result);
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f023 0301 	bic.w	r3, r3, #1
 800894c:	63bb      	str	r3, [r7, #56]	; 0x38
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3314      	adds	r3, #20
 8008954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008956:	623a      	str	r2, [r7, #32]
 8008958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	69f9      	ldr	r1, [r7, #28]
 800895c:	6a3a      	ldr	r2, [r7, #32]
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	61bb      	str	r3, [r7, #24]
   return(result);
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e5      	bne.n	8008936 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2220      	movs	r2, #32
 800896e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2220      	movs	r2, #32
 8008976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e00f      	b.n	80089a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	4013      	ands	r3, r2
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	429a      	cmp	r2, r3
 8008994:	bf0c      	ite	eq
 8008996:	2301      	moveq	r3, #1
 8008998:	2300      	movne	r3, #0
 800899a:	b2db      	uxtb	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d09f      	beq.n	80088e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3740      	adds	r7, #64	; 0x40
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b098      	sub	sp, #96	; 0x60
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	4613      	mov	r3, r2
 80089bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	88fa      	ldrh	r2, [r7, #6]
 80089c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2222      	movs	r2, #34	; 0x22
 80089d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089dc:	4a3e      	ldr	r2, [pc, #248]	; (8008ad8 <UART_Start_Receive_DMA+0x128>)
 80089de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e4:	4a3d      	ldr	r2, [pc, #244]	; (8008adc <UART_Start_Receive_DMA+0x12c>)
 80089e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ec:	4a3c      	ldr	r2, [pc, #240]	; (8008ae0 <UART_Start_Receive_DMA+0x130>)
 80089ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f4:	2200      	movs	r2, #0
 80089f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80089f8:	f107 0308 	add.w	r3, r7, #8
 80089fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3304      	adds	r3, #4
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	f7fc ff82 	bl	8005918 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008a14:	2300      	movs	r3, #0
 8008a16:	613b      	str	r3, [r7, #16]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	613b      	str	r3, [r7, #16]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	613b      	str	r3, [r7, #16]
 8008a28:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d019      	beq.n	8008a66 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	330c      	adds	r3, #12
 8008a38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3c:	e853 3f00 	ldrex	r3, [r3]
 8008a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a48:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	330c      	adds	r3, #12
 8008a50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a52:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008a54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008a58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e5      	bne.n	8008a32 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3314      	adds	r3, #20
 8008a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	f043 0301 	orr.w	r3, r3, #1
 8008a7c:	657b      	str	r3, [r7, #84]	; 0x54
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3314      	adds	r3, #20
 8008a84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a86:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e5      	bne.n	8008a66 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3314      	adds	r3, #20
 8008aa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ab0:	653b      	str	r3, [r7, #80]	; 0x50
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3314      	adds	r3, #20
 8008ab8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008aba:	627a      	str	r2, [r7, #36]	; 0x24
 8008abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6a39      	ldr	r1, [r7, #32]
 8008ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e5      	bne.n	8008a9a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3760      	adds	r7, #96	; 0x60
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	080086d7 	.word	0x080086d7
 8008adc:	08008803 	.word	0x08008803
 8008ae0:	0800883f 	.word	0x0800883f

08008ae4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b089      	sub	sp, #36	; 0x24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	330c      	adds	r3, #12
 8008af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b02:	61fb      	str	r3, [r7, #28]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	330c      	adds	r3, #12
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	61ba      	str	r2, [r7, #24]
 8008b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6979      	ldr	r1, [r7, #20]
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	613b      	str	r3, [r7, #16]
   return(result);
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e5      	bne.n	8008aec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2220      	movs	r2, #32
 8008b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008b28:	bf00      	nop
 8008b2a:	3724      	adds	r7, #36	; 0x24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr

08008b32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b095      	sub	sp, #84	; 0x54
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	330c      	adds	r3, #12
 8008b40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	330c      	adds	r3, #12
 8008b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b5a:	643a      	str	r2, [r7, #64]	; 0x40
 8008b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e5      	bne.n	8008b3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3314      	adds	r3, #20
 8008b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	f023 0301 	bic.w	r3, r3, #1
 8008b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3314      	adds	r3, #20
 8008b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e5      	bne.n	8008b6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d119      	bne.n	8008bde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	330c      	adds	r3, #12
 8008bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	e853 3f00 	ldrex	r3, [r3]
 8008bb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f023 0310 	bic.w	r3, r3, #16
 8008bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	330c      	adds	r3, #12
 8008bc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bca:	61ba      	str	r2, [r7, #24]
 8008bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bce:	6979      	ldr	r1, [r7, #20]
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	e841 2300 	strex	r3, r2, [r1]
 8008bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1e5      	bne.n	8008baa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008bec:	bf00      	nop
 8008bee:	3754      	adds	r7, #84	; 0x54
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bc80      	pop	{r7}
 8008bf4:	4770      	bx	lr

08008bf6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f7ff fd4c 	bl	80086ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c16:	bf00      	nop
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b085      	sub	sp, #20
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b21      	cmp	r3, #33	; 0x21
 8008c30:	d13e      	bne.n	8008cb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c3a:	d114      	bne.n	8008c66 <UART_Transmit_IT+0x48>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d110      	bne.n	8008c66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	1c9a      	adds	r2, r3, #2
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	621a      	str	r2, [r3, #32]
 8008c64:	e008      	b.n	8008c78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	1c59      	adds	r1, r3, #1
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6211      	str	r1, [r2, #32]
 8008c70:	781a      	ldrb	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	4619      	mov	r1, r3
 8008c86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10f      	bne.n	8008cac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68da      	ldr	r2, [r3, #12]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008caa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	e000      	b.n	8008cb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008cb0:	2302      	movs	r3, #2
  }
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3714      	adds	r7, #20
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bc80      	pop	{r7}
 8008cba:	4770      	bx	lr

08008cbc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68da      	ldr	r2, [r3, #12]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cd2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff fccb 	bl	8008678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08c      	sub	sp, #48	; 0x30
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b22      	cmp	r3, #34	; 0x22
 8008cfe:	f040 80ae 	bne.w	8008e5e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d0a:	d117      	bne.n	8008d3c <UART_Receive_IT+0x50>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d113      	bne.n	8008d3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d34:	1c9a      	adds	r2, r3, #2
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	629a      	str	r2, [r3, #40]	; 0x28
 8008d3a:	e026      	b.n	8008d8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d4e:	d007      	beq.n	8008d60 <UART_Receive_IT+0x74>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <UART_Receive_IT+0x82>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d106      	bne.n	8008d6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	701a      	strb	r2, [r3, #0]
 8008d6c:	e008      	b.n	8008d80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	3b01      	subs	r3, #1
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	4619      	mov	r1, r3
 8008d98:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d15d      	bne.n	8008e5a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0220 	bic.w	r2, r2, #32
 8008dac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	695a      	ldr	r2, [r3, #20]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 0201 	bic.w	r2, r2, #1
 8008dcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d135      	bne.n	8008e50 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	330c      	adds	r3, #12
 8008df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	613b      	str	r3, [r7, #16]
   return(result);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	f023 0310 	bic.w	r3, r3, #16
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	330c      	adds	r3, #12
 8008e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e0a:	623a      	str	r2, [r7, #32]
 8008e0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	69f9      	ldr	r1, [r7, #28]
 8008e10:	6a3a      	ldr	r2, [r7, #32]
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e5      	bne.n	8008dea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0310 	and.w	r3, r3, #16
 8008e28:	2b10      	cmp	r3, #16
 8008e2a:	d10a      	bne.n	8008e42 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff fc39 	bl	80086c0 <HAL_UARTEx_RxEventCallback>
 8008e4e:	e002      	b.n	8008e56 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7ff fc1a 	bl	800868a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	e002      	b.n	8008e60 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e000      	b.n	8008e60 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008e5e:	2302      	movs	r3, #2
  }
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3730      	adds	r7, #48	; 0x30
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	689a      	ldr	r2, [r3, #8]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008ea2:	f023 030c 	bic.w	r3, r3, #12
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	6812      	ldr	r2, [r2, #0]
 8008eaa:	68b9      	ldr	r1, [r7, #8]
 8008eac:	430b      	orrs	r3, r1
 8008eae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	699a      	ldr	r2, [r3, #24]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a2c      	ldr	r2, [pc, #176]	; (8008f7c <UART_SetConfig+0x114>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d103      	bne.n	8008ed8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008ed0:	f7fe fab4 	bl	800743c <HAL_RCC_GetPCLK2Freq>
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	e002      	b.n	8008ede <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008ed8:	f7fe fa9c 	bl	8007414 <HAL_RCC_GetPCLK1Freq>
 8008edc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009a      	lsls	r2, r3, #2
 8008ee8:	441a      	add	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef4:	4a22      	ldr	r2, [pc, #136]	; (8008f80 <UART_SetConfig+0x118>)
 8008ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8008efa:	095b      	lsrs	r3, r3, #5
 8008efc:	0119      	lsls	r1, r3, #4
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4613      	mov	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	009a      	lsls	r2, r3, #2
 8008f08:	441a      	add	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f14:	4b1a      	ldr	r3, [pc, #104]	; (8008f80 <UART_SetConfig+0x118>)
 8008f16:	fba3 0302 	umull	r0, r3, r3, r2
 8008f1a:	095b      	lsrs	r3, r3, #5
 8008f1c:	2064      	movs	r0, #100	; 0x64
 8008f1e:	fb00 f303 	mul.w	r3, r0, r3
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	3332      	adds	r3, #50	; 0x32
 8008f28:	4a15      	ldr	r2, [pc, #84]	; (8008f80 <UART_SetConfig+0x118>)
 8008f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f2e:	095b      	lsrs	r3, r3, #5
 8008f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f34:	4419      	add	r1, r3
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009a      	lsls	r2, r3, #2
 8008f40:	441a      	add	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f4c:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <UART_SetConfig+0x118>)
 8008f4e:	fba3 0302 	umull	r0, r3, r3, r2
 8008f52:	095b      	lsrs	r3, r3, #5
 8008f54:	2064      	movs	r0, #100	; 0x64
 8008f56:	fb00 f303 	mul.w	r3, r0, r3
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	011b      	lsls	r3, r3, #4
 8008f5e:	3332      	adds	r3, #50	; 0x32
 8008f60:	4a07      	ldr	r2, [pc, #28]	; (8008f80 <UART_SetConfig+0x118>)
 8008f62:	fba2 2303 	umull	r2, r3, r2, r3
 8008f66:	095b      	lsrs	r3, r3, #5
 8008f68:	f003 020f 	and.w	r2, r3, #15
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	440a      	add	r2, r1
 8008f72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008f74:	bf00      	nop
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	40013800 	.word	0x40013800
 8008f80:	51eb851f 	.word	0x51eb851f

08008f84 <wait_for_gpio_state_timeout>:
#define I2C1_SCL_GPIO_Port GPIOB
#define I2C1_SDA_Pin GPIO_PIN_7
#define I2C1_SDA_GPIO_Port GPIOB

static bool wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	607b      	str	r3, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	817b      	strh	r3, [r7, #10]
 8008f92:	4613      	mov	r3, r2
 8008f94:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 8008f96:	f7fb fecb 	bl	8004d30 <HAL_GetTick>
 8008f9a:	6138      	str	r0, [r7, #16]
    bool ret = true;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	75fb      	strb	r3, [r7, #23]
    /* Wait until flag is set */
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (true == ret);)
 8008fa0:	e011      	b.n	8008fc6 <wait_for_gpio_state_timeout+0x42>
    {
        /* Check for the timeout */
        if (timeout != HAL_MAX_DELAY)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa8:	d00c      	beq.n	8008fc4 <wait_for_gpio_state_timeout+0x40>
        {
            if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d007      	beq.n	8008fc0 <wait_for_gpio_state_timeout+0x3c>
 8008fb0:	f7fb febe 	bl	8004d30 <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d201      	bcs.n	8008fc4 <wait_for_gpio_state_timeout+0x40>
            {
                ret = false;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
            }
        }
        asm("nop");
 8008fc4:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (true == ret);)
 8008fc6:	897b      	ldrh	r3, [r7, #10]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f7fd f92c 	bl	8006228 <HAL_GPIO_ReadPin>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	7a7b      	ldrb	r3, [r7, #9]
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d002      	beq.n	8008fe0 <wait_for_gpio_state_timeout+0x5c>
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1e0      	bne.n	8008fa2 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <I2C_ClearBusyFlagErratum>:


static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef* handle, uint32_t timeout)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    // 1. Clear PE bit.
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_PE);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f022 0201 	bic.w	r2, r2, #1
 8009004:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(handle);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7fd fab2 	bl	8006570 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800900c:	2311      	movs	r3, #17
 800900e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8009010:	2300      	movs	r3, #0
 8009012:	613b      	str	r3, [r7, #16]

    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 8009014:	2340      	movs	r3, #64	; 0x40
 8009016:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8009018:	f107 0308 	add.w	r3, r7, #8
 800901c:	4619      	mov	r1, r3
 800901e:	4840      	ldr	r0, [pc, #256]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 8009020:	f7fc fec2 	bl	8005da8 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 8009024:	2380      	movs	r3, #128	; 0x80
 8009026:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 8009028:	f107 0308 	add.w	r3, r7, #8
 800902c:	4619      	mov	r1, r3
 800902e:	483c      	ldr	r0, [pc, #240]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 8009030:	f7fc feba 	bl	8005da8 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8009034:	2201      	movs	r2, #1
 8009036:	2180      	movs	r1, #128	; 0x80
 8009038:	4839      	ldr	r0, [pc, #228]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 800903a:	f7fd f90c 	bl	8006256 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 800903e:	2201      	movs	r2, #1
 8009040:	2140      	movs	r1, #64	; 0x40
 8009042:	4837      	ldr	r0, [pc, #220]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 8009044:	f7fd f907 	bl	8006256 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2201      	movs	r2, #1
 800904c:	2140      	movs	r1, #64	; 0x40
 800904e:	4834      	ldr	r0, [pc, #208]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 8009050:	f7ff ff98 	bl	8008f84 <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2201      	movs	r2, #1
 8009058:	2180      	movs	r1, #128	; 0x80
 800905a:	4831      	ldr	r0, [pc, #196]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 800905c:	f7ff ff92 	bl	8008f84 <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET);
 8009060:	2200      	movs	r2, #0
 8009062:	2180      	movs	r1, #128	; 0x80
 8009064:	482e      	ldr	r0, [pc, #184]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 8009066:	f7fd f8f6 	bl	8006256 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET, timeout);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2200      	movs	r2, #0
 800906e:	2180      	movs	r1, #128	; 0x80
 8009070:	482b      	ldr	r0, [pc, #172]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 8009072:	f7ff ff87 	bl	8008f84 <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET);
 8009076:	2200      	movs	r2, #0
 8009078:	2140      	movs	r1, #64	; 0x40
 800907a:	4829      	ldr	r0, [pc, #164]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 800907c:	f7fd f8eb 	bl	8006256 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET, timeout);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2200      	movs	r2, #0
 8009084:	2140      	movs	r1, #64	; 0x40
 8009086:	4826      	ldr	r0, [pc, #152]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 8009088:	f7ff ff7c 	bl	8008f84 <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 800908c:	2201      	movs	r2, #1
 800908e:	2140      	movs	r1, #64	; 0x40
 8009090:	4823      	ldr	r0, [pc, #140]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 8009092:	f7fd f8e0 	bl	8006256 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2201      	movs	r2, #1
 800909a:	2140      	movs	r1, #64	; 0x40
 800909c:	4820      	ldr	r0, [pc, #128]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 800909e:	f7ff ff71 	bl	8008f84 <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 80090a2:	2201      	movs	r2, #1
 80090a4:	2180      	movs	r1, #128	; 0x80
 80090a6:	481e      	ldr	r0, [pc, #120]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 80090a8:	f7fd f8d5 	bl	8006256 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	2201      	movs	r2, #1
 80090b0:	2180      	movs	r1, #128	; 0x80
 80090b2:	481b      	ldr	r0, [pc, #108]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 80090b4:	f7ff ff66 	bl	8008f84 <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80090b8:	2312      	movs	r3, #18
 80090ba:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStructure.Alternate = GPIO_AF1_I2C1;
//    HAL_GPIO_ConfigPinAF(GPIOB, I2C1_SDA_Pin, GPIO_AF1_I2C1);
    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 80090bc:	2340      	movs	r3, #64	; 0x40
 80090be:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStructure);
 80090c0:	f107 0308 	add.w	r3, r7, #8
 80090c4:	4619      	mov	r1, r3
 80090c6:	4816      	ldr	r0, [pc, #88]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 80090c8:	f7fc fe6e 	bl	8005da8 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 80090cc:	2380      	movs	r3, #128	; 0x80
 80090ce:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 80090d0:	f107 0308 	add.w	r3, r7, #8
 80090d4:	4619      	mov	r1, r3
 80090d6:	4812      	ldr	r0, [pc, #72]	; (8009120 <I2C_ClearBusyFlagErratum+0x134>)
 80090d8:	f7fc fe66 	bl	8005da8 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090ea:	601a      	str	r2, [r3, #0]
    asm("nop");
 80090ec:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090fc:	601a      	str	r2, [r3, #0]
    asm("nop");
 80090fe:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(handle->Instance->CR1, I2C_CR1_PE);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f042 0201 	orr.w	r2, r2, #1
 800910e:	601a      	str	r2, [r3, #0]
    asm("nop");
 8009110:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(handle);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7fd f8e8 	bl	80062e8 <HAL_I2C_Init>
}
 8009118:	bf00      	nop
 800911a:	3718      	adds	r7, #24
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	40010c00 	.word	0x40010c00

08009124 <lcd_send_cmd>:




void lcd_send_cmd (char cmd)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af02      	add	r7, sp, #8
 800912a:	4603      	mov	r3, r0
 800912c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800912e:	79fb      	ldrb	r3, [r7, #7]
 8009130:	f023 030f 	bic.w	r3, r3, #15
 8009134:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8009136:	79fb      	ldrb	r3, [r7, #7]
 8009138:	011b      	lsls	r3, r3, #4
 800913a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	f043 030c 	orr.w	r3, r3, #12
 8009142:	b2db      	uxtb	r3, r3
 8009144:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	f043 0308 	orr.w	r3, r3, #8
 800914c:	b2db      	uxtb	r3, r3
 800914e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8009150:	7bbb      	ldrb	r3, [r7, #14]
 8009152:	f043 030c 	orr.w	r3, r3, #12
 8009156:	b2db      	uxtb	r3, r3
 8009158:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	f043 0308 	orr.w	r3, r3, #8
 8009160:	b2db      	uxtb	r3, r3
 8009162:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 5000);
 8009164:	f107 0208 	add.w	r2, r7, #8
 8009168:	f241 3388 	movw	r3, #5000	; 0x1388
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	2304      	movs	r3, #4
 8009170:	214e      	movs	r1, #78	; 0x4e
 8009172:	4803      	ldr	r0, [pc, #12]	; (8009180 <lcd_send_cmd+0x5c>)
 8009174:	f7fd fa2c 	bl	80065d0 <HAL_I2C_Master_Transmit>
}
 8009178:	bf00      	nop
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	20000324 	.word	0x20000324

08009184 <lcd_send_data>:

void lcd_send_data (char data)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af02      	add	r7, sp, #8
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800918e:	79fb      	ldrb	r3, [r7, #7]
 8009190:	f023 030f 	bic.w	r3, r3, #15
 8009194:	75fb      	strb	r3, [r7, #23]
	data_l = ((data<<4)&0xf0);
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	011b      	lsls	r3, r3, #4
 800919a:	75bb      	strb	r3, [r7, #22]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	f043 030d 	orr.w	r3, r3, #13
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	733b      	strb	r3, [r7, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	f043 0309 	orr.w	r3, r3, #9
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	737b      	strb	r3, [r7, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80091b0:	7dbb      	ldrb	r3, [r7, #22]
 80091b2:	f043 030d 	orr.w	r3, r3, #13
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	73bb      	strb	r3, [r7, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80091ba:	7dbb      	ldrb	r3, [r7, #22]
 80091bc:	f043 0309 	orr.w	r3, r3, #9
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	73fb      	strb	r3, [r7, #15]
	int ret = HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 1000);
 80091c4:	f107 020c 	add.w	r2, r7, #12
 80091c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	2304      	movs	r3, #4
 80091d0:	214e      	movs	r1, #78	; 0x4e
 80091d2:	4808      	ldr	r0, [pc, #32]	; (80091f4 <lcd_send_data+0x70>)
 80091d4:	f7fd f9fc 	bl	80065d0 <HAL_I2C_Master_Transmit>
 80091d8:	4603      	mov	r3, r0
 80091da:	613b      	str	r3, [r7, #16]
	if (HAL_BUSY == ret)
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d104      	bne.n	80091ec <lcd_send_data+0x68>
    {
        I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 80091e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80091e6:	4803      	ldr	r0, [pc, #12]	; (80091f4 <lcd_send_data+0x70>)
 80091e8:	f7ff ff00 	bl	8008fec <I2C_ClearBusyFlagErratum>
    }

}
 80091ec:	bf00      	nop
 80091ee:	3718      	adds	r7, #24
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20000324 	.word	0x20000324

080091f8 <lcd_clear>:

void lcd_clear (void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80091fe:	2080      	movs	r0, #128	; 0x80
 8009200:	f7ff ff90 	bl	8009124 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8009204:	2300      	movs	r3, #0
 8009206:	607b      	str	r3, [r7, #4]
 8009208:	e005      	b.n	8009216 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800920a:	2020      	movs	r0, #32
 800920c:	f7ff ffba 	bl	8009184 <lcd_send_data>
	for (int i=0; i<70; i++)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3301      	adds	r3, #1
 8009214:	607b      	str	r3, [r7, #4]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b45      	cmp	r3, #69	; 0x45
 800921a:	ddf6      	ble.n	800920a <lcd_clear+0x12>
	}
}
 800921c:	bf00      	nop
 800921e:	bf00      	nop
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b082      	sub	sp, #8
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	6039      	str	r1, [r7, #0]
    switch (row)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <lcd_put_cur+0x18>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d005      	beq.n	8009248 <lcd_put_cur+0x22>
 800923c:	e009      	b.n	8009252 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009244:	603b      	str	r3, [r7, #0]
            break;
 8009246:	e004      	b.n	8009252 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800924e:	603b      	str	r3, [r7, #0]
            break;
 8009250:	bf00      	nop
    }

    lcd_send_cmd (col);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff ff64 	bl	8009124 <lcd_send_cmd>
}
 800925c:	bf00      	nop
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <lcd_init>:


void lcd_init (void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8009268:	2032      	movs	r0, #50	; 0x32
 800926a:	f7fb fd6b 	bl	8004d44 <HAL_Delay>
	lcd_send_cmd (0x30);
 800926e:	2030      	movs	r0, #48	; 0x30
 8009270:	f7ff ff58 	bl	8009124 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8009274:	2005      	movs	r0, #5
 8009276:	f7fb fd65 	bl	8004d44 <HAL_Delay>
	lcd_send_cmd (0x30);
 800927a:	2030      	movs	r0, #48	; 0x30
 800927c:	f7ff ff52 	bl	8009124 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8009280:	2001      	movs	r0, #1
 8009282:	f7fb fd5f 	bl	8004d44 <HAL_Delay>
	lcd_send_cmd (0x30);
 8009286:	2030      	movs	r0, #48	; 0x30
 8009288:	f7ff ff4c 	bl	8009124 <lcd_send_cmd>
	HAL_Delay(10);
 800928c:	200a      	movs	r0, #10
 800928e:	f7fb fd59 	bl	8004d44 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8009292:	2020      	movs	r0, #32
 8009294:	f7ff ff46 	bl	8009124 <lcd_send_cmd>
	HAL_Delay(10);
 8009298:	200a      	movs	r0, #10
 800929a:	f7fb fd53 	bl	8004d44 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800929e:	2028      	movs	r0, #40	; 0x28
 80092a0:	f7ff ff40 	bl	8009124 <lcd_send_cmd>
	HAL_Delay(1);
 80092a4:	2001      	movs	r0, #1
 80092a6:	f7fb fd4d 	bl	8004d44 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80092aa:	2008      	movs	r0, #8
 80092ac:	f7ff ff3a 	bl	8009124 <lcd_send_cmd>
	HAL_Delay(1);
 80092b0:	2001      	movs	r0, #1
 80092b2:	f7fb fd47 	bl	8004d44 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80092b6:	2001      	movs	r0, #1
 80092b8:	f7ff ff34 	bl	8009124 <lcd_send_cmd>
	HAL_Delay(1);
 80092bc:	2001      	movs	r0, #1
 80092be:	f7fb fd41 	bl	8004d44 <HAL_Delay>
	HAL_Delay(1);
 80092c2:	2001      	movs	r0, #1
 80092c4:	f7fb fd3e 	bl	8004d44 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80092c8:	2006      	movs	r0, #6
 80092ca:	f7ff ff2b 	bl	8009124 <lcd_send_cmd>
	HAL_Delay(1);
 80092ce:	2001      	movs	r0, #1
 80092d0:	f7fb fd38 	bl	8004d44 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80092d4:	200c      	movs	r0, #12
 80092d6:	f7ff ff25 	bl	8009124 <lcd_send_cmd>
}
 80092da:	bf00      	nop
 80092dc:	bd80      	pop	{r7, pc}

080092de <lcd_send_string>:

void lcd_send_string (char *str)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b082      	sub	sp, #8
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80092e6:	e006      	b.n	80092f6 <lcd_send_string+0x18>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	1c5a      	adds	r2, r3, #1
 80092ec:	607a      	str	r2, [r7, #4]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff ff47 	bl	8009184 <lcd_send_data>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1f4      	bne.n	80092e8 <lcd_send_string+0xa>
}
 80092fe:	bf00      	nop
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <siprintf>:
 8009308:	b40e      	push	{r1, r2, r3}
 800930a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800930e:	b500      	push	{lr}
 8009310:	b09c      	sub	sp, #112	; 0x70
 8009312:	ab1d      	add	r3, sp, #116	; 0x74
 8009314:	9002      	str	r0, [sp, #8]
 8009316:	9006      	str	r0, [sp, #24]
 8009318:	9107      	str	r1, [sp, #28]
 800931a:	9104      	str	r1, [sp, #16]
 800931c:	4808      	ldr	r0, [pc, #32]	; (8009340 <siprintf+0x38>)
 800931e:	4909      	ldr	r1, [pc, #36]	; (8009344 <siprintf+0x3c>)
 8009320:	f853 2b04 	ldr.w	r2, [r3], #4
 8009324:	9105      	str	r1, [sp, #20]
 8009326:	6800      	ldr	r0, [r0, #0]
 8009328:	a902      	add	r1, sp, #8
 800932a:	9301      	str	r3, [sp, #4]
 800932c:	f000 f9ba 	bl	80096a4 <_svfiprintf_r>
 8009330:	2200      	movs	r2, #0
 8009332:	9b02      	ldr	r3, [sp, #8]
 8009334:	701a      	strb	r2, [r3, #0]
 8009336:	b01c      	add	sp, #112	; 0x70
 8009338:	f85d eb04 	ldr.w	lr, [sp], #4
 800933c:	b003      	add	sp, #12
 800933e:	4770      	bx	lr
 8009340:	200002a0 	.word	0x200002a0
 8009344:	ffff0208 	.word	0xffff0208

08009348 <siscanf>:
 8009348:	b40e      	push	{r1, r2, r3}
 800934a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800934e:	b530      	push	{r4, r5, lr}
 8009350:	b09c      	sub	sp, #112	; 0x70
 8009352:	ac1f      	add	r4, sp, #124	; 0x7c
 8009354:	f854 5b04 	ldr.w	r5, [r4], #4
 8009358:	f8ad 2014 	strh.w	r2, [sp, #20]
 800935c:	9002      	str	r0, [sp, #8]
 800935e:	9006      	str	r0, [sp, #24]
 8009360:	f7f6 fefe 	bl	8000160 <strlen>
 8009364:	4b0b      	ldr	r3, [pc, #44]	; (8009394 <siscanf+0x4c>)
 8009366:	9003      	str	r0, [sp, #12]
 8009368:	930b      	str	r3, [sp, #44]	; 0x2c
 800936a:	2300      	movs	r3, #0
 800936c:	930f      	str	r3, [sp, #60]	; 0x3c
 800936e:	9314      	str	r3, [sp, #80]	; 0x50
 8009370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009374:	9007      	str	r0, [sp, #28]
 8009376:	4808      	ldr	r0, [pc, #32]	; (8009398 <siscanf+0x50>)
 8009378:	f8ad 3016 	strh.w	r3, [sp, #22]
 800937c:	462a      	mov	r2, r5
 800937e:	4623      	mov	r3, r4
 8009380:	a902      	add	r1, sp, #8
 8009382:	6800      	ldr	r0, [r0, #0]
 8009384:	9401      	str	r4, [sp, #4]
 8009386:	f000 fae5 	bl	8009954 <__ssvfiscanf_r>
 800938a:	b01c      	add	sp, #112	; 0x70
 800938c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009390:	b003      	add	sp, #12
 8009392:	4770      	bx	lr
 8009394:	0800939d 	.word	0x0800939d
 8009398:	200002a0 	.word	0x200002a0

0800939c <__seofread>:
 800939c:	2000      	movs	r0, #0
 800939e:	4770      	bx	lr

080093a0 <memset>:
 80093a0:	4603      	mov	r3, r0
 80093a2:	4402      	add	r2, r0
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d100      	bne.n	80093aa <memset+0xa>
 80093a8:	4770      	bx	lr
 80093aa:	f803 1b01 	strb.w	r1, [r3], #1
 80093ae:	e7f9      	b.n	80093a4 <memset+0x4>

080093b0 <__errno>:
 80093b0:	4b01      	ldr	r3, [pc, #4]	; (80093b8 <__errno+0x8>)
 80093b2:	6818      	ldr	r0, [r3, #0]
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	200002a0 	.word	0x200002a0

080093bc <__libc_init_array>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	2600      	movs	r6, #0
 80093c0:	4d0c      	ldr	r5, [pc, #48]	; (80093f4 <__libc_init_array+0x38>)
 80093c2:	4c0d      	ldr	r4, [pc, #52]	; (80093f8 <__libc_init_array+0x3c>)
 80093c4:	1b64      	subs	r4, r4, r5
 80093c6:	10a4      	asrs	r4, r4, #2
 80093c8:	42a6      	cmp	r6, r4
 80093ca:	d109      	bne.n	80093e0 <__libc_init_array+0x24>
 80093cc:	f001 f8fe 	bl	800a5cc <_init>
 80093d0:	2600      	movs	r6, #0
 80093d2:	4d0a      	ldr	r5, [pc, #40]	; (80093fc <__libc_init_array+0x40>)
 80093d4:	4c0a      	ldr	r4, [pc, #40]	; (8009400 <__libc_init_array+0x44>)
 80093d6:	1b64      	subs	r4, r4, r5
 80093d8:	10a4      	asrs	r4, r4, #2
 80093da:	42a6      	cmp	r6, r4
 80093dc:	d105      	bne.n	80093ea <__libc_init_array+0x2e>
 80093de:	bd70      	pop	{r4, r5, r6, pc}
 80093e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093e4:	4798      	blx	r3
 80093e6:	3601      	adds	r6, #1
 80093e8:	e7ee      	b.n	80093c8 <__libc_init_array+0xc>
 80093ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ee:	4798      	blx	r3
 80093f0:	3601      	adds	r6, #1
 80093f2:	e7f2      	b.n	80093da <__libc_init_array+0x1e>
 80093f4:	0800a994 	.word	0x0800a994
 80093f8:	0800a994 	.word	0x0800a994
 80093fc:	0800a994 	.word	0x0800a994
 8009400:	0800a998 	.word	0x0800a998

08009404 <__retarget_lock_acquire_recursive>:
 8009404:	4770      	bx	lr

08009406 <__retarget_lock_release_recursive>:
 8009406:	4770      	bx	lr

08009408 <_free_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4605      	mov	r5, r0
 800940c:	2900      	cmp	r1, #0
 800940e:	d040      	beq.n	8009492 <_free_r+0x8a>
 8009410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009414:	1f0c      	subs	r4, r1, #4
 8009416:	2b00      	cmp	r3, #0
 8009418:	bfb8      	it	lt
 800941a:	18e4      	addlt	r4, r4, r3
 800941c:	f000 f8dc 	bl	80095d8 <__malloc_lock>
 8009420:	4a1c      	ldr	r2, [pc, #112]	; (8009494 <_free_r+0x8c>)
 8009422:	6813      	ldr	r3, [r2, #0]
 8009424:	b933      	cbnz	r3, 8009434 <_free_r+0x2c>
 8009426:	6063      	str	r3, [r4, #4]
 8009428:	6014      	str	r4, [r2, #0]
 800942a:	4628      	mov	r0, r5
 800942c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009430:	f000 b8d8 	b.w	80095e4 <__malloc_unlock>
 8009434:	42a3      	cmp	r3, r4
 8009436:	d908      	bls.n	800944a <_free_r+0x42>
 8009438:	6820      	ldr	r0, [r4, #0]
 800943a:	1821      	adds	r1, r4, r0
 800943c:	428b      	cmp	r3, r1
 800943e:	bf01      	itttt	eq
 8009440:	6819      	ldreq	r1, [r3, #0]
 8009442:	685b      	ldreq	r3, [r3, #4]
 8009444:	1809      	addeq	r1, r1, r0
 8009446:	6021      	streq	r1, [r4, #0]
 8009448:	e7ed      	b.n	8009426 <_free_r+0x1e>
 800944a:	461a      	mov	r2, r3
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	b10b      	cbz	r3, 8009454 <_free_r+0x4c>
 8009450:	42a3      	cmp	r3, r4
 8009452:	d9fa      	bls.n	800944a <_free_r+0x42>
 8009454:	6811      	ldr	r1, [r2, #0]
 8009456:	1850      	adds	r0, r2, r1
 8009458:	42a0      	cmp	r0, r4
 800945a:	d10b      	bne.n	8009474 <_free_r+0x6c>
 800945c:	6820      	ldr	r0, [r4, #0]
 800945e:	4401      	add	r1, r0
 8009460:	1850      	adds	r0, r2, r1
 8009462:	4283      	cmp	r3, r0
 8009464:	6011      	str	r1, [r2, #0]
 8009466:	d1e0      	bne.n	800942a <_free_r+0x22>
 8009468:	6818      	ldr	r0, [r3, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	4408      	add	r0, r1
 800946e:	6010      	str	r0, [r2, #0]
 8009470:	6053      	str	r3, [r2, #4]
 8009472:	e7da      	b.n	800942a <_free_r+0x22>
 8009474:	d902      	bls.n	800947c <_free_r+0x74>
 8009476:	230c      	movs	r3, #12
 8009478:	602b      	str	r3, [r5, #0]
 800947a:	e7d6      	b.n	800942a <_free_r+0x22>
 800947c:	6820      	ldr	r0, [r4, #0]
 800947e:	1821      	adds	r1, r4, r0
 8009480:	428b      	cmp	r3, r1
 8009482:	bf01      	itttt	eq
 8009484:	6819      	ldreq	r1, [r3, #0]
 8009486:	685b      	ldreq	r3, [r3, #4]
 8009488:	1809      	addeq	r1, r1, r0
 800948a:	6021      	streq	r1, [r4, #0]
 800948c:	6063      	str	r3, [r4, #4]
 800948e:	6054      	str	r4, [r2, #4]
 8009490:	e7cb      	b.n	800942a <_free_r+0x22>
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	20000d48 	.word	0x20000d48

08009498 <sbrk_aligned>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	4e0e      	ldr	r6, [pc, #56]	; (80094d4 <sbrk_aligned+0x3c>)
 800949c:	460c      	mov	r4, r1
 800949e:	6831      	ldr	r1, [r6, #0]
 80094a0:	4605      	mov	r5, r0
 80094a2:	b911      	cbnz	r1, 80094aa <sbrk_aligned+0x12>
 80094a4:	f000 ff3a 	bl	800a31c <_sbrk_r>
 80094a8:	6030      	str	r0, [r6, #0]
 80094aa:	4621      	mov	r1, r4
 80094ac:	4628      	mov	r0, r5
 80094ae:	f000 ff35 	bl	800a31c <_sbrk_r>
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	d00a      	beq.n	80094cc <sbrk_aligned+0x34>
 80094b6:	1cc4      	adds	r4, r0, #3
 80094b8:	f024 0403 	bic.w	r4, r4, #3
 80094bc:	42a0      	cmp	r0, r4
 80094be:	d007      	beq.n	80094d0 <sbrk_aligned+0x38>
 80094c0:	1a21      	subs	r1, r4, r0
 80094c2:	4628      	mov	r0, r5
 80094c4:	f000 ff2a 	bl	800a31c <_sbrk_r>
 80094c8:	3001      	adds	r0, #1
 80094ca:	d101      	bne.n	80094d0 <sbrk_aligned+0x38>
 80094cc:	f04f 34ff 	mov.w	r4, #4294967295
 80094d0:	4620      	mov	r0, r4
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	20000d4c 	.word	0x20000d4c

080094d8 <_malloc_r>:
 80094d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094dc:	1ccd      	adds	r5, r1, #3
 80094de:	f025 0503 	bic.w	r5, r5, #3
 80094e2:	3508      	adds	r5, #8
 80094e4:	2d0c      	cmp	r5, #12
 80094e6:	bf38      	it	cc
 80094e8:	250c      	movcc	r5, #12
 80094ea:	2d00      	cmp	r5, #0
 80094ec:	4607      	mov	r7, r0
 80094ee:	db01      	blt.n	80094f4 <_malloc_r+0x1c>
 80094f0:	42a9      	cmp	r1, r5
 80094f2:	d905      	bls.n	8009500 <_malloc_r+0x28>
 80094f4:	230c      	movs	r3, #12
 80094f6:	2600      	movs	r6, #0
 80094f8:	603b      	str	r3, [r7, #0]
 80094fa:	4630      	mov	r0, r6
 80094fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009500:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095d4 <_malloc_r+0xfc>
 8009504:	f000 f868 	bl	80095d8 <__malloc_lock>
 8009508:	f8d8 3000 	ldr.w	r3, [r8]
 800950c:	461c      	mov	r4, r3
 800950e:	bb5c      	cbnz	r4, 8009568 <_malloc_r+0x90>
 8009510:	4629      	mov	r1, r5
 8009512:	4638      	mov	r0, r7
 8009514:	f7ff ffc0 	bl	8009498 <sbrk_aligned>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	4604      	mov	r4, r0
 800951c:	d155      	bne.n	80095ca <_malloc_r+0xf2>
 800951e:	f8d8 4000 	ldr.w	r4, [r8]
 8009522:	4626      	mov	r6, r4
 8009524:	2e00      	cmp	r6, #0
 8009526:	d145      	bne.n	80095b4 <_malloc_r+0xdc>
 8009528:	2c00      	cmp	r4, #0
 800952a:	d048      	beq.n	80095be <_malloc_r+0xe6>
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	4631      	mov	r1, r6
 8009530:	4638      	mov	r0, r7
 8009532:	eb04 0903 	add.w	r9, r4, r3
 8009536:	f000 fef1 	bl	800a31c <_sbrk_r>
 800953a:	4581      	cmp	r9, r0
 800953c:	d13f      	bne.n	80095be <_malloc_r+0xe6>
 800953e:	6821      	ldr	r1, [r4, #0]
 8009540:	4638      	mov	r0, r7
 8009542:	1a6d      	subs	r5, r5, r1
 8009544:	4629      	mov	r1, r5
 8009546:	f7ff ffa7 	bl	8009498 <sbrk_aligned>
 800954a:	3001      	adds	r0, #1
 800954c:	d037      	beq.n	80095be <_malloc_r+0xe6>
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	442b      	add	r3, r5
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	f8d8 3000 	ldr.w	r3, [r8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d038      	beq.n	80095ce <_malloc_r+0xf6>
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	42a2      	cmp	r2, r4
 8009560:	d12b      	bne.n	80095ba <_malloc_r+0xe2>
 8009562:	2200      	movs	r2, #0
 8009564:	605a      	str	r2, [r3, #4]
 8009566:	e00f      	b.n	8009588 <_malloc_r+0xb0>
 8009568:	6822      	ldr	r2, [r4, #0]
 800956a:	1b52      	subs	r2, r2, r5
 800956c:	d41f      	bmi.n	80095ae <_malloc_r+0xd6>
 800956e:	2a0b      	cmp	r2, #11
 8009570:	d917      	bls.n	80095a2 <_malloc_r+0xca>
 8009572:	1961      	adds	r1, r4, r5
 8009574:	42a3      	cmp	r3, r4
 8009576:	6025      	str	r5, [r4, #0]
 8009578:	bf18      	it	ne
 800957a:	6059      	strne	r1, [r3, #4]
 800957c:	6863      	ldr	r3, [r4, #4]
 800957e:	bf08      	it	eq
 8009580:	f8c8 1000 	streq.w	r1, [r8]
 8009584:	5162      	str	r2, [r4, r5]
 8009586:	604b      	str	r3, [r1, #4]
 8009588:	4638      	mov	r0, r7
 800958a:	f104 060b 	add.w	r6, r4, #11
 800958e:	f000 f829 	bl	80095e4 <__malloc_unlock>
 8009592:	f026 0607 	bic.w	r6, r6, #7
 8009596:	1d23      	adds	r3, r4, #4
 8009598:	1af2      	subs	r2, r6, r3
 800959a:	d0ae      	beq.n	80094fa <_malloc_r+0x22>
 800959c:	1b9b      	subs	r3, r3, r6
 800959e:	50a3      	str	r3, [r4, r2]
 80095a0:	e7ab      	b.n	80094fa <_malloc_r+0x22>
 80095a2:	42a3      	cmp	r3, r4
 80095a4:	6862      	ldr	r2, [r4, #4]
 80095a6:	d1dd      	bne.n	8009564 <_malloc_r+0x8c>
 80095a8:	f8c8 2000 	str.w	r2, [r8]
 80095ac:	e7ec      	b.n	8009588 <_malloc_r+0xb0>
 80095ae:	4623      	mov	r3, r4
 80095b0:	6864      	ldr	r4, [r4, #4]
 80095b2:	e7ac      	b.n	800950e <_malloc_r+0x36>
 80095b4:	4634      	mov	r4, r6
 80095b6:	6876      	ldr	r6, [r6, #4]
 80095b8:	e7b4      	b.n	8009524 <_malloc_r+0x4c>
 80095ba:	4613      	mov	r3, r2
 80095bc:	e7cc      	b.n	8009558 <_malloc_r+0x80>
 80095be:	230c      	movs	r3, #12
 80095c0:	4638      	mov	r0, r7
 80095c2:	603b      	str	r3, [r7, #0]
 80095c4:	f000 f80e 	bl	80095e4 <__malloc_unlock>
 80095c8:	e797      	b.n	80094fa <_malloc_r+0x22>
 80095ca:	6025      	str	r5, [r4, #0]
 80095cc:	e7dc      	b.n	8009588 <_malloc_r+0xb0>
 80095ce:	605b      	str	r3, [r3, #4]
 80095d0:	deff      	udf	#255	; 0xff
 80095d2:	bf00      	nop
 80095d4:	20000d48 	.word	0x20000d48

080095d8 <__malloc_lock>:
 80095d8:	4801      	ldr	r0, [pc, #4]	; (80095e0 <__malloc_lock+0x8>)
 80095da:	f7ff bf13 	b.w	8009404 <__retarget_lock_acquire_recursive>
 80095de:	bf00      	nop
 80095e0:	20000d44 	.word	0x20000d44

080095e4 <__malloc_unlock>:
 80095e4:	4801      	ldr	r0, [pc, #4]	; (80095ec <__malloc_unlock+0x8>)
 80095e6:	f7ff bf0e 	b.w	8009406 <__retarget_lock_release_recursive>
 80095ea:	bf00      	nop
 80095ec:	20000d44 	.word	0x20000d44

080095f0 <__ssputs_r>:
 80095f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f4:	461f      	mov	r7, r3
 80095f6:	688e      	ldr	r6, [r1, #8]
 80095f8:	4682      	mov	sl, r0
 80095fa:	42be      	cmp	r6, r7
 80095fc:	460c      	mov	r4, r1
 80095fe:	4690      	mov	r8, r2
 8009600:	680b      	ldr	r3, [r1, #0]
 8009602:	d82c      	bhi.n	800965e <__ssputs_r+0x6e>
 8009604:	898a      	ldrh	r2, [r1, #12]
 8009606:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800960a:	d026      	beq.n	800965a <__ssputs_r+0x6a>
 800960c:	6965      	ldr	r5, [r4, #20]
 800960e:	6909      	ldr	r1, [r1, #16]
 8009610:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009614:	eba3 0901 	sub.w	r9, r3, r1
 8009618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800961c:	1c7b      	adds	r3, r7, #1
 800961e:	444b      	add	r3, r9
 8009620:	106d      	asrs	r5, r5, #1
 8009622:	429d      	cmp	r5, r3
 8009624:	bf38      	it	cc
 8009626:	461d      	movcc	r5, r3
 8009628:	0553      	lsls	r3, r2, #21
 800962a:	d527      	bpl.n	800967c <__ssputs_r+0x8c>
 800962c:	4629      	mov	r1, r5
 800962e:	f7ff ff53 	bl	80094d8 <_malloc_r>
 8009632:	4606      	mov	r6, r0
 8009634:	b360      	cbz	r0, 8009690 <__ssputs_r+0xa0>
 8009636:	464a      	mov	r2, r9
 8009638:	6921      	ldr	r1, [r4, #16]
 800963a:	f000 fe8d 	bl	800a358 <memcpy>
 800963e:	89a3      	ldrh	r3, [r4, #12]
 8009640:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009648:	81a3      	strh	r3, [r4, #12]
 800964a:	6126      	str	r6, [r4, #16]
 800964c:	444e      	add	r6, r9
 800964e:	6026      	str	r6, [r4, #0]
 8009650:	463e      	mov	r6, r7
 8009652:	6165      	str	r5, [r4, #20]
 8009654:	eba5 0509 	sub.w	r5, r5, r9
 8009658:	60a5      	str	r5, [r4, #8]
 800965a:	42be      	cmp	r6, r7
 800965c:	d900      	bls.n	8009660 <__ssputs_r+0x70>
 800965e:	463e      	mov	r6, r7
 8009660:	4632      	mov	r2, r6
 8009662:	4641      	mov	r1, r8
 8009664:	6820      	ldr	r0, [r4, #0]
 8009666:	f000 fe3e 	bl	800a2e6 <memmove>
 800966a:	2000      	movs	r0, #0
 800966c:	68a3      	ldr	r3, [r4, #8]
 800966e:	1b9b      	subs	r3, r3, r6
 8009670:	60a3      	str	r3, [r4, #8]
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	4433      	add	r3, r6
 8009676:	6023      	str	r3, [r4, #0]
 8009678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967c:	462a      	mov	r2, r5
 800967e:	f000 fe79 	bl	800a374 <_realloc_r>
 8009682:	4606      	mov	r6, r0
 8009684:	2800      	cmp	r0, #0
 8009686:	d1e0      	bne.n	800964a <__ssputs_r+0x5a>
 8009688:	4650      	mov	r0, sl
 800968a:	6921      	ldr	r1, [r4, #16]
 800968c:	f7ff febc 	bl	8009408 <_free_r>
 8009690:	230c      	movs	r3, #12
 8009692:	f8ca 3000 	str.w	r3, [sl]
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	f04f 30ff 	mov.w	r0, #4294967295
 800969c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096a0:	81a3      	strh	r3, [r4, #12]
 80096a2:	e7e9      	b.n	8009678 <__ssputs_r+0x88>

080096a4 <_svfiprintf_r>:
 80096a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	4698      	mov	r8, r3
 80096aa:	898b      	ldrh	r3, [r1, #12]
 80096ac:	4607      	mov	r7, r0
 80096ae:	061b      	lsls	r3, r3, #24
 80096b0:	460d      	mov	r5, r1
 80096b2:	4614      	mov	r4, r2
 80096b4:	b09d      	sub	sp, #116	; 0x74
 80096b6:	d50e      	bpl.n	80096d6 <_svfiprintf_r+0x32>
 80096b8:	690b      	ldr	r3, [r1, #16]
 80096ba:	b963      	cbnz	r3, 80096d6 <_svfiprintf_r+0x32>
 80096bc:	2140      	movs	r1, #64	; 0x40
 80096be:	f7ff ff0b 	bl	80094d8 <_malloc_r>
 80096c2:	6028      	str	r0, [r5, #0]
 80096c4:	6128      	str	r0, [r5, #16]
 80096c6:	b920      	cbnz	r0, 80096d2 <_svfiprintf_r+0x2e>
 80096c8:	230c      	movs	r3, #12
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	e0d0      	b.n	8009874 <_svfiprintf_r+0x1d0>
 80096d2:	2340      	movs	r3, #64	; 0x40
 80096d4:	616b      	str	r3, [r5, #20]
 80096d6:	2300      	movs	r3, #0
 80096d8:	9309      	str	r3, [sp, #36]	; 0x24
 80096da:	2320      	movs	r3, #32
 80096dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096e0:	2330      	movs	r3, #48	; 0x30
 80096e2:	f04f 0901 	mov.w	r9, #1
 80096e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80096ea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800988c <_svfiprintf_r+0x1e8>
 80096ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096f2:	4623      	mov	r3, r4
 80096f4:	469a      	mov	sl, r3
 80096f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096fa:	b10a      	cbz	r2, 8009700 <_svfiprintf_r+0x5c>
 80096fc:	2a25      	cmp	r2, #37	; 0x25
 80096fe:	d1f9      	bne.n	80096f4 <_svfiprintf_r+0x50>
 8009700:	ebba 0b04 	subs.w	fp, sl, r4
 8009704:	d00b      	beq.n	800971e <_svfiprintf_r+0x7a>
 8009706:	465b      	mov	r3, fp
 8009708:	4622      	mov	r2, r4
 800970a:	4629      	mov	r1, r5
 800970c:	4638      	mov	r0, r7
 800970e:	f7ff ff6f 	bl	80095f0 <__ssputs_r>
 8009712:	3001      	adds	r0, #1
 8009714:	f000 80a9 	beq.w	800986a <_svfiprintf_r+0x1c6>
 8009718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800971a:	445a      	add	r2, fp
 800971c:	9209      	str	r2, [sp, #36]	; 0x24
 800971e:	f89a 3000 	ldrb.w	r3, [sl]
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 80a1 	beq.w	800986a <_svfiprintf_r+0x1c6>
 8009728:	2300      	movs	r3, #0
 800972a:	f04f 32ff 	mov.w	r2, #4294967295
 800972e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009732:	f10a 0a01 	add.w	sl, sl, #1
 8009736:	9304      	str	r3, [sp, #16]
 8009738:	9307      	str	r3, [sp, #28]
 800973a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800973e:	931a      	str	r3, [sp, #104]	; 0x68
 8009740:	4654      	mov	r4, sl
 8009742:	2205      	movs	r2, #5
 8009744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009748:	4850      	ldr	r0, [pc, #320]	; (800988c <_svfiprintf_r+0x1e8>)
 800974a:	f000 fdf7 	bl	800a33c <memchr>
 800974e:	9a04      	ldr	r2, [sp, #16]
 8009750:	b9d8      	cbnz	r0, 800978a <_svfiprintf_r+0xe6>
 8009752:	06d0      	lsls	r0, r2, #27
 8009754:	bf44      	itt	mi
 8009756:	2320      	movmi	r3, #32
 8009758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800975c:	0711      	lsls	r1, r2, #28
 800975e:	bf44      	itt	mi
 8009760:	232b      	movmi	r3, #43	; 0x2b
 8009762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009766:	f89a 3000 	ldrb.w	r3, [sl]
 800976a:	2b2a      	cmp	r3, #42	; 0x2a
 800976c:	d015      	beq.n	800979a <_svfiprintf_r+0xf6>
 800976e:	4654      	mov	r4, sl
 8009770:	2000      	movs	r0, #0
 8009772:	f04f 0c0a 	mov.w	ip, #10
 8009776:	9a07      	ldr	r2, [sp, #28]
 8009778:	4621      	mov	r1, r4
 800977a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800977e:	3b30      	subs	r3, #48	; 0x30
 8009780:	2b09      	cmp	r3, #9
 8009782:	d94d      	bls.n	8009820 <_svfiprintf_r+0x17c>
 8009784:	b1b0      	cbz	r0, 80097b4 <_svfiprintf_r+0x110>
 8009786:	9207      	str	r2, [sp, #28]
 8009788:	e014      	b.n	80097b4 <_svfiprintf_r+0x110>
 800978a:	eba0 0308 	sub.w	r3, r0, r8
 800978e:	fa09 f303 	lsl.w	r3, r9, r3
 8009792:	4313      	orrs	r3, r2
 8009794:	46a2      	mov	sl, r4
 8009796:	9304      	str	r3, [sp, #16]
 8009798:	e7d2      	b.n	8009740 <_svfiprintf_r+0x9c>
 800979a:	9b03      	ldr	r3, [sp, #12]
 800979c:	1d19      	adds	r1, r3, #4
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	9103      	str	r1, [sp, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	bfbb      	ittet	lt
 80097a6:	425b      	neglt	r3, r3
 80097a8:	f042 0202 	orrlt.w	r2, r2, #2
 80097ac:	9307      	strge	r3, [sp, #28]
 80097ae:	9307      	strlt	r3, [sp, #28]
 80097b0:	bfb8      	it	lt
 80097b2:	9204      	strlt	r2, [sp, #16]
 80097b4:	7823      	ldrb	r3, [r4, #0]
 80097b6:	2b2e      	cmp	r3, #46	; 0x2e
 80097b8:	d10c      	bne.n	80097d4 <_svfiprintf_r+0x130>
 80097ba:	7863      	ldrb	r3, [r4, #1]
 80097bc:	2b2a      	cmp	r3, #42	; 0x2a
 80097be:	d134      	bne.n	800982a <_svfiprintf_r+0x186>
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	3402      	adds	r4, #2
 80097c4:	1d1a      	adds	r2, r3, #4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	9203      	str	r2, [sp, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bfb8      	it	lt
 80097ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80097d2:	9305      	str	r3, [sp, #20]
 80097d4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009890 <_svfiprintf_r+0x1ec>
 80097d8:	2203      	movs	r2, #3
 80097da:	4650      	mov	r0, sl
 80097dc:	7821      	ldrb	r1, [r4, #0]
 80097de:	f000 fdad 	bl	800a33c <memchr>
 80097e2:	b138      	cbz	r0, 80097f4 <_svfiprintf_r+0x150>
 80097e4:	2240      	movs	r2, #64	; 0x40
 80097e6:	9b04      	ldr	r3, [sp, #16]
 80097e8:	eba0 000a 	sub.w	r0, r0, sl
 80097ec:	4082      	lsls	r2, r0
 80097ee:	4313      	orrs	r3, r2
 80097f0:	3401      	adds	r4, #1
 80097f2:	9304      	str	r3, [sp, #16]
 80097f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f8:	2206      	movs	r2, #6
 80097fa:	4826      	ldr	r0, [pc, #152]	; (8009894 <_svfiprintf_r+0x1f0>)
 80097fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009800:	f000 fd9c 	bl	800a33c <memchr>
 8009804:	2800      	cmp	r0, #0
 8009806:	d038      	beq.n	800987a <_svfiprintf_r+0x1d6>
 8009808:	4b23      	ldr	r3, [pc, #140]	; (8009898 <_svfiprintf_r+0x1f4>)
 800980a:	bb1b      	cbnz	r3, 8009854 <_svfiprintf_r+0x1b0>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	3307      	adds	r3, #7
 8009810:	f023 0307 	bic.w	r3, r3, #7
 8009814:	3308      	adds	r3, #8
 8009816:	9303      	str	r3, [sp, #12]
 8009818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800981a:	4433      	add	r3, r6
 800981c:	9309      	str	r3, [sp, #36]	; 0x24
 800981e:	e768      	b.n	80096f2 <_svfiprintf_r+0x4e>
 8009820:	460c      	mov	r4, r1
 8009822:	2001      	movs	r0, #1
 8009824:	fb0c 3202 	mla	r2, ip, r2, r3
 8009828:	e7a6      	b.n	8009778 <_svfiprintf_r+0xd4>
 800982a:	2300      	movs	r3, #0
 800982c:	f04f 0c0a 	mov.w	ip, #10
 8009830:	4619      	mov	r1, r3
 8009832:	3401      	adds	r4, #1
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	4620      	mov	r0, r4
 8009838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800983c:	3a30      	subs	r2, #48	; 0x30
 800983e:	2a09      	cmp	r2, #9
 8009840:	d903      	bls.n	800984a <_svfiprintf_r+0x1a6>
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0c6      	beq.n	80097d4 <_svfiprintf_r+0x130>
 8009846:	9105      	str	r1, [sp, #20]
 8009848:	e7c4      	b.n	80097d4 <_svfiprintf_r+0x130>
 800984a:	4604      	mov	r4, r0
 800984c:	2301      	movs	r3, #1
 800984e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009852:	e7f0      	b.n	8009836 <_svfiprintf_r+0x192>
 8009854:	ab03      	add	r3, sp, #12
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	462a      	mov	r2, r5
 800985a:	4638      	mov	r0, r7
 800985c:	4b0f      	ldr	r3, [pc, #60]	; (800989c <_svfiprintf_r+0x1f8>)
 800985e:	a904      	add	r1, sp, #16
 8009860:	f3af 8000 	nop.w
 8009864:	1c42      	adds	r2, r0, #1
 8009866:	4606      	mov	r6, r0
 8009868:	d1d6      	bne.n	8009818 <_svfiprintf_r+0x174>
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	065b      	lsls	r3, r3, #25
 800986e:	f53f af2d 	bmi.w	80096cc <_svfiprintf_r+0x28>
 8009872:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009874:	b01d      	add	sp, #116	; 0x74
 8009876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987a:	ab03      	add	r3, sp, #12
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	462a      	mov	r2, r5
 8009880:	4638      	mov	r0, r7
 8009882:	4b06      	ldr	r3, [pc, #24]	; (800989c <_svfiprintf_r+0x1f8>)
 8009884:	a904      	add	r1, sp, #16
 8009886:	f000 fa4f 	bl	8009d28 <_printf_i>
 800988a:	e7eb      	b.n	8009864 <_svfiprintf_r+0x1c0>
 800988c:	0800a842 	.word	0x0800a842
 8009890:	0800a848 	.word	0x0800a848
 8009894:	0800a84c 	.word	0x0800a84c
 8009898:	00000000 	.word	0x00000000
 800989c:	080095f1 	.word	0x080095f1

080098a0 <_sungetc_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	1c4b      	adds	r3, r1, #1
 80098a4:	4614      	mov	r4, r2
 80098a6:	d103      	bne.n	80098b0 <_sungetc_r+0x10>
 80098a8:	f04f 35ff 	mov.w	r5, #4294967295
 80098ac:	4628      	mov	r0, r5
 80098ae:	bd38      	pop	{r3, r4, r5, pc}
 80098b0:	8993      	ldrh	r3, [r2, #12]
 80098b2:	b2cd      	uxtb	r5, r1
 80098b4:	f023 0320 	bic.w	r3, r3, #32
 80098b8:	8193      	strh	r3, [r2, #12]
 80098ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098bc:	6852      	ldr	r2, [r2, #4]
 80098be:	b18b      	cbz	r3, 80098e4 <_sungetc_r+0x44>
 80098c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80098c2:	4293      	cmp	r3, r2
 80098c4:	dd08      	ble.n	80098d8 <_sungetc_r+0x38>
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	1e5a      	subs	r2, r3, #1
 80098ca:	6022      	str	r2, [r4, #0]
 80098cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80098d0:	6863      	ldr	r3, [r4, #4]
 80098d2:	3301      	adds	r3, #1
 80098d4:	6063      	str	r3, [r4, #4]
 80098d6:	e7e9      	b.n	80098ac <_sungetc_r+0xc>
 80098d8:	4621      	mov	r1, r4
 80098da:	f000 fccc 	bl	800a276 <__submore>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d0f1      	beq.n	80098c6 <_sungetc_r+0x26>
 80098e2:	e7e1      	b.n	80098a8 <_sungetc_r+0x8>
 80098e4:	6921      	ldr	r1, [r4, #16]
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	b151      	cbz	r1, 8009900 <_sungetc_r+0x60>
 80098ea:	4299      	cmp	r1, r3
 80098ec:	d208      	bcs.n	8009900 <_sungetc_r+0x60>
 80098ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80098f2:	42a9      	cmp	r1, r5
 80098f4:	d104      	bne.n	8009900 <_sungetc_r+0x60>
 80098f6:	3b01      	subs	r3, #1
 80098f8:	3201      	adds	r2, #1
 80098fa:	6023      	str	r3, [r4, #0]
 80098fc:	6062      	str	r2, [r4, #4]
 80098fe:	e7d5      	b.n	80098ac <_sungetc_r+0xc>
 8009900:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009908:	6363      	str	r3, [r4, #52]	; 0x34
 800990a:	2303      	movs	r3, #3
 800990c:	63a3      	str	r3, [r4, #56]	; 0x38
 800990e:	4623      	mov	r3, r4
 8009910:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	2301      	movs	r3, #1
 8009918:	e7dc      	b.n	80098d4 <_sungetc_r+0x34>

0800991a <__ssrefill_r>:
 800991a:	b510      	push	{r4, lr}
 800991c:	460c      	mov	r4, r1
 800991e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009920:	b169      	cbz	r1, 800993e <__ssrefill_r+0x24>
 8009922:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009926:	4299      	cmp	r1, r3
 8009928:	d001      	beq.n	800992e <__ssrefill_r+0x14>
 800992a:	f7ff fd6d 	bl	8009408 <_free_r>
 800992e:	2000      	movs	r0, #0
 8009930:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009932:	6360      	str	r0, [r4, #52]	; 0x34
 8009934:	6063      	str	r3, [r4, #4]
 8009936:	b113      	cbz	r3, 800993e <__ssrefill_r+0x24>
 8009938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800993a:	6023      	str	r3, [r4, #0]
 800993c:	bd10      	pop	{r4, pc}
 800993e:	6923      	ldr	r3, [r4, #16]
 8009940:	f04f 30ff 	mov.w	r0, #4294967295
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	2300      	movs	r3, #0
 8009948:	6063      	str	r3, [r4, #4]
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	f043 0320 	orr.w	r3, r3, #32
 8009950:	81a3      	strh	r3, [r4, #12]
 8009952:	e7f3      	b.n	800993c <__ssrefill_r+0x22>

08009954 <__ssvfiscanf_r>:
 8009954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009958:	460c      	mov	r4, r1
 800995a:	2100      	movs	r1, #0
 800995c:	4606      	mov	r6, r0
 800995e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009962:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009966:	49a6      	ldr	r1, [pc, #664]	; (8009c00 <__ssvfiscanf_r+0x2ac>)
 8009968:	f10d 0804 	add.w	r8, sp, #4
 800996c:	91a0      	str	r1, [sp, #640]	; 0x280
 800996e:	49a5      	ldr	r1, [pc, #660]	; (8009c04 <__ssvfiscanf_r+0x2b0>)
 8009970:	4fa5      	ldr	r7, [pc, #660]	; (8009c08 <__ssvfiscanf_r+0x2b4>)
 8009972:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009c0c <__ssvfiscanf_r+0x2b8>
 8009976:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800997a:	91a1      	str	r1, [sp, #644]	; 0x284
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	7813      	ldrb	r3, [r2, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 815a 	beq.w	8009c3a <__ssvfiscanf_r+0x2e6>
 8009986:	5cf9      	ldrb	r1, [r7, r3]
 8009988:	1c55      	adds	r5, r2, #1
 800998a:	f011 0108 	ands.w	r1, r1, #8
 800998e:	d019      	beq.n	80099c4 <__ssvfiscanf_r+0x70>
 8009990:	6863      	ldr	r3, [r4, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	dd0f      	ble.n	80099b6 <__ssvfiscanf_r+0x62>
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	781a      	ldrb	r2, [r3, #0]
 800999a:	5cba      	ldrb	r2, [r7, r2]
 800999c:	0712      	lsls	r2, r2, #28
 800999e:	d401      	bmi.n	80099a4 <__ssvfiscanf_r+0x50>
 80099a0:	462a      	mov	r2, r5
 80099a2:	e7ec      	b.n	800997e <__ssvfiscanf_r+0x2a>
 80099a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80099a6:	3301      	adds	r3, #1
 80099a8:	3201      	adds	r2, #1
 80099aa:	9245      	str	r2, [sp, #276]	; 0x114
 80099ac:	6862      	ldr	r2, [r4, #4]
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	3a01      	subs	r2, #1
 80099b2:	6062      	str	r2, [r4, #4]
 80099b4:	e7ec      	b.n	8009990 <__ssvfiscanf_r+0x3c>
 80099b6:	4621      	mov	r1, r4
 80099b8:	4630      	mov	r0, r6
 80099ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099bc:	4798      	blx	r3
 80099be:	2800      	cmp	r0, #0
 80099c0:	d0e9      	beq.n	8009996 <__ssvfiscanf_r+0x42>
 80099c2:	e7ed      	b.n	80099a0 <__ssvfiscanf_r+0x4c>
 80099c4:	2b25      	cmp	r3, #37	; 0x25
 80099c6:	d012      	beq.n	80099ee <__ssvfiscanf_r+0x9a>
 80099c8:	469a      	mov	sl, r3
 80099ca:	6863      	ldr	r3, [r4, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f340 8092 	ble.w	8009af6 <__ssvfiscanf_r+0x1a2>
 80099d2:	6822      	ldr	r2, [r4, #0]
 80099d4:	7813      	ldrb	r3, [r2, #0]
 80099d6:	4553      	cmp	r3, sl
 80099d8:	f040 812f 	bne.w	8009c3a <__ssvfiscanf_r+0x2e6>
 80099dc:	6863      	ldr	r3, [r4, #4]
 80099de:	3201      	adds	r2, #1
 80099e0:	3b01      	subs	r3, #1
 80099e2:	6063      	str	r3, [r4, #4]
 80099e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80099e6:	6022      	str	r2, [r4, #0]
 80099e8:	3301      	adds	r3, #1
 80099ea:	9345      	str	r3, [sp, #276]	; 0x114
 80099ec:	e7d8      	b.n	80099a0 <__ssvfiscanf_r+0x4c>
 80099ee:	9141      	str	r1, [sp, #260]	; 0x104
 80099f0:	9143      	str	r1, [sp, #268]	; 0x10c
 80099f2:	7853      	ldrb	r3, [r2, #1]
 80099f4:	2b2a      	cmp	r3, #42	; 0x2a
 80099f6:	bf04      	itt	eq
 80099f8:	2310      	moveq	r3, #16
 80099fa:	1c95      	addeq	r5, r2, #2
 80099fc:	f04f 020a 	mov.w	r2, #10
 8009a00:	bf08      	it	eq
 8009a02:	9341      	streq	r3, [sp, #260]	; 0x104
 8009a04:	46aa      	mov	sl, r5
 8009a06:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009a0a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009a0e:	2b09      	cmp	r3, #9
 8009a10:	d91c      	bls.n	8009a4c <__ssvfiscanf_r+0xf8>
 8009a12:	2203      	movs	r2, #3
 8009a14:	487d      	ldr	r0, [pc, #500]	; (8009c0c <__ssvfiscanf_r+0x2b8>)
 8009a16:	f000 fc91 	bl	800a33c <memchr>
 8009a1a:	b138      	cbz	r0, 8009a2c <__ssvfiscanf_r+0xd8>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	4655      	mov	r5, sl
 8009a20:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a22:	eba0 0009 	sub.w	r0, r0, r9
 8009a26:	4083      	lsls	r3, r0
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	9341      	str	r3, [sp, #260]	; 0x104
 8009a2c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a30:	2b78      	cmp	r3, #120	; 0x78
 8009a32:	d806      	bhi.n	8009a42 <__ssvfiscanf_r+0xee>
 8009a34:	2b57      	cmp	r3, #87	; 0x57
 8009a36:	d810      	bhi.n	8009a5a <__ssvfiscanf_r+0x106>
 8009a38:	2b25      	cmp	r3, #37	; 0x25
 8009a3a:	d0c5      	beq.n	80099c8 <__ssvfiscanf_r+0x74>
 8009a3c:	d856      	bhi.n	8009aec <__ssvfiscanf_r+0x198>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d064      	beq.n	8009b0c <__ssvfiscanf_r+0x1b8>
 8009a42:	2303      	movs	r3, #3
 8009a44:	9347      	str	r3, [sp, #284]	; 0x11c
 8009a46:	230a      	movs	r3, #10
 8009a48:	9342      	str	r3, [sp, #264]	; 0x108
 8009a4a:	e075      	b.n	8009b38 <__ssvfiscanf_r+0x1e4>
 8009a4c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009a4e:	4655      	mov	r5, sl
 8009a50:	fb02 1103 	mla	r1, r2, r3, r1
 8009a54:	3930      	subs	r1, #48	; 0x30
 8009a56:	9143      	str	r1, [sp, #268]	; 0x10c
 8009a58:	e7d4      	b.n	8009a04 <__ssvfiscanf_r+0xb0>
 8009a5a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009a5e:	2a20      	cmp	r2, #32
 8009a60:	d8ef      	bhi.n	8009a42 <__ssvfiscanf_r+0xee>
 8009a62:	a101      	add	r1, pc, #4	; (adr r1, 8009a68 <__ssvfiscanf_r+0x114>)
 8009a64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009a68:	08009b1b 	.word	0x08009b1b
 8009a6c:	08009a43 	.word	0x08009a43
 8009a70:	08009a43 	.word	0x08009a43
 8009a74:	08009b79 	.word	0x08009b79
 8009a78:	08009a43 	.word	0x08009a43
 8009a7c:	08009a43 	.word	0x08009a43
 8009a80:	08009a43 	.word	0x08009a43
 8009a84:	08009a43 	.word	0x08009a43
 8009a88:	08009a43 	.word	0x08009a43
 8009a8c:	08009a43 	.word	0x08009a43
 8009a90:	08009a43 	.word	0x08009a43
 8009a94:	08009b8f 	.word	0x08009b8f
 8009a98:	08009b75 	.word	0x08009b75
 8009a9c:	08009af3 	.word	0x08009af3
 8009aa0:	08009af3 	.word	0x08009af3
 8009aa4:	08009af3 	.word	0x08009af3
 8009aa8:	08009a43 	.word	0x08009a43
 8009aac:	08009b31 	.word	0x08009b31
 8009ab0:	08009a43 	.word	0x08009a43
 8009ab4:	08009a43 	.word	0x08009a43
 8009ab8:	08009a43 	.word	0x08009a43
 8009abc:	08009a43 	.word	0x08009a43
 8009ac0:	08009b9f 	.word	0x08009b9f
 8009ac4:	08009b6d 	.word	0x08009b6d
 8009ac8:	08009b13 	.word	0x08009b13
 8009acc:	08009a43 	.word	0x08009a43
 8009ad0:	08009a43 	.word	0x08009a43
 8009ad4:	08009b9b 	.word	0x08009b9b
 8009ad8:	08009a43 	.word	0x08009a43
 8009adc:	08009b75 	.word	0x08009b75
 8009ae0:	08009a43 	.word	0x08009a43
 8009ae4:	08009a43 	.word	0x08009a43
 8009ae8:	08009b1b 	.word	0x08009b1b
 8009aec:	3b45      	subs	r3, #69	; 0x45
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d8a7      	bhi.n	8009a42 <__ssvfiscanf_r+0xee>
 8009af2:	2305      	movs	r3, #5
 8009af4:	e01f      	b.n	8009b36 <__ssvfiscanf_r+0x1e2>
 8009af6:	4621      	mov	r1, r4
 8009af8:	4630      	mov	r0, r6
 8009afa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009afc:	4798      	blx	r3
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f43f af67 	beq.w	80099d2 <__ssvfiscanf_r+0x7e>
 8009b04:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009b06:	2800      	cmp	r0, #0
 8009b08:	f040 808d 	bne.w	8009c26 <__ssvfiscanf_r+0x2d2>
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b10:	e08f      	b.n	8009c32 <__ssvfiscanf_r+0x2de>
 8009b12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009b14:	f042 0220 	orr.w	r2, r2, #32
 8009b18:	9241      	str	r2, [sp, #260]	; 0x104
 8009b1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b20:	9241      	str	r2, [sp, #260]	; 0x104
 8009b22:	2210      	movs	r2, #16
 8009b24:	2b6f      	cmp	r3, #111	; 0x6f
 8009b26:	bf34      	ite	cc
 8009b28:	2303      	movcc	r3, #3
 8009b2a:	2304      	movcs	r3, #4
 8009b2c:	9242      	str	r2, [sp, #264]	; 0x108
 8009b2e:	e002      	b.n	8009b36 <__ssvfiscanf_r+0x1e2>
 8009b30:	2300      	movs	r3, #0
 8009b32:	9342      	str	r3, [sp, #264]	; 0x108
 8009b34:	2303      	movs	r3, #3
 8009b36:	9347      	str	r3, [sp, #284]	; 0x11c
 8009b38:	6863      	ldr	r3, [r4, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	dd3d      	ble.n	8009bba <__ssvfiscanf_r+0x266>
 8009b3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009b40:	0659      	lsls	r1, r3, #25
 8009b42:	d404      	bmi.n	8009b4e <__ssvfiscanf_r+0x1fa>
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	781a      	ldrb	r2, [r3, #0]
 8009b48:	5cba      	ldrb	r2, [r7, r2]
 8009b4a:	0712      	lsls	r2, r2, #28
 8009b4c:	d43c      	bmi.n	8009bc8 <__ssvfiscanf_r+0x274>
 8009b4e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	dc4b      	bgt.n	8009bec <__ssvfiscanf_r+0x298>
 8009b54:	466b      	mov	r3, sp
 8009b56:	4622      	mov	r2, r4
 8009b58:	4630      	mov	r0, r6
 8009b5a:	a941      	add	r1, sp, #260	; 0x104
 8009b5c:	f000 fa06 	bl	8009f6c <_scanf_chars>
 8009b60:	2801      	cmp	r0, #1
 8009b62:	d06a      	beq.n	8009c3a <__ssvfiscanf_r+0x2e6>
 8009b64:	2802      	cmp	r0, #2
 8009b66:	f47f af1b 	bne.w	80099a0 <__ssvfiscanf_r+0x4c>
 8009b6a:	e7cb      	b.n	8009b04 <__ssvfiscanf_r+0x1b0>
 8009b6c:	2308      	movs	r3, #8
 8009b6e:	9342      	str	r3, [sp, #264]	; 0x108
 8009b70:	2304      	movs	r3, #4
 8009b72:	e7e0      	b.n	8009b36 <__ssvfiscanf_r+0x1e2>
 8009b74:	220a      	movs	r2, #10
 8009b76:	e7d5      	b.n	8009b24 <__ssvfiscanf_r+0x1d0>
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	f000 fb42 	bl	800a204 <__sccl>
 8009b80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009b82:	4605      	mov	r5, r0
 8009b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b88:	9341      	str	r3, [sp, #260]	; 0x104
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e7d3      	b.n	8009b36 <__ssvfiscanf_r+0x1e2>
 8009b8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b94:	9341      	str	r3, [sp, #260]	; 0x104
 8009b96:	2300      	movs	r3, #0
 8009b98:	e7cd      	b.n	8009b36 <__ssvfiscanf_r+0x1e2>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e7cb      	b.n	8009b36 <__ssvfiscanf_r+0x1e2>
 8009b9e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009ba0:	06c3      	lsls	r3, r0, #27
 8009ba2:	f53f aefd 	bmi.w	80099a0 <__ssvfiscanf_r+0x4c>
 8009ba6:	9b00      	ldr	r3, [sp, #0]
 8009ba8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009baa:	1d19      	adds	r1, r3, #4
 8009bac:	9100      	str	r1, [sp, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	07c0      	lsls	r0, r0, #31
 8009bb2:	bf4c      	ite	mi
 8009bb4:	801a      	strhmi	r2, [r3, #0]
 8009bb6:	601a      	strpl	r2, [r3, #0]
 8009bb8:	e6f2      	b.n	80099a0 <__ssvfiscanf_r+0x4c>
 8009bba:	4621      	mov	r1, r4
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009bc0:	4798      	blx	r3
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d0bb      	beq.n	8009b3e <__ssvfiscanf_r+0x1ea>
 8009bc6:	e79d      	b.n	8009b04 <__ssvfiscanf_r+0x1b0>
 8009bc8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009bca:	3201      	adds	r2, #1
 8009bcc:	9245      	str	r2, [sp, #276]	; 0x114
 8009bce:	6862      	ldr	r2, [r4, #4]
 8009bd0:	3a01      	subs	r2, #1
 8009bd2:	2a00      	cmp	r2, #0
 8009bd4:	6062      	str	r2, [r4, #4]
 8009bd6:	dd02      	ble.n	8009bde <__ssvfiscanf_r+0x28a>
 8009bd8:	3301      	adds	r3, #1
 8009bda:	6023      	str	r3, [r4, #0]
 8009bdc:	e7b2      	b.n	8009b44 <__ssvfiscanf_r+0x1f0>
 8009bde:	4621      	mov	r1, r4
 8009be0:	4630      	mov	r0, r6
 8009be2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009be4:	4798      	blx	r3
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d0ac      	beq.n	8009b44 <__ssvfiscanf_r+0x1f0>
 8009bea:	e78b      	b.n	8009b04 <__ssvfiscanf_r+0x1b0>
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	dc0f      	bgt.n	8009c10 <__ssvfiscanf_r+0x2bc>
 8009bf0:	466b      	mov	r3, sp
 8009bf2:	4622      	mov	r2, r4
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	a941      	add	r1, sp, #260	; 0x104
 8009bf8:	f000 fa12 	bl	800a020 <_scanf_i>
 8009bfc:	e7b0      	b.n	8009b60 <__ssvfiscanf_r+0x20c>
 8009bfe:	bf00      	nop
 8009c00:	080098a1 	.word	0x080098a1
 8009c04:	0800991b 	.word	0x0800991b
 8009c08:	0800a891 	.word	0x0800a891
 8009c0c:	0800a848 	.word	0x0800a848
 8009c10:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <__ssvfiscanf_r+0x2ec>)
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f43f aec4 	beq.w	80099a0 <__ssvfiscanf_r+0x4c>
 8009c18:	466b      	mov	r3, sp
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	a941      	add	r1, sp, #260	; 0x104
 8009c20:	f3af 8000 	nop.w
 8009c24:	e79c      	b.n	8009b60 <__ssvfiscanf_r+0x20c>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009c2c:	bf18      	it	ne
 8009c2e:	f04f 30ff 	movne.w	r0, #4294967295
 8009c32:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009c3c:	e7f9      	b.n	8009c32 <__ssvfiscanf_r+0x2de>
 8009c3e:	bf00      	nop
 8009c40:	00000000 	.word	0x00000000

08009c44 <_printf_common>:
 8009c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c48:	4616      	mov	r6, r2
 8009c4a:	4699      	mov	r9, r3
 8009c4c:	688a      	ldr	r2, [r1, #8]
 8009c4e:	690b      	ldr	r3, [r1, #16]
 8009c50:	4607      	mov	r7, r0
 8009c52:	4293      	cmp	r3, r2
 8009c54:	bfb8      	it	lt
 8009c56:	4613      	movlt	r3, r2
 8009c58:	6033      	str	r3, [r6, #0]
 8009c5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c5e:	460c      	mov	r4, r1
 8009c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c64:	b10a      	cbz	r2, 8009c6a <_printf_common+0x26>
 8009c66:	3301      	adds	r3, #1
 8009c68:	6033      	str	r3, [r6, #0]
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	0699      	lsls	r1, r3, #26
 8009c6e:	bf42      	ittt	mi
 8009c70:	6833      	ldrmi	r3, [r6, #0]
 8009c72:	3302      	addmi	r3, #2
 8009c74:	6033      	strmi	r3, [r6, #0]
 8009c76:	6825      	ldr	r5, [r4, #0]
 8009c78:	f015 0506 	ands.w	r5, r5, #6
 8009c7c:	d106      	bne.n	8009c8c <_printf_common+0x48>
 8009c7e:	f104 0a19 	add.w	sl, r4, #25
 8009c82:	68e3      	ldr	r3, [r4, #12]
 8009c84:	6832      	ldr	r2, [r6, #0]
 8009c86:	1a9b      	subs	r3, r3, r2
 8009c88:	42ab      	cmp	r3, r5
 8009c8a:	dc2b      	bgt.n	8009ce4 <_printf_common+0xa0>
 8009c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c90:	1e13      	subs	r3, r2, #0
 8009c92:	6822      	ldr	r2, [r4, #0]
 8009c94:	bf18      	it	ne
 8009c96:	2301      	movne	r3, #1
 8009c98:	0692      	lsls	r2, r2, #26
 8009c9a:	d430      	bmi.n	8009cfe <_printf_common+0xba>
 8009c9c:	4649      	mov	r1, r9
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ca4:	47c0      	blx	r8
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	d023      	beq.n	8009cf2 <_printf_common+0xae>
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	6922      	ldr	r2, [r4, #16]
 8009cae:	f003 0306 	and.w	r3, r3, #6
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	bf14      	ite	ne
 8009cb6:	2500      	movne	r5, #0
 8009cb8:	6833      	ldreq	r3, [r6, #0]
 8009cba:	f04f 0600 	mov.w	r6, #0
 8009cbe:	bf08      	it	eq
 8009cc0:	68e5      	ldreq	r5, [r4, #12]
 8009cc2:	f104 041a 	add.w	r4, r4, #26
 8009cc6:	bf08      	it	eq
 8009cc8:	1aed      	subeq	r5, r5, r3
 8009cca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009cce:	bf08      	it	eq
 8009cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	bfc4      	itt	gt
 8009cd8:	1a9b      	subgt	r3, r3, r2
 8009cda:	18ed      	addgt	r5, r5, r3
 8009cdc:	42b5      	cmp	r5, r6
 8009cde:	d11a      	bne.n	8009d16 <_printf_common+0xd2>
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	e008      	b.n	8009cf6 <_printf_common+0xb2>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	4652      	mov	r2, sl
 8009ce8:	4649      	mov	r1, r9
 8009cea:	4638      	mov	r0, r7
 8009cec:	47c0      	blx	r8
 8009cee:	3001      	adds	r0, #1
 8009cf0:	d103      	bne.n	8009cfa <_printf_common+0xb6>
 8009cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfa:	3501      	adds	r5, #1
 8009cfc:	e7c1      	b.n	8009c82 <_printf_common+0x3e>
 8009cfe:	2030      	movs	r0, #48	; 0x30
 8009d00:	18e1      	adds	r1, r4, r3
 8009d02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d0c:	4422      	add	r2, r4
 8009d0e:	3302      	adds	r3, #2
 8009d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d14:	e7c2      	b.n	8009c9c <_printf_common+0x58>
 8009d16:	2301      	movs	r3, #1
 8009d18:	4622      	mov	r2, r4
 8009d1a:	4649      	mov	r1, r9
 8009d1c:	4638      	mov	r0, r7
 8009d1e:	47c0      	blx	r8
 8009d20:	3001      	adds	r0, #1
 8009d22:	d0e6      	beq.n	8009cf2 <_printf_common+0xae>
 8009d24:	3601      	adds	r6, #1
 8009d26:	e7d9      	b.n	8009cdc <_printf_common+0x98>

08009d28 <_printf_i>:
 8009d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	7e0f      	ldrb	r7, [r1, #24]
 8009d2e:	4691      	mov	r9, r2
 8009d30:	2f78      	cmp	r7, #120	; 0x78
 8009d32:	4680      	mov	r8, r0
 8009d34:	460c      	mov	r4, r1
 8009d36:	469a      	mov	sl, r3
 8009d38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d3e:	d807      	bhi.n	8009d50 <_printf_i+0x28>
 8009d40:	2f62      	cmp	r7, #98	; 0x62
 8009d42:	d80a      	bhi.n	8009d5a <_printf_i+0x32>
 8009d44:	2f00      	cmp	r7, #0
 8009d46:	f000 80d5 	beq.w	8009ef4 <_printf_i+0x1cc>
 8009d4a:	2f58      	cmp	r7, #88	; 0x58
 8009d4c:	f000 80c1 	beq.w	8009ed2 <_printf_i+0x1aa>
 8009d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d58:	e03a      	b.n	8009dd0 <_printf_i+0xa8>
 8009d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d5e:	2b15      	cmp	r3, #21
 8009d60:	d8f6      	bhi.n	8009d50 <_printf_i+0x28>
 8009d62:	a101      	add	r1, pc, #4	; (adr r1, 8009d68 <_printf_i+0x40>)
 8009d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d68:	08009dc1 	.word	0x08009dc1
 8009d6c:	08009dd5 	.word	0x08009dd5
 8009d70:	08009d51 	.word	0x08009d51
 8009d74:	08009d51 	.word	0x08009d51
 8009d78:	08009d51 	.word	0x08009d51
 8009d7c:	08009d51 	.word	0x08009d51
 8009d80:	08009dd5 	.word	0x08009dd5
 8009d84:	08009d51 	.word	0x08009d51
 8009d88:	08009d51 	.word	0x08009d51
 8009d8c:	08009d51 	.word	0x08009d51
 8009d90:	08009d51 	.word	0x08009d51
 8009d94:	08009edb 	.word	0x08009edb
 8009d98:	08009e01 	.word	0x08009e01
 8009d9c:	08009e95 	.word	0x08009e95
 8009da0:	08009d51 	.word	0x08009d51
 8009da4:	08009d51 	.word	0x08009d51
 8009da8:	08009efd 	.word	0x08009efd
 8009dac:	08009d51 	.word	0x08009d51
 8009db0:	08009e01 	.word	0x08009e01
 8009db4:	08009d51 	.word	0x08009d51
 8009db8:	08009d51 	.word	0x08009d51
 8009dbc:	08009e9d 	.word	0x08009e9d
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	1d1a      	adds	r2, r3, #4
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	602a      	str	r2, [r5, #0]
 8009dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e0a0      	b.n	8009f16 <_printf_i+0x1ee>
 8009dd4:	6820      	ldr	r0, [r4, #0]
 8009dd6:	682b      	ldr	r3, [r5, #0]
 8009dd8:	0607      	lsls	r7, r0, #24
 8009dda:	f103 0104 	add.w	r1, r3, #4
 8009dde:	6029      	str	r1, [r5, #0]
 8009de0:	d501      	bpl.n	8009de6 <_printf_i+0xbe>
 8009de2:	681e      	ldr	r6, [r3, #0]
 8009de4:	e003      	b.n	8009dee <_printf_i+0xc6>
 8009de6:	0646      	lsls	r6, r0, #25
 8009de8:	d5fb      	bpl.n	8009de2 <_printf_i+0xba>
 8009dea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009dee:	2e00      	cmp	r6, #0
 8009df0:	da03      	bge.n	8009dfa <_printf_i+0xd2>
 8009df2:	232d      	movs	r3, #45	; 0x2d
 8009df4:	4276      	negs	r6, r6
 8009df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dfa:	230a      	movs	r3, #10
 8009dfc:	4859      	ldr	r0, [pc, #356]	; (8009f64 <_printf_i+0x23c>)
 8009dfe:	e012      	b.n	8009e26 <_printf_i+0xfe>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	6820      	ldr	r0, [r4, #0]
 8009e04:	1d19      	adds	r1, r3, #4
 8009e06:	6029      	str	r1, [r5, #0]
 8009e08:	0605      	lsls	r5, r0, #24
 8009e0a:	d501      	bpl.n	8009e10 <_printf_i+0xe8>
 8009e0c:	681e      	ldr	r6, [r3, #0]
 8009e0e:	e002      	b.n	8009e16 <_printf_i+0xee>
 8009e10:	0641      	lsls	r1, r0, #25
 8009e12:	d5fb      	bpl.n	8009e0c <_printf_i+0xe4>
 8009e14:	881e      	ldrh	r6, [r3, #0]
 8009e16:	2f6f      	cmp	r7, #111	; 0x6f
 8009e18:	bf0c      	ite	eq
 8009e1a:	2308      	moveq	r3, #8
 8009e1c:	230a      	movne	r3, #10
 8009e1e:	4851      	ldr	r0, [pc, #324]	; (8009f64 <_printf_i+0x23c>)
 8009e20:	2100      	movs	r1, #0
 8009e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e26:	6865      	ldr	r5, [r4, #4]
 8009e28:	2d00      	cmp	r5, #0
 8009e2a:	bfa8      	it	ge
 8009e2c:	6821      	ldrge	r1, [r4, #0]
 8009e2e:	60a5      	str	r5, [r4, #8]
 8009e30:	bfa4      	itt	ge
 8009e32:	f021 0104 	bicge.w	r1, r1, #4
 8009e36:	6021      	strge	r1, [r4, #0]
 8009e38:	b90e      	cbnz	r6, 8009e3e <_printf_i+0x116>
 8009e3a:	2d00      	cmp	r5, #0
 8009e3c:	d04b      	beq.n	8009ed6 <_printf_i+0x1ae>
 8009e3e:	4615      	mov	r5, r2
 8009e40:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e44:	fb03 6711 	mls	r7, r3, r1, r6
 8009e48:	5dc7      	ldrb	r7, [r0, r7]
 8009e4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e4e:	4637      	mov	r7, r6
 8009e50:	42bb      	cmp	r3, r7
 8009e52:	460e      	mov	r6, r1
 8009e54:	d9f4      	bls.n	8009e40 <_printf_i+0x118>
 8009e56:	2b08      	cmp	r3, #8
 8009e58:	d10b      	bne.n	8009e72 <_printf_i+0x14a>
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	07de      	lsls	r6, r3, #31
 8009e5e:	d508      	bpl.n	8009e72 <_printf_i+0x14a>
 8009e60:	6923      	ldr	r3, [r4, #16]
 8009e62:	6861      	ldr	r1, [r4, #4]
 8009e64:	4299      	cmp	r1, r3
 8009e66:	bfde      	ittt	le
 8009e68:	2330      	movle	r3, #48	; 0x30
 8009e6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e72:	1b52      	subs	r2, r2, r5
 8009e74:	6122      	str	r2, [r4, #16]
 8009e76:	464b      	mov	r3, r9
 8009e78:	4621      	mov	r1, r4
 8009e7a:	4640      	mov	r0, r8
 8009e7c:	f8cd a000 	str.w	sl, [sp]
 8009e80:	aa03      	add	r2, sp, #12
 8009e82:	f7ff fedf 	bl	8009c44 <_printf_common>
 8009e86:	3001      	adds	r0, #1
 8009e88:	d14a      	bne.n	8009f20 <_printf_i+0x1f8>
 8009e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8e:	b004      	add	sp, #16
 8009e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	f043 0320 	orr.w	r3, r3, #32
 8009e9a:	6023      	str	r3, [r4, #0]
 8009e9c:	2778      	movs	r7, #120	; 0x78
 8009e9e:	4832      	ldr	r0, [pc, #200]	; (8009f68 <_printf_i+0x240>)
 8009ea0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	6829      	ldr	r1, [r5, #0]
 8009ea8:	061f      	lsls	r7, r3, #24
 8009eaa:	f851 6b04 	ldr.w	r6, [r1], #4
 8009eae:	d402      	bmi.n	8009eb6 <_printf_i+0x18e>
 8009eb0:	065f      	lsls	r7, r3, #25
 8009eb2:	bf48      	it	mi
 8009eb4:	b2b6      	uxthmi	r6, r6
 8009eb6:	07df      	lsls	r7, r3, #31
 8009eb8:	bf48      	it	mi
 8009eba:	f043 0320 	orrmi.w	r3, r3, #32
 8009ebe:	6029      	str	r1, [r5, #0]
 8009ec0:	bf48      	it	mi
 8009ec2:	6023      	strmi	r3, [r4, #0]
 8009ec4:	b91e      	cbnz	r6, 8009ece <_printf_i+0x1a6>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	f023 0320 	bic.w	r3, r3, #32
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	2310      	movs	r3, #16
 8009ed0:	e7a6      	b.n	8009e20 <_printf_i+0xf8>
 8009ed2:	4824      	ldr	r0, [pc, #144]	; (8009f64 <_printf_i+0x23c>)
 8009ed4:	e7e4      	b.n	8009ea0 <_printf_i+0x178>
 8009ed6:	4615      	mov	r5, r2
 8009ed8:	e7bd      	b.n	8009e56 <_printf_i+0x12e>
 8009eda:	682b      	ldr	r3, [r5, #0]
 8009edc:	6826      	ldr	r6, [r4, #0]
 8009ede:	1d18      	adds	r0, r3, #4
 8009ee0:	6961      	ldr	r1, [r4, #20]
 8009ee2:	6028      	str	r0, [r5, #0]
 8009ee4:	0635      	lsls	r5, r6, #24
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	d501      	bpl.n	8009eee <_printf_i+0x1c6>
 8009eea:	6019      	str	r1, [r3, #0]
 8009eec:	e002      	b.n	8009ef4 <_printf_i+0x1cc>
 8009eee:	0670      	lsls	r0, r6, #25
 8009ef0:	d5fb      	bpl.n	8009eea <_printf_i+0x1c2>
 8009ef2:	8019      	strh	r1, [r3, #0]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4615      	mov	r5, r2
 8009ef8:	6123      	str	r3, [r4, #16]
 8009efa:	e7bc      	b.n	8009e76 <_printf_i+0x14e>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	2100      	movs	r1, #0
 8009f00:	1d1a      	adds	r2, r3, #4
 8009f02:	602a      	str	r2, [r5, #0]
 8009f04:	681d      	ldr	r5, [r3, #0]
 8009f06:	6862      	ldr	r2, [r4, #4]
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f000 fa17 	bl	800a33c <memchr>
 8009f0e:	b108      	cbz	r0, 8009f14 <_printf_i+0x1ec>
 8009f10:	1b40      	subs	r0, r0, r5
 8009f12:	6060      	str	r0, [r4, #4]
 8009f14:	6863      	ldr	r3, [r4, #4]
 8009f16:	6123      	str	r3, [r4, #16]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f1e:	e7aa      	b.n	8009e76 <_printf_i+0x14e>
 8009f20:	462a      	mov	r2, r5
 8009f22:	4649      	mov	r1, r9
 8009f24:	4640      	mov	r0, r8
 8009f26:	6923      	ldr	r3, [r4, #16]
 8009f28:	47d0      	blx	sl
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d0ad      	beq.n	8009e8a <_printf_i+0x162>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	079b      	lsls	r3, r3, #30
 8009f32:	d413      	bmi.n	8009f5c <_printf_i+0x234>
 8009f34:	68e0      	ldr	r0, [r4, #12]
 8009f36:	9b03      	ldr	r3, [sp, #12]
 8009f38:	4298      	cmp	r0, r3
 8009f3a:	bfb8      	it	lt
 8009f3c:	4618      	movlt	r0, r3
 8009f3e:	e7a6      	b.n	8009e8e <_printf_i+0x166>
 8009f40:	2301      	movs	r3, #1
 8009f42:	4632      	mov	r2, r6
 8009f44:	4649      	mov	r1, r9
 8009f46:	4640      	mov	r0, r8
 8009f48:	47d0      	blx	sl
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	d09d      	beq.n	8009e8a <_printf_i+0x162>
 8009f4e:	3501      	adds	r5, #1
 8009f50:	68e3      	ldr	r3, [r4, #12]
 8009f52:	9903      	ldr	r1, [sp, #12]
 8009f54:	1a5b      	subs	r3, r3, r1
 8009f56:	42ab      	cmp	r3, r5
 8009f58:	dcf2      	bgt.n	8009f40 <_printf_i+0x218>
 8009f5a:	e7eb      	b.n	8009f34 <_printf_i+0x20c>
 8009f5c:	2500      	movs	r5, #0
 8009f5e:	f104 0619 	add.w	r6, r4, #25
 8009f62:	e7f5      	b.n	8009f50 <_printf_i+0x228>
 8009f64:	0800a853 	.word	0x0800a853
 8009f68:	0800a864 	.word	0x0800a864

08009f6c <_scanf_chars>:
 8009f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f70:	4615      	mov	r5, r2
 8009f72:	688a      	ldr	r2, [r1, #8]
 8009f74:	4680      	mov	r8, r0
 8009f76:	460c      	mov	r4, r1
 8009f78:	b932      	cbnz	r2, 8009f88 <_scanf_chars+0x1c>
 8009f7a:	698a      	ldr	r2, [r1, #24]
 8009f7c:	2a00      	cmp	r2, #0
 8009f7e:	bf0c      	ite	eq
 8009f80:	2201      	moveq	r2, #1
 8009f82:	f04f 32ff 	movne.w	r2, #4294967295
 8009f86:	608a      	str	r2, [r1, #8]
 8009f88:	2700      	movs	r7, #0
 8009f8a:	6822      	ldr	r2, [r4, #0]
 8009f8c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a01c <_scanf_chars+0xb0>
 8009f90:	06d1      	lsls	r1, r2, #27
 8009f92:	bf5f      	itttt	pl
 8009f94:	681a      	ldrpl	r2, [r3, #0]
 8009f96:	1d11      	addpl	r1, r2, #4
 8009f98:	6019      	strpl	r1, [r3, #0]
 8009f9a:	6816      	ldrpl	r6, [r2, #0]
 8009f9c:	69a0      	ldr	r0, [r4, #24]
 8009f9e:	b188      	cbz	r0, 8009fc4 <_scanf_chars+0x58>
 8009fa0:	2801      	cmp	r0, #1
 8009fa2:	d107      	bne.n	8009fb4 <_scanf_chars+0x48>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	781a      	ldrb	r2, [r3, #0]
 8009fa8:	6963      	ldr	r3, [r4, #20]
 8009faa:	5c9b      	ldrb	r3, [r3, r2]
 8009fac:	b953      	cbnz	r3, 8009fc4 <_scanf_chars+0x58>
 8009fae:	2f00      	cmp	r7, #0
 8009fb0:	d031      	beq.n	800a016 <_scanf_chars+0xaa>
 8009fb2:	e022      	b.n	8009ffa <_scanf_chars+0x8e>
 8009fb4:	2802      	cmp	r0, #2
 8009fb6:	d120      	bne.n	8009ffa <_scanf_chars+0x8e>
 8009fb8:	682b      	ldr	r3, [r5, #0]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009fc0:	071b      	lsls	r3, r3, #28
 8009fc2:	d41a      	bmi.n	8009ffa <_scanf_chars+0x8e>
 8009fc4:	6823      	ldr	r3, [r4, #0]
 8009fc6:	3701      	adds	r7, #1
 8009fc8:	06da      	lsls	r2, r3, #27
 8009fca:	bf5e      	ittt	pl
 8009fcc:	682b      	ldrpl	r3, [r5, #0]
 8009fce:	781b      	ldrbpl	r3, [r3, #0]
 8009fd0:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009fd4:	682a      	ldr	r2, [r5, #0]
 8009fd6:	686b      	ldr	r3, [r5, #4]
 8009fd8:	3201      	adds	r2, #1
 8009fda:	602a      	str	r2, [r5, #0]
 8009fdc:	68a2      	ldr	r2, [r4, #8]
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	3a01      	subs	r2, #1
 8009fe2:	606b      	str	r3, [r5, #4]
 8009fe4:	60a2      	str	r2, [r4, #8]
 8009fe6:	b142      	cbz	r2, 8009ffa <_scanf_chars+0x8e>
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	dcd7      	bgt.n	8009f9c <_scanf_chars+0x30>
 8009fec:	4629      	mov	r1, r5
 8009fee:	4640      	mov	r0, r8
 8009ff0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ff4:	4798      	blx	r3
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d0d0      	beq.n	8009f9c <_scanf_chars+0x30>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	f013 0310 	ands.w	r3, r3, #16
 800a000:	d105      	bne.n	800a00e <_scanf_chars+0xa2>
 800a002:	68e2      	ldr	r2, [r4, #12]
 800a004:	3201      	adds	r2, #1
 800a006:	60e2      	str	r2, [r4, #12]
 800a008:	69a2      	ldr	r2, [r4, #24]
 800a00a:	b102      	cbz	r2, 800a00e <_scanf_chars+0xa2>
 800a00c:	7033      	strb	r3, [r6, #0]
 800a00e:	2000      	movs	r0, #0
 800a010:	6923      	ldr	r3, [r4, #16]
 800a012:	443b      	add	r3, r7
 800a014:	6123      	str	r3, [r4, #16]
 800a016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a01a:	bf00      	nop
 800a01c:	0800a891 	.word	0x0800a891

0800a020 <_scanf_i>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	460c      	mov	r4, r1
 800a026:	4698      	mov	r8, r3
 800a028:	4b72      	ldr	r3, [pc, #456]	; (800a1f4 <_scanf_i+0x1d4>)
 800a02a:	b087      	sub	sp, #28
 800a02c:	4682      	mov	sl, r0
 800a02e:	4616      	mov	r6, r2
 800a030:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a034:	ab03      	add	r3, sp, #12
 800a036:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a03a:	4b6f      	ldr	r3, [pc, #444]	; (800a1f8 <_scanf_i+0x1d8>)
 800a03c:	69a1      	ldr	r1, [r4, #24]
 800a03e:	4a6f      	ldr	r2, [pc, #444]	; (800a1fc <_scanf_i+0x1dc>)
 800a040:	4627      	mov	r7, r4
 800a042:	2903      	cmp	r1, #3
 800a044:	bf18      	it	ne
 800a046:	461a      	movne	r2, r3
 800a048:	68a3      	ldr	r3, [r4, #8]
 800a04a:	9201      	str	r2, [sp, #4]
 800a04c:	1e5a      	subs	r2, r3, #1
 800a04e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a052:	bf81      	itttt	hi
 800a054:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a058:	eb03 0905 	addhi.w	r9, r3, r5
 800a05c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a060:	60a3      	strhi	r3, [r4, #8]
 800a062:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a066:	bf98      	it	ls
 800a068:	f04f 0900 	movls.w	r9, #0
 800a06c:	463d      	mov	r5, r7
 800a06e:	f04f 0b00 	mov.w	fp, #0
 800a072:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a076:	6023      	str	r3, [r4, #0]
 800a078:	6831      	ldr	r1, [r6, #0]
 800a07a:	ab03      	add	r3, sp, #12
 800a07c:	2202      	movs	r2, #2
 800a07e:	7809      	ldrb	r1, [r1, #0]
 800a080:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a084:	f000 f95a 	bl	800a33c <memchr>
 800a088:	b328      	cbz	r0, 800a0d6 <_scanf_i+0xb6>
 800a08a:	f1bb 0f01 	cmp.w	fp, #1
 800a08e:	d159      	bne.n	800a144 <_scanf_i+0x124>
 800a090:	6862      	ldr	r2, [r4, #4]
 800a092:	b92a      	cbnz	r2, 800a0a0 <_scanf_i+0x80>
 800a094:	2308      	movs	r3, #8
 800a096:	6822      	ldr	r2, [r4, #0]
 800a098:	6063      	str	r3, [r4, #4]
 800a09a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a09e:	6022      	str	r2, [r4, #0]
 800a0a0:	6822      	ldr	r2, [r4, #0]
 800a0a2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a0a6:	6022      	str	r2, [r4, #0]
 800a0a8:	68a2      	ldr	r2, [r4, #8]
 800a0aa:	1e51      	subs	r1, r2, #1
 800a0ac:	60a1      	str	r1, [r4, #8]
 800a0ae:	b192      	cbz	r2, 800a0d6 <_scanf_i+0xb6>
 800a0b0:	6832      	ldr	r2, [r6, #0]
 800a0b2:	1c51      	adds	r1, r2, #1
 800a0b4:	6031      	str	r1, [r6, #0]
 800a0b6:	7812      	ldrb	r2, [r2, #0]
 800a0b8:	f805 2b01 	strb.w	r2, [r5], #1
 800a0bc:	6872      	ldr	r2, [r6, #4]
 800a0be:	3a01      	subs	r2, #1
 800a0c0:	2a00      	cmp	r2, #0
 800a0c2:	6072      	str	r2, [r6, #4]
 800a0c4:	dc07      	bgt.n	800a0d6 <_scanf_i+0xb6>
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4650      	mov	r0, sl
 800a0ca:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a0ce:	4790      	blx	r2
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	f040 8085 	bne.w	800a1e0 <_scanf_i+0x1c0>
 800a0d6:	f10b 0b01 	add.w	fp, fp, #1
 800a0da:	f1bb 0f03 	cmp.w	fp, #3
 800a0de:	d1cb      	bne.n	800a078 <_scanf_i+0x58>
 800a0e0:	6863      	ldr	r3, [r4, #4]
 800a0e2:	b90b      	cbnz	r3, 800a0e8 <_scanf_i+0xc8>
 800a0e4:	230a      	movs	r3, #10
 800a0e6:	6063      	str	r3, [r4, #4]
 800a0e8:	6863      	ldr	r3, [r4, #4]
 800a0ea:	4945      	ldr	r1, [pc, #276]	; (800a200 <_scanf_i+0x1e0>)
 800a0ec:	6960      	ldr	r0, [r4, #20]
 800a0ee:	1ac9      	subs	r1, r1, r3
 800a0f0:	f000 f888 	bl	800a204 <__sccl>
 800a0f4:	f04f 0b00 	mov.w	fp, #0
 800a0f8:	68a3      	ldr	r3, [r4, #8]
 800a0fa:	6822      	ldr	r2, [r4, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d03d      	beq.n	800a17c <_scanf_i+0x15c>
 800a100:	6831      	ldr	r1, [r6, #0]
 800a102:	6960      	ldr	r0, [r4, #20]
 800a104:	f891 c000 	ldrb.w	ip, [r1]
 800a108:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d035      	beq.n	800a17c <_scanf_i+0x15c>
 800a110:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a114:	d124      	bne.n	800a160 <_scanf_i+0x140>
 800a116:	0510      	lsls	r0, r2, #20
 800a118:	d522      	bpl.n	800a160 <_scanf_i+0x140>
 800a11a:	f10b 0b01 	add.w	fp, fp, #1
 800a11e:	f1b9 0f00 	cmp.w	r9, #0
 800a122:	d003      	beq.n	800a12c <_scanf_i+0x10c>
 800a124:	3301      	adds	r3, #1
 800a126:	f109 39ff 	add.w	r9, r9, #4294967295
 800a12a:	60a3      	str	r3, [r4, #8]
 800a12c:	6873      	ldr	r3, [r6, #4]
 800a12e:	3b01      	subs	r3, #1
 800a130:	2b00      	cmp	r3, #0
 800a132:	6073      	str	r3, [r6, #4]
 800a134:	dd1b      	ble.n	800a16e <_scanf_i+0x14e>
 800a136:	6833      	ldr	r3, [r6, #0]
 800a138:	3301      	adds	r3, #1
 800a13a:	6033      	str	r3, [r6, #0]
 800a13c:	68a3      	ldr	r3, [r4, #8]
 800a13e:	3b01      	subs	r3, #1
 800a140:	60a3      	str	r3, [r4, #8]
 800a142:	e7d9      	b.n	800a0f8 <_scanf_i+0xd8>
 800a144:	f1bb 0f02 	cmp.w	fp, #2
 800a148:	d1ae      	bne.n	800a0a8 <_scanf_i+0x88>
 800a14a:	6822      	ldr	r2, [r4, #0]
 800a14c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a150:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a154:	d1bf      	bne.n	800a0d6 <_scanf_i+0xb6>
 800a156:	2310      	movs	r3, #16
 800a158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a15c:	6063      	str	r3, [r4, #4]
 800a15e:	e7a2      	b.n	800a0a6 <_scanf_i+0x86>
 800a160:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a164:	6022      	str	r2, [r4, #0]
 800a166:	780b      	ldrb	r3, [r1, #0]
 800a168:	f805 3b01 	strb.w	r3, [r5], #1
 800a16c:	e7de      	b.n	800a12c <_scanf_i+0x10c>
 800a16e:	4631      	mov	r1, r6
 800a170:	4650      	mov	r0, sl
 800a172:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a176:	4798      	blx	r3
 800a178:	2800      	cmp	r0, #0
 800a17a:	d0df      	beq.n	800a13c <_scanf_i+0x11c>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	05d9      	lsls	r1, r3, #23
 800a180:	d50d      	bpl.n	800a19e <_scanf_i+0x17e>
 800a182:	42bd      	cmp	r5, r7
 800a184:	d909      	bls.n	800a19a <_scanf_i+0x17a>
 800a186:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a18a:	4632      	mov	r2, r6
 800a18c:	4650      	mov	r0, sl
 800a18e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a192:	f105 39ff 	add.w	r9, r5, #4294967295
 800a196:	4798      	blx	r3
 800a198:	464d      	mov	r5, r9
 800a19a:	42bd      	cmp	r5, r7
 800a19c:	d028      	beq.n	800a1f0 <_scanf_i+0x1d0>
 800a19e:	6822      	ldr	r2, [r4, #0]
 800a1a0:	f012 0210 	ands.w	r2, r2, #16
 800a1a4:	d113      	bne.n	800a1ce <_scanf_i+0x1ae>
 800a1a6:	702a      	strb	r2, [r5, #0]
 800a1a8:	4639      	mov	r1, r7
 800a1aa:	6863      	ldr	r3, [r4, #4]
 800a1ac:	4650      	mov	r0, sl
 800a1ae:	9e01      	ldr	r6, [sp, #4]
 800a1b0:	47b0      	blx	r6
 800a1b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b6:	6821      	ldr	r1, [r4, #0]
 800a1b8:	1d1a      	adds	r2, r3, #4
 800a1ba:	f8c8 2000 	str.w	r2, [r8]
 800a1be:	f011 0f20 	tst.w	r1, #32
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	d00f      	beq.n	800a1e6 <_scanf_i+0x1c6>
 800a1c6:	6018      	str	r0, [r3, #0]
 800a1c8:	68e3      	ldr	r3, [r4, #12]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	60e3      	str	r3, [r4, #12]
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	1bed      	subs	r5, r5, r7
 800a1d4:	445d      	add	r5, fp
 800a1d6:	442b      	add	r3, r5
 800a1d8:	6123      	str	r3, [r4, #16]
 800a1da:	b007      	add	sp, #28
 800a1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e0:	f04f 0b00 	mov.w	fp, #0
 800a1e4:	e7ca      	b.n	800a17c <_scanf_i+0x15c>
 800a1e6:	07ca      	lsls	r2, r1, #31
 800a1e8:	bf4c      	ite	mi
 800a1ea:	8018      	strhmi	r0, [r3, #0]
 800a1ec:	6018      	strpl	r0, [r3, #0]
 800a1ee:	e7eb      	b.n	800a1c8 <_scanf_i+0x1a8>
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	e7f2      	b.n	800a1da <_scanf_i+0x1ba>
 800a1f4:	0800a80c 	.word	0x0800a80c
 800a1f8:	0800a5b9 	.word	0x0800a5b9
 800a1fc:	0800a4d1 	.word	0x0800a4d1
 800a200:	0800a885 	.word	0x0800a885

0800a204 <__sccl>:
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	780b      	ldrb	r3, [r1, #0]
 800a208:	4604      	mov	r4, r0
 800a20a:	2b5e      	cmp	r3, #94	; 0x5e
 800a20c:	bf0b      	itete	eq
 800a20e:	784b      	ldrbeq	r3, [r1, #1]
 800a210:	1c4a      	addne	r2, r1, #1
 800a212:	1c8a      	addeq	r2, r1, #2
 800a214:	2100      	movne	r1, #0
 800a216:	bf08      	it	eq
 800a218:	2101      	moveq	r1, #1
 800a21a:	3801      	subs	r0, #1
 800a21c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a220:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a224:	42a8      	cmp	r0, r5
 800a226:	d1fb      	bne.n	800a220 <__sccl+0x1c>
 800a228:	b90b      	cbnz	r3, 800a22e <__sccl+0x2a>
 800a22a:	1e50      	subs	r0, r2, #1
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
 800a22e:	f081 0101 	eor.w	r1, r1, #1
 800a232:	4610      	mov	r0, r2
 800a234:	54e1      	strb	r1, [r4, r3]
 800a236:	4602      	mov	r2, r0
 800a238:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a23c:	2d2d      	cmp	r5, #45	; 0x2d
 800a23e:	d005      	beq.n	800a24c <__sccl+0x48>
 800a240:	2d5d      	cmp	r5, #93	; 0x5d
 800a242:	d016      	beq.n	800a272 <__sccl+0x6e>
 800a244:	2d00      	cmp	r5, #0
 800a246:	d0f1      	beq.n	800a22c <__sccl+0x28>
 800a248:	462b      	mov	r3, r5
 800a24a:	e7f2      	b.n	800a232 <__sccl+0x2e>
 800a24c:	7846      	ldrb	r6, [r0, #1]
 800a24e:	2e5d      	cmp	r6, #93	; 0x5d
 800a250:	d0fa      	beq.n	800a248 <__sccl+0x44>
 800a252:	42b3      	cmp	r3, r6
 800a254:	dcf8      	bgt.n	800a248 <__sccl+0x44>
 800a256:	461a      	mov	r2, r3
 800a258:	3002      	adds	r0, #2
 800a25a:	3201      	adds	r2, #1
 800a25c:	4296      	cmp	r6, r2
 800a25e:	54a1      	strb	r1, [r4, r2]
 800a260:	dcfb      	bgt.n	800a25a <__sccl+0x56>
 800a262:	1af2      	subs	r2, r6, r3
 800a264:	3a01      	subs	r2, #1
 800a266:	42b3      	cmp	r3, r6
 800a268:	bfa8      	it	ge
 800a26a:	2200      	movge	r2, #0
 800a26c:	1c5d      	adds	r5, r3, #1
 800a26e:	18ab      	adds	r3, r5, r2
 800a270:	e7e1      	b.n	800a236 <__sccl+0x32>
 800a272:	4610      	mov	r0, r2
 800a274:	e7da      	b.n	800a22c <__sccl+0x28>

0800a276 <__submore>:
 800a276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27a:	460c      	mov	r4, r1
 800a27c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a27e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a282:	4299      	cmp	r1, r3
 800a284:	d11b      	bne.n	800a2be <__submore+0x48>
 800a286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a28a:	f7ff f925 	bl	80094d8 <_malloc_r>
 800a28e:	b918      	cbnz	r0, 800a298 <__submore+0x22>
 800a290:	f04f 30ff 	mov.w	r0, #4294967295
 800a294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a29c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a29e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a2a2:	6360      	str	r0, [r4, #52]	; 0x34
 800a2a4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a2a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a2ac:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a2b0:	7043      	strb	r3, [r0, #1]
 800a2b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a2b6:	7003      	strb	r3, [r0, #0]
 800a2b8:	6020      	str	r0, [r4, #0]
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	e7ea      	b.n	800a294 <__submore+0x1e>
 800a2be:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a2c0:	0077      	lsls	r7, r6, #1
 800a2c2:	463a      	mov	r2, r7
 800a2c4:	f000 f856 	bl	800a374 <_realloc_r>
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d0e0      	beq.n	800a290 <__submore+0x1a>
 800a2ce:	eb00 0806 	add.w	r8, r0, r6
 800a2d2:	4601      	mov	r1, r0
 800a2d4:	4632      	mov	r2, r6
 800a2d6:	4640      	mov	r0, r8
 800a2d8:	f000 f83e 	bl	800a358 <memcpy>
 800a2dc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a2e0:	f8c4 8000 	str.w	r8, [r4]
 800a2e4:	e7e9      	b.n	800a2ba <__submore+0x44>

0800a2e6 <memmove>:
 800a2e6:	4288      	cmp	r0, r1
 800a2e8:	b510      	push	{r4, lr}
 800a2ea:	eb01 0402 	add.w	r4, r1, r2
 800a2ee:	d902      	bls.n	800a2f6 <memmove+0x10>
 800a2f0:	4284      	cmp	r4, r0
 800a2f2:	4623      	mov	r3, r4
 800a2f4:	d807      	bhi.n	800a306 <memmove+0x20>
 800a2f6:	1e43      	subs	r3, r0, #1
 800a2f8:	42a1      	cmp	r1, r4
 800a2fa:	d008      	beq.n	800a30e <memmove+0x28>
 800a2fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a300:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a304:	e7f8      	b.n	800a2f8 <memmove+0x12>
 800a306:	4601      	mov	r1, r0
 800a308:	4402      	add	r2, r0
 800a30a:	428a      	cmp	r2, r1
 800a30c:	d100      	bne.n	800a310 <memmove+0x2a>
 800a30e:	bd10      	pop	{r4, pc}
 800a310:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a314:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a318:	e7f7      	b.n	800a30a <memmove+0x24>
	...

0800a31c <_sbrk_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	2300      	movs	r3, #0
 800a320:	4d05      	ldr	r5, [pc, #20]	; (800a338 <_sbrk_r+0x1c>)
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	602b      	str	r3, [r5, #0]
 800a328:	f7fa fc48 	bl	8004bbc <_sbrk>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d102      	bne.n	800a336 <_sbrk_r+0x1a>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	b103      	cbz	r3, 800a336 <_sbrk_r+0x1a>
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	bd38      	pop	{r3, r4, r5, pc}
 800a338:	20000d40 	.word	0x20000d40

0800a33c <memchr>:
 800a33c:	4603      	mov	r3, r0
 800a33e:	b510      	push	{r4, lr}
 800a340:	b2c9      	uxtb	r1, r1
 800a342:	4402      	add	r2, r0
 800a344:	4293      	cmp	r3, r2
 800a346:	4618      	mov	r0, r3
 800a348:	d101      	bne.n	800a34e <memchr+0x12>
 800a34a:	2000      	movs	r0, #0
 800a34c:	e003      	b.n	800a356 <memchr+0x1a>
 800a34e:	7804      	ldrb	r4, [r0, #0]
 800a350:	3301      	adds	r3, #1
 800a352:	428c      	cmp	r4, r1
 800a354:	d1f6      	bne.n	800a344 <memchr+0x8>
 800a356:	bd10      	pop	{r4, pc}

0800a358 <memcpy>:
 800a358:	440a      	add	r2, r1
 800a35a:	4291      	cmp	r1, r2
 800a35c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a360:	d100      	bne.n	800a364 <memcpy+0xc>
 800a362:	4770      	bx	lr
 800a364:	b510      	push	{r4, lr}
 800a366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a36a:	4291      	cmp	r1, r2
 800a36c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a370:	d1f9      	bne.n	800a366 <memcpy+0xe>
 800a372:	bd10      	pop	{r4, pc}

0800a374 <_realloc_r>:
 800a374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a378:	4680      	mov	r8, r0
 800a37a:	4614      	mov	r4, r2
 800a37c:	460e      	mov	r6, r1
 800a37e:	b921      	cbnz	r1, 800a38a <_realloc_r+0x16>
 800a380:	4611      	mov	r1, r2
 800a382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a386:	f7ff b8a7 	b.w	80094d8 <_malloc_r>
 800a38a:	b92a      	cbnz	r2, 800a398 <_realloc_r+0x24>
 800a38c:	f7ff f83c 	bl	8009408 <_free_r>
 800a390:	4625      	mov	r5, r4
 800a392:	4628      	mov	r0, r5
 800a394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a398:	f000 f910 	bl	800a5bc <_malloc_usable_size_r>
 800a39c:	4284      	cmp	r4, r0
 800a39e:	4607      	mov	r7, r0
 800a3a0:	d802      	bhi.n	800a3a8 <_realloc_r+0x34>
 800a3a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3a6:	d812      	bhi.n	800a3ce <_realloc_r+0x5a>
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	f7ff f894 	bl	80094d8 <_malloc_r>
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d0ed      	beq.n	800a392 <_realloc_r+0x1e>
 800a3b6:	42bc      	cmp	r4, r7
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	bf28      	it	cs
 800a3be:	463a      	movcs	r2, r7
 800a3c0:	f7ff ffca 	bl	800a358 <memcpy>
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4640      	mov	r0, r8
 800a3c8:	f7ff f81e 	bl	8009408 <_free_r>
 800a3cc:	e7e1      	b.n	800a392 <_realloc_r+0x1e>
 800a3ce:	4635      	mov	r5, r6
 800a3d0:	e7df      	b.n	800a392 <_realloc_r+0x1e>
	...

0800a3d4 <_strtol_l.constprop.0>:
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3da:	4686      	mov	lr, r0
 800a3dc:	4690      	mov	r8, r2
 800a3de:	d001      	beq.n	800a3e4 <_strtol_l.constprop.0+0x10>
 800a3e0:	2b24      	cmp	r3, #36	; 0x24
 800a3e2:	d906      	bls.n	800a3f2 <_strtol_l.constprop.0+0x1e>
 800a3e4:	f7fe ffe4 	bl	80093b0 <__errno>
 800a3e8:	2316      	movs	r3, #22
 800a3ea:	6003      	str	r3, [r0, #0]
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f2:	460d      	mov	r5, r1
 800a3f4:	4835      	ldr	r0, [pc, #212]	; (800a4cc <_strtol_l.constprop.0+0xf8>)
 800a3f6:	462a      	mov	r2, r5
 800a3f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3fc:	5d06      	ldrb	r6, [r0, r4]
 800a3fe:	f016 0608 	ands.w	r6, r6, #8
 800a402:	d1f8      	bne.n	800a3f6 <_strtol_l.constprop.0+0x22>
 800a404:	2c2d      	cmp	r4, #45	; 0x2d
 800a406:	d12e      	bne.n	800a466 <_strtol_l.constprop.0+0x92>
 800a408:	2601      	movs	r6, #1
 800a40a:	782c      	ldrb	r4, [r5, #0]
 800a40c:	1c95      	adds	r5, r2, #2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d057      	beq.n	800a4c2 <_strtol_l.constprop.0+0xee>
 800a412:	2b10      	cmp	r3, #16
 800a414:	d109      	bne.n	800a42a <_strtol_l.constprop.0+0x56>
 800a416:	2c30      	cmp	r4, #48	; 0x30
 800a418:	d107      	bne.n	800a42a <_strtol_l.constprop.0+0x56>
 800a41a:	782a      	ldrb	r2, [r5, #0]
 800a41c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a420:	2a58      	cmp	r2, #88	; 0x58
 800a422:	d149      	bne.n	800a4b8 <_strtol_l.constprop.0+0xe4>
 800a424:	2310      	movs	r3, #16
 800a426:	786c      	ldrb	r4, [r5, #1]
 800a428:	3502      	adds	r5, #2
 800a42a:	2200      	movs	r2, #0
 800a42c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a430:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a434:	fbbc f9f3 	udiv	r9, ip, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	fb03 ca19 	mls	sl, r3, r9, ip
 800a43e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a442:	2f09      	cmp	r7, #9
 800a444:	d814      	bhi.n	800a470 <_strtol_l.constprop.0+0x9c>
 800a446:	463c      	mov	r4, r7
 800a448:	42a3      	cmp	r3, r4
 800a44a:	dd20      	ble.n	800a48e <_strtol_l.constprop.0+0xba>
 800a44c:	1c57      	adds	r7, r2, #1
 800a44e:	d007      	beq.n	800a460 <_strtol_l.constprop.0+0x8c>
 800a450:	4581      	cmp	r9, r0
 800a452:	d319      	bcc.n	800a488 <_strtol_l.constprop.0+0xb4>
 800a454:	d101      	bne.n	800a45a <_strtol_l.constprop.0+0x86>
 800a456:	45a2      	cmp	sl, r4
 800a458:	db16      	blt.n	800a488 <_strtol_l.constprop.0+0xb4>
 800a45a:	2201      	movs	r2, #1
 800a45c:	fb00 4003 	mla	r0, r0, r3, r4
 800a460:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a464:	e7eb      	b.n	800a43e <_strtol_l.constprop.0+0x6a>
 800a466:	2c2b      	cmp	r4, #43	; 0x2b
 800a468:	bf04      	itt	eq
 800a46a:	782c      	ldrbeq	r4, [r5, #0]
 800a46c:	1c95      	addeq	r5, r2, #2
 800a46e:	e7ce      	b.n	800a40e <_strtol_l.constprop.0+0x3a>
 800a470:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a474:	2f19      	cmp	r7, #25
 800a476:	d801      	bhi.n	800a47c <_strtol_l.constprop.0+0xa8>
 800a478:	3c37      	subs	r4, #55	; 0x37
 800a47a:	e7e5      	b.n	800a448 <_strtol_l.constprop.0+0x74>
 800a47c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a480:	2f19      	cmp	r7, #25
 800a482:	d804      	bhi.n	800a48e <_strtol_l.constprop.0+0xba>
 800a484:	3c57      	subs	r4, #87	; 0x57
 800a486:	e7df      	b.n	800a448 <_strtol_l.constprop.0+0x74>
 800a488:	f04f 32ff 	mov.w	r2, #4294967295
 800a48c:	e7e8      	b.n	800a460 <_strtol_l.constprop.0+0x8c>
 800a48e:	1c53      	adds	r3, r2, #1
 800a490:	d108      	bne.n	800a4a4 <_strtol_l.constprop.0+0xd0>
 800a492:	2322      	movs	r3, #34	; 0x22
 800a494:	4660      	mov	r0, ip
 800a496:	f8ce 3000 	str.w	r3, [lr]
 800a49a:	f1b8 0f00 	cmp.w	r8, #0
 800a49e:	d0a6      	beq.n	800a3ee <_strtol_l.constprop.0+0x1a>
 800a4a0:	1e69      	subs	r1, r5, #1
 800a4a2:	e006      	b.n	800a4b2 <_strtol_l.constprop.0+0xde>
 800a4a4:	b106      	cbz	r6, 800a4a8 <_strtol_l.constprop.0+0xd4>
 800a4a6:	4240      	negs	r0, r0
 800a4a8:	f1b8 0f00 	cmp.w	r8, #0
 800a4ac:	d09f      	beq.n	800a3ee <_strtol_l.constprop.0+0x1a>
 800a4ae:	2a00      	cmp	r2, #0
 800a4b0:	d1f6      	bne.n	800a4a0 <_strtol_l.constprop.0+0xcc>
 800a4b2:	f8c8 1000 	str.w	r1, [r8]
 800a4b6:	e79a      	b.n	800a3ee <_strtol_l.constprop.0+0x1a>
 800a4b8:	2430      	movs	r4, #48	; 0x30
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1b5      	bne.n	800a42a <_strtol_l.constprop.0+0x56>
 800a4be:	2308      	movs	r3, #8
 800a4c0:	e7b3      	b.n	800a42a <_strtol_l.constprop.0+0x56>
 800a4c2:	2c30      	cmp	r4, #48	; 0x30
 800a4c4:	d0a9      	beq.n	800a41a <_strtol_l.constprop.0+0x46>
 800a4c6:	230a      	movs	r3, #10
 800a4c8:	e7af      	b.n	800a42a <_strtol_l.constprop.0+0x56>
 800a4ca:	bf00      	nop
 800a4cc:	0800a891 	.word	0x0800a891

0800a4d0 <_strtol_r>:
 800a4d0:	f7ff bf80 	b.w	800a3d4 <_strtol_l.constprop.0>

0800a4d4 <_strtoul_l.constprop.0>:
 800a4d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4d8:	4686      	mov	lr, r0
 800a4da:	460d      	mov	r5, r1
 800a4dc:	4f35      	ldr	r7, [pc, #212]	; (800a5b4 <_strtoul_l.constprop.0+0xe0>)
 800a4de:	4628      	mov	r0, r5
 800a4e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4e4:	5d3e      	ldrb	r6, [r7, r4]
 800a4e6:	f016 0608 	ands.w	r6, r6, #8
 800a4ea:	d1f8      	bne.n	800a4de <_strtoul_l.constprop.0+0xa>
 800a4ec:	2c2d      	cmp	r4, #45	; 0x2d
 800a4ee:	d130      	bne.n	800a552 <_strtoul_l.constprop.0+0x7e>
 800a4f0:	2601      	movs	r6, #1
 800a4f2:	782c      	ldrb	r4, [r5, #0]
 800a4f4:	1c85      	adds	r5, r0, #2
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d057      	beq.n	800a5aa <_strtoul_l.constprop.0+0xd6>
 800a4fa:	2b10      	cmp	r3, #16
 800a4fc:	d109      	bne.n	800a512 <_strtoul_l.constprop.0+0x3e>
 800a4fe:	2c30      	cmp	r4, #48	; 0x30
 800a500:	d107      	bne.n	800a512 <_strtoul_l.constprop.0+0x3e>
 800a502:	7828      	ldrb	r0, [r5, #0]
 800a504:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a508:	2858      	cmp	r0, #88	; 0x58
 800a50a:	d149      	bne.n	800a5a0 <_strtoul_l.constprop.0+0xcc>
 800a50c:	2310      	movs	r3, #16
 800a50e:	786c      	ldrb	r4, [r5, #1]
 800a510:	3502      	adds	r5, #2
 800a512:	f04f 38ff 	mov.w	r8, #4294967295
 800a516:	fbb8 f8f3 	udiv	r8, r8, r3
 800a51a:	2700      	movs	r7, #0
 800a51c:	fb03 f908 	mul.w	r9, r3, r8
 800a520:	4638      	mov	r0, r7
 800a522:	ea6f 0909 	mvn.w	r9, r9
 800a526:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a52a:	f1bc 0f09 	cmp.w	ip, #9
 800a52e:	d815      	bhi.n	800a55c <_strtoul_l.constprop.0+0x88>
 800a530:	4664      	mov	r4, ip
 800a532:	42a3      	cmp	r3, r4
 800a534:	dd23      	ble.n	800a57e <_strtoul_l.constprop.0+0xaa>
 800a536:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a53a:	d007      	beq.n	800a54c <_strtoul_l.constprop.0+0x78>
 800a53c:	4580      	cmp	r8, r0
 800a53e:	d31b      	bcc.n	800a578 <_strtoul_l.constprop.0+0xa4>
 800a540:	d101      	bne.n	800a546 <_strtoul_l.constprop.0+0x72>
 800a542:	45a1      	cmp	r9, r4
 800a544:	db18      	blt.n	800a578 <_strtoul_l.constprop.0+0xa4>
 800a546:	2701      	movs	r7, #1
 800a548:	fb00 4003 	mla	r0, r0, r3, r4
 800a54c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a550:	e7e9      	b.n	800a526 <_strtoul_l.constprop.0+0x52>
 800a552:	2c2b      	cmp	r4, #43	; 0x2b
 800a554:	bf04      	itt	eq
 800a556:	782c      	ldrbeq	r4, [r5, #0]
 800a558:	1c85      	addeq	r5, r0, #2
 800a55a:	e7cc      	b.n	800a4f6 <_strtoul_l.constprop.0+0x22>
 800a55c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a560:	f1bc 0f19 	cmp.w	ip, #25
 800a564:	d801      	bhi.n	800a56a <_strtoul_l.constprop.0+0x96>
 800a566:	3c37      	subs	r4, #55	; 0x37
 800a568:	e7e3      	b.n	800a532 <_strtoul_l.constprop.0+0x5e>
 800a56a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a56e:	f1bc 0f19 	cmp.w	ip, #25
 800a572:	d804      	bhi.n	800a57e <_strtoul_l.constprop.0+0xaa>
 800a574:	3c57      	subs	r4, #87	; 0x57
 800a576:	e7dc      	b.n	800a532 <_strtoul_l.constprop.0+0x5e>
 800a578:	f04f 37ff 	mov.w	r7, #4294967295
 800a57c:	e7e6      	b.n	800a54c <_strtoul_l.constprop.0+0x78>
 800a57e:	1c7b      	adds	r3, r7, #1
 800a580:	d106      	bne.n	800a590 <_strtoul_l.constprop.0+0xbc>
 800a582:	2322      	movs	r3, #34	; 0x22
 800a584:	4638      	mov	r0, r7
 800a586:	f8ce 3000 	str.w	r3, [lr]
 800a58a:	b932      	cbnz	r2, 800a59a <_strtoul_l.constprop.0+0xc6>
 800a58c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a590:	b106      	cbz	r6, 800a594 <_strtoul_l.constprop.0+0xc0>
 800a592:	4240      	negs	r0, r0
 800a594:	2a00      	cmp	r2, #0
 800a596:	d0f9      	beq.n	800a58c <_strtoul_l.constprop.0+0xb8>
 800a598:	b107      	cbz	r7, 800a59c <_strtoul_l.constprop.0+0xc8>
 800a59a:	1e69      	subs	r1, r5, #1
 800a59c:	6011      	str	r1, [r2, #0]
 800a59e:	e7f5      	b.n	800a58c <_strtoul_l.constprop.0+0xb8>
 800a5a0:	2430      	movs	r4, #48	; 0x30
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1b5      	bne.n	800a512 <_strtoul_l.constprop.0+0x3e>
 800a5a6:	2308      	movs	r3, #8
 800a5a8:	e7b3      	b.n	800a512 <_strtoul_l.constprop.0+0x3e>
 800a5aa:	2c30      	cmp	r4, #48	; 0x30
 800a5ac:	d0a9      	beq.n	800a502 <_strtoul_l.constprop.0+0x2e>
 800a5ae:	230a      	movs	r3, #10
 800a5b0:	e7af      	b.n	800a512 <_strtoul_l.constprop.0+0x3e>
 800a5b2:	bf00      	nop
 800a5b4:	0800a891 	.word	0x0800a891

0800a5b8 <_strtoul_r>:
 800a5b8:	f7ff bf8c 	b.w	800a4d4 <_strtoul_l.constprop.0>

0800a5bc <_malloc_usable_size_r>:
 800a5bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5c0:	1f18      	subs	r0, r3, #4
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	bfbc      	itt	lt
 800a5c6:	580b      	ldrlt	r3, [r1, r0]
 800a5c8:	18c0      	addlt	r0, r0, r3
 800a5ca:	4770      	bx	lr

0800a5cc <_init>:
 800a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ce:	bf00      	nop
 800a5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d2:	bc08      	pop	{r3}
 800a5d4:	469e      	mov	lr, r3
 800a5d6:	4770      	bx	lr

0800a5d8 <_fini>:
 800a5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5da:	bf00      	nop
 800a5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5de:	bc08      	pop	{r3}
 800a5e0:	469e      	mov	lr, r3
 800a5e2:	4770      	bx	lr
